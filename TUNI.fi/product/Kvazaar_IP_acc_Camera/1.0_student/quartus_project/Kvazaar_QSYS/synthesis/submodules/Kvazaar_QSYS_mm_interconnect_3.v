// Kvazaar_QSYS_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.0 211

`timescale 1 ps / 1 ps
module Kvazaar_QSYS_mm_interconnect_3 (
		output wire [11:0] acc_config_altera_axi_slave_awid,                                 //                                acc_config_altera_axi_slave.awid
		output wire [7:0]  acc_config_altera_axi_slave_awaddr,                               //                                                           .awaddr
		output wire [3:0]  acc_config_altera_axi_slave_awlen,                                //                                                           .awlen
		output wire [2:0]  acc_config_altera_axi_slave_awsize,                               //                                                           .awsize
		output wire [1:0]  acc_config_altera_axi_slave_awburst,                              //                                                           .awburst
		output wire [1:0]  acc_config_altera_axi_slave_awlock,                               //                                                           .awlock
		output wire [3:0]  acc_config_altera_axi_slave_awcache,                              //                                                           .awcache
		output wire [2:0]  acc_config_altera_axi_slave_awprot,                               //                                                           .awprot
		output wire        acc_config_altera_axi_slave_awvalid,                              //                                                           .awvalid
		input  wire        acc_config_altera_axi_slave_awready,                              //                                                           .awready
		output wire [11:0] acc_config_altera_axi_slave_wid,                                  //                                                           .wid
		output wire [31:0] acc_config_altera_axi_slave_wdata,                                //                                                           .wdata
		output wire [3:0]  acc_config_altera_axi_slave_wstrb,                                //                                                           .wstrb
		output wire        acc_config_altera_axi_slave_wlast,                                //                                                           .wlast
		output wire        acc_config_altera_axi_slave_wvalid,                               //                                                           .wvalid
		input  wire        acc_config_altera_axi_slave_wready,                               //                                                           .wready
		input  wire [11:0] acc_config_altera_axi_slave_bid,                                  //                                                           .bid
		input  wire [1:0]  acc_config_altera_axi_slave_bresp,                                //                                                           .bresp
		input  wire        acc_config_altera_axi_slave_bvalid,                               //                                                           .bvalid
		output wire        acc_config_altera_axi_slave_bready,                               //                                                           .bready
		output wire [11:0] acc_config_altera_axi_slave_arid,                                 //                                                           .arid
		output wire [7:0]  acc_config_altera_axi_slave_araddr,                               //                                                           .araddr
		output wire [3:0]  acc_config_altera_axi_slave_arlen,                                //                                                           .arlen
		output wire [2:0]  acc_config_altera_axi_slave_arsize,                               //                                                           .arsize
		output wire [1:0]  acc_config_altera_axi_slave_arburst,                              //                                                           .arburst
		output wire [1:0]  acc_config_altera_axi_slave_arlock,                               //                                                           .arlock
		output wire [3:0]  acc_config_altera_axi_slave_arcache,                              //                                                           .arcache
		output wire [2:0]  acc_config_altera_axi_slave_arprot,                               //                                                           .arprot
		output wire        acc_config_altera_axi_slave_arvalid,                              //                                                           .arvalid
		input  wire        acc_config_altera_axi_slave_arready,                              //                                                           .arready
		input  wire [11:0] acc_config_altera_axi_slave_rid,                                  //                                                           .rid
		input  wire [31:0] acc_config_altera_axi_slave_rdata,                                //                                                           .rdata
		input  wire [1:0]  acc_config_altera_axi_slave_rresp,                                //                                                           .rresp
		input  wire        acc_config_altera_axi_slave_rlast,                                //                                                           .rlast
		input  wire        acc_config_altera_axi_slave_rvalid,                               //                                                           .rvalid
		output wire        acc_config_altera_axi_slave_rready,                               //                                                           .rready
		output wire [11:0] axi_dma_orig_block_altera_axi_slave_awid,                         //                        axi_dma_orig_block_altera_axi_slave.awid
		output wire [7:0]  axi_dma_orig_block_altera_axi_slave_awaddr,                       //                                                           .awaddr
		output wire [3:0]  axi_dma_orig_block_altera_axi_slave_awlen,                        //                                                           .awlen
		output wire [2:0]  axi_dma_orig_block_altera_axi_slave_awsize,                       //                                                           .awsize
		output wire [1:0]  axi_dma_orig_block_altera_axi_slave_awburst,                      //                                                           .awburst
		output wire [1:0]  axi_dma_orig_block_altera_axi_slave_awlock,                       //                                                           .awlock
		output wire [3:0]  axi_dma_orig_block_altera_axi_slave_awcache,                      //                                                           .awcache
		output wire [2:0]  axi_dma_orig_block_altera_axi_slave_awprot,                       //                                                           .awprot
		output wire        axi_dma_orig_block_altera_axi_slave_awvalid,                      //                                                           .awvalid
		input  wire        axi_dma_orig_block_altera_axi_slave_awready,                      //                                                           .awready
		output wire [11:0] axi_dma_orig_block_altera_axi_slave_wid,                          //                                                           .wid
		output wire [31:0] axi_dma_orig_block_altera_axi_slave_wdata,                        //                                                           .wdata
		output wire [3:0]  axi_dma_orig_block_altera_axi_slave_wstrb,                        //                                                           .wstrb
		output wire        axi_dma_orig_block_altera_axi_slave_wlast,                        //                                                           .wlast
		output wire        axi_dma_orig_block_altera_axi_slave_wvalid,                       //                                                           .wvalid
		input  wire        axi_dma_orig_block_altera_axi_slave_wready,                       //                                                           .wready
		input  wire [11:0] axi_dma_orig_block_altera_axi_slave_bid,                          //                                                           .bid
		input  wire [1:0]  axi_dma_orig_block_altera_axi_slave_bresp,                        //                                                           .bresp
		input  wire        axi_dma_orig_block_altera_axi_slave_bvalid,                       //                                                           .bvalid
		output wire        axi_dma_orig_block_altera_axi_slave_bready,                       //                                                           .bready
		output wire [11:0] axi_dma_orig_block_altera_axi_slave_arid,                         //                                                           .arid
		output wire [7:0]  axi_dma_orig_block_altera_axi_slave_araddr,                       //                                                           .araddr
		output wire [3:0]  axi_dma_orig_block_altera_axi_slave_arlen,                        //                                                           .arlen
		output wire [2:0]  axi_dma_orig_block_altera_axi_slave_arsize,                       //                                                           .arsize
		output wire [1:0]  axi_dma_orig_block_altera_axi_slave_arburst,                      //                                                           .arburst
		output wire [1:0]  axi_dma_orig_block_altera_axi_slave_arlock,                       //                                                           .arlock
		output wire [3:0]  axi_dma_orig_block_altera_axi_slave_arcache,                      //                                                           .arcache
		output wire [2:0]  axi_dma_orig_block_altera_axi_slave_arprot,                       //                                                           .arprot
		output wire        axi_dma_orig_block_altera_axi_slave_arvalid,                      //                                                           .arvalid
		input  wire        axi_dma_orig_block_altera_axi_slave_arready,                      //                                                           .arready
		input  wire [11:0] axi_dma_orig_block_altera_axi_slave_rid,                          //                                                           .rid
		input  wire [31:0] axi_dma_orig_block_altera_axi_slave_rdata,                        //                                                           .rdata
		input  wire [1:0]  axi_dma_orig_block_altera_axi_slave_rresp,                        //                                                           .rresp
		input  wire        axi_dma_orig_block_altera_axi_slave_rlast,                        //                                                           .rlast
		input  wire        axi_dma_orig_block_altera_axi_slave_rvalid,                       //                                                           .rvalid
		output wire        axi_dma_orig_block_altera_axi_slave_rready,                       //                                                           .rready
		output wire [11:0] axi_dma_unfiltered1_altera_axi_slave_awid,                        //                       axi_dma_unfiltered1_altera_axi_slave.awid
		output wire [7:0]  axi_dma_unfiltered1_altera_axi_slave_awaddr,                      //                                                           .awaddr
		output wire [3:0]  axi_dma_unfiltered1_altera_axi_slave_awlen,                       //                                                           .awlen
		output wire [2:0]  axi_dma_unfiltered1_altera_axi_slave_awsize,                      //                                                           .awsize
		output wire [1:0]  axi_dma_unfiltered1_altera_axi_slave_awburst,                     //                                                           .awburst
		output wire [1:0]  axi_dma_unfiltered1_altera_axi_slave_awlock,                      //                                                           .awlock
		output wire [3:0]  axi_dma_unfiltered1_altera_axi_slave_awcache,                     //                                                           .awcache
		output wire [2:0]  axi_dma_unfiltered1_altera_axi_slave_awprot,                      //                                                           .awprot
		output wire        axi_dma_unfiltered1_altera_axi_slave_awvalid,                     //                                                           .awvalid
		input  wire        axi_dma_unfiltered1_altera_axi_slave_awready,                     //                                                           .awready
		output wire [11:0] axi_dma_unfiltered1_altera_axi_slave_wid,                         //                                                           .wid
		output wire [31:0] axi_dma_unfiltered1_altera_axi_slave_wdata,                       //                                                           .wdata
		output wire [3:0]  axi_dma_unfiltered1_altera_axi_slave_wstrb,                       //                                                           .wstrb
		output wire        axi_dma_unfiltered1_altera_axi_slave_wlast,                       //                                                           .wlast
		output wire        axi_dma_unfiltered1_altera_axi_slave_wvalid,                      //                                                           .wvalid
		input  wire        axi_dma_unfiltered1_altera_axi_slave_wready,                      //                                                           .wready
		input  wire [11:0] axi_dma_unfiltered1_altera_axi_slave_bid,                         //                                                           .bid
		input  wire [1:0]  axi_dma_unfiltered1_altera_axi_slave_bresp,                       //                                                           .bresp
		input  wire        axi_dma_unfiltered1_altera_axi_slave_bvalid,                      //                                                           .bvalid
		output wire        axi_dma_unfiltered1_altera_axi_slave_bready,                      //                                                           .bready
		output wire [11:0] axi_dma_unfiltered1_altera_axi_slave_arid,                        //                                                           .arid
		output wire [7:0]  axi_dma_unfiltered1_altera_axi_slave_araddr,                      //                                                           .araddr
		output wire [3:0]  axi_dma_unfiltered1_altera_axi_slave_arlen,                       //                                                           .arlen
		output wire [2:0]  axi_dma_unfiltered1_altera_axi_slave_arsize,                      //                                                           .arsize
		output wire [1:0]  axi_dma_unfiltered1_altera_axi_slave_arburst,                     //                                                           .arburst
		output wire [1:0]  axi_dma_unfiltered1_altera_axi_slave_arlock,                      //                                                           .arlock
		output wire [3:0]  axi_dma_unfiltered1_altera_axi_slave_arcache,                     //                                                           .arcache
		output wire [2:0]  axi_dma_unfiltered1_altera_axi_slave_arprot,                      //                                                           .arprot
		output wire        axi_dma_unfiltered1_altera_axi_slave_arvalid,                     //                                                           .arvalid
		input  wire        axi_dma_unfiltered1_altera_axi_slave_arready,                     //                                                           .arready
		input  wire [11:0] axi_dma_unfiltered1_altera_axi_slave_rid,                         //                                                           .rid
		input  wire [31:0] axi_dma_unfiltered1_altera_axi_slave_rdata,                       //                                                           .rdata
		input  wire [1:0]  axi_dma_unfiltered1_altera_axi_slave_rresp,                       //                                                           .rresp
		input  wire        axi_dma_unfiltered1_altera_axi_slave_rlast,                       //                                                           .rlast
		input  wire        axi_dma_unfiltered1_altera_axi_slave_rvalid,                      //                                                           .rvalid
		output wire        axi_dma_unfiltered1_altera_axi_slave_rready,                      //                                                           .rready
		output wire [11:0] axi_dma_unfiltered2_altera_axi_slave_awid,                        //                       axi_dma_unfiltered2_altera_axi_slave.awid
		output wire [7:0]  axi_dma_unfiltered2_altera_axi_slave_awaddr,                      //                                                           .awaddr
		output wire [3:0]  axi_dma_unfiltered2_altera_axi_slave_awlen,                       //                                                           .awlen
		output wire [2:0]  axi_dma_unfiltered2_altera_axi_slave_awsize,                      //                                                           .awsize
		output wire [1:0]  axi_dma_unfiltered2_altera_axi_slave_awburst,                     //                                                           .awburst
		output wire [1:0]  axi_dma_unfiltered2_altera_axi_slave_awlock,                      //                                                           .awlock
		output wire [3:0]  axi_dma_unfiltered2_altera_axi_slave_awcache,                     //                                                           .awcache
		output wire [2:0]  axi_dma_unfiltered2_altera_axi_slave_awprot,                      //                                                           .awprot
		output wire        axi_dma_unfiltered2_altera_axi_slave_awvalid,                     //                                                           .awvalid
		input  wire        axi_dma_unfiltered2_altera_axi_slave_awready,                     //                                                           .awready
		output wire [11:0] axi_dma_unfiltered2_altera_axi_slave_wid,                         //                                                           .wid
		output wire [31:0] axi_dma_unfiltered2_altera_axi_slave_wdata,                       //                                                           .wdata
		output wire [3:0]  axi_dma_unfiltered2_altera_axi_slave_wstrb,                       //                                                           .wstrb
		output wire        axi_dma_unfiltered2_altera_axi_slave_wlast,                       //                                                           .wlast
		output wire        axi_dma_unfiltered2_altera_axi_slave_wvalid,                      //                                                           .wvalid
		input  wire        axi_dma_unfiltered2_altera_axi_slave_wready,                      //                                                           .wready
		input  wire [11:0] axi_dma_unfiltered2_altera_axi_slave_bid,                         //                                                           .bid
		input  wire [1:0]  axi_dma_unfiltered2_altera_axi_slave_bresp,                       //                                                           .bresp
		input  wire        axi_dma_unfiltered2_altera_axi_slave_bvalid,                      //                                                           .bvalid
		output wire        axi_dma_unfiltered2_altera_axi_slave_bready,                      //                                                           .bready
		output wire [11:0] axi_dma_unfiltered2_altera_axi_slave_arid,                        //                                                           .arid
		output wire [7:0]  axi_dma_unfiltered2_altera_axi_slave_araddr,                      //                                                           .araddr
		output wire [3:0]  axi_dma_unfiltered2_altera_axi_slave_arlen,                       //                                                           .arlen
		output wire [2:0]  axi_dma_unfiltered2_altera_axi_slave_arsize,                      //                                                           .arsize
		output wire [1:0]  axi_dma_unfiltered2_altera_axi_slave_arburst,                     //                                                           .arburst
		output wire [1:0]  axi_dma_unfiltered2_altera_axi_slave_arlock,                      //                                                           .arlock
		output wire [3:0]  axi_dma_unfiltered2_altera_axi_slave_arcache,                     //                                                           .arcache
		output wire [2:0]  axi_dma_unfiltered2_altera_axi_slave_arprot,                      //                                                           .arprot
		output wire        axi_dma_unfiltered2_altera_axi_slave_arvalid,                     //                                                           .arvalid
		input  wire        axi_dma_unfiltered2_altera_axi_slave_arready,                     //                                                           .arready
		input  wire [11:0] axi_dma_unfiltered2_altera_axi_slave_rid,                         //                                                           .rid
		input  wire [31:0] axi_dma_unfiltered2_altera_axi_slave_rdata,                       //                                                           .rdata
		input  wire [1:0]  axi_dma_unfiltered2_altera_axi_slave_rresp,                       //                                                           .rresp
		input  wire        axi_dma_unfiltered2_altera_axi_slave_rlast,                       //                                                           .rlast
		input  wire        axi_dma_unfiltered2_altera_axi_slave_rvalid,                      //                                                           .rvalid
		output wire        axi_dma_unfiltered2_altera_axi_slave_rready,                      //                                                           .rready
		output wire [11:0] dma_yuv_altera_axi_slave_awid,                                    //                                   dma_yuv_altera_axi_slave.awid
		output wire [7:0]  dma_yuv_altera_axi_slave_awaddr,                                  //                                                           .awaddr
		output wire [3:0]  dma_yuv_altera_axi_slave_awlen,                                   //                                                           .awlen
		output wire [2:0]  dma_yuv_altera_axi_slave_awsize,                                  //                                                           .awsize
		output wire [1:0]  dma_yuv_altera_axi_slave_awburst,                                 //                                                           .awburst
		output wire [1:0]  dma_yuv_altera_axi_slave_awlock,                                  //                                                           .awlock
		output wire [3:0]  dma_yuv_altera_axi_slave_awcache,                                 //                                                           .awcache
		output wire [2:0]  dma_yuv_altera_axi_slave_awprot,                                  //                                                           .awprot
		output wire        dma_yuv_altera_axi_slave_awvalid,                                 //                                                           .awvalid
		input  wire        dma_yuv_altera_axi_slave_awready,                                 //                                                           .awready
		output wire [11:0] dma_yuv_altera_axi_slave_wid,                                     //                                                           .wid
		output wire [31:0] dma_yuv_altera_axi_slave_wdata,                                   //                                                           .wdata
		output wire [3:0]  dma_yuv_altera_axi_slave_wstrb,                                   //                                                           .wstrb
		output wire        dma_yuv_altera_axi_slave_wlast,                                   //                                                           .wlast
		output wire        dma_yuv_altera_axi_slave_wvalid,                                  //                                                           .wvalid
		input  wire        dma_yuv_altera_axi_slave_wready,                                  //                                                           .wready
		input  wire [11:0] dma_yuv_altera_axi_slave_bid,                                     //                                                           .bid
		input  wire [1:0]  dma_yuv_altera_axi_slave_bresp,                                   //                                                           .bresp
		input  wire        dma_yuv_altera_axi_slave_bvalid,                                  //                                                           .bvalid
		output wire        dma_yuv_altera_axi_slave_bready,                                  //                                                           .bready
		output wire [11:0] dma_yuv_altera_axi_slave_arid,                                    //                                                           .arid
		output wire [7:0]  dma_yuv_altera_axi_slave_araddr,                                  //                                                           .araddr
		output wire [3:0]  dma_yuv_altera_axi_slave_arlen,                                   //                                                           .arlen
		output wire [2:0]  dma_yuv_altera_axi_slave_arsize,                                  //                                                           .arsize
		output wire [1:0]  dma_yuv_altera_axi_slave_arburst,                                 //                                                           .arburst
		output wire [1:0]  dma_yuv_altera_axi_slave_arlock,                                  //                                                           .arlock
		output wire [3:0]  dma_yuv_altera_axi_slave_arcache,                                 //                                                           .arcache
		output wire [2:0]  dma_yuv_altera_axi_slave_arprot,                                  //                                                           .arprot
		output wire        dma_yuv_altera_axi_slave_arvalid,                                 //                                                           .arvalid
		input  wire        dma_yuv_altera_axi_slave_arready,                                 //                                                           .arready
		input  wire [11:0] dma_yuv_altera_axi_slave_rid,                                     //                                                           .rid
		input  wire [31:0] dma_yuv_altera_axi_slave_rdata,                                   //                                                           .rdata
		input  wire [1:0]  dma_yuv_altera_axi_slave_rresp,                                   //                                                           .rresp
		input  wire        dma_yuv_altera_axi_slave_rlast,                                   //                                                           .rlast
		input  wire        dma_yuv_altera_axi_slave_rvalid,                                  //                                                           .rvalid
		output wire        dma_yuv_altera_axi_slave_rready,                                  //                                                           .rready
		input  wire [11:0] hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0] hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire        hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire        hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0] hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [63:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [7:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire        hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire        hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire        hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0] hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]  hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire        hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire        hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0] hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0] hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire        hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire        hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0] hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [63:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]  hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire        hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire        hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire        hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire        clk_0_clk_clk,                                                    //                                                  clk_0_clk.clk
		input  wire        acc_config_reset_sink_reset_bridge_in_reset_reset,                //                acc_config_reset_sink_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		output wire [5:0]  camera_control_oc_s1_address,                                     //                                       camera_control_oc_s1.address
		output wire        camera_control_oc_s1_write,                                       //                                                           .write
		input  wire [15:0] camera_control_oc_s1_readdata,                                    //                                                           .readdata
		output wire [15:0] camera_control_oc_s1_writedata,                                   //                                                           .writedata
		output wire [1:0]  camera_control_oc_s1_byteenable,                                  //                                                           .byteenable
		output wire        camera_control_oc_s1_chipselect,                                  //                                                           .chipselect
		output wire        camera_control_oc_s1_clken,                                       //                                                           .clken
		output wire [1:0]  configure_camera_s1_address,                                      //                                        configure_camera_s1.address
		output wire        configure_camera_s1_write,                                        //                                                           .write
		input  wire [31:0] configure_camera_s1_readdata,                                     //                                                           .readdata
		output wire [31:0] configure_camera_s1_writedata,                                    //                                                           .writedata
		output wire        configure_camera_s1_chipselect,                                   //                                                           .chipselect
		output wire [1:0]  lambda_loaded_s1_address,                                         //                                           lambda_loaded_s1.address
		output wire        lambda_loaded_s1_write,                                           //                                                           .write
		input  wire [31:0] lambda_loaded_s1_readdata,                                        //                                                           .readdata
		output wire [31:0] lambda_loaded_s1_writedata,                                       //                                                           .writedata
		output wire        lambda_loaded_s1_chipselect,                                      //                                                           .chipselect
		output wire [1:0]  lcu_loaded_s1_address,                                            //                                              lcu_loaded_s1.address
		output wire        lcu_loaded_s1_write,                                              //                                                           .write
		input  wire [31:0] lcu_loaded_s1_readdata,                                           //                                                           .readdata
		output wire [31:0] lcu_loaded_s1_writedata,                                          //                                                           .writedata
		output wire        lcu_loaded_s1_chipselect,                                         //                                                           .chipselect
		output wire [1:0]  result_ready_s1_address,                                          //                                            result_ready_s1.address
		output wire        result_ready_s1_write,                                            //                                                           .write
		input  wire [31:0] result_ready_s1_readdata,                                         //                                                           .readdata
		output wire [31:0] result_ready_s1_writedata,                                        //                                                           .writedata
		output wire        result_ready_s1_chipselect,                                       //                                                           .chipselect
		output wire [1:0]  sad_result_high_s1_address,                                       //                                         sad_result_high_s1.address
		output wire        sad_result_high_s1_write,                                         //                                                           .write
		input  wire [31:0] sad_result_high_s1_readdata,                                      //                                                           .readdata
		output wire [31:0] sad_result_high_s1_writedata,                                     //                                                           .writedata
		output wire        sad_result_high_s1_chipselect,                                    //                                                           .chipselect
		output wire [1:0]  sad_result_low_s1_address,                                        //                                          sad_result_low_s1.address
		output wire        sad_result_low_s1_write,                                          //                                                           .write
		input  wire [31:0] sad_result_low_s1_readdata,                                       //                                                           .readdata
		output wire [31:0] sad_result_low_s1_writedata,                                      //                                                           .writedata
		output wire        sad_result_low_s1_chipselect,                                     //                                                           .chipselect
		output wire [1:0]  yuv_ctrl_s1_address,                                              //                                                yuv_ctrl_s1.address
		output wire        yuv_ctrl_s1_write,                                                //                                                           .write
		input  wire [31:0] yuv_ctrl_s1_readdata,                                             //                                                           .readdata
		output wire [31:0] yuv_ctrl_s1_writedata,                                            //                                                           .writedata
		output wire        yuv_ctrl_s1_chipselect,                                           //                                                           .chipselect
		output wire [1:0]  yuv_status_s1_address,                                            //                                              yuv_status_s1.address
		output wire        yuv_status_s1_write,                                              //                                                           .write
		input  wire [31:0] yuv_status_s1_readdata,                                           //                                                           .readdata
		output wire [31:0] yuv_status_s1_writedata,                                          //                                                           .writedata
		output wire        yuv_status_s1_chipselect                                          //                                                           .chipselect
	);

	wire   [31:0] sad_result_low_s1_agent_m0_readdata;                                         // sad_result_low_s1_translator:uav_readdata -> sad_result_low_s1_agent:m0_readdata
	wire          sad_result_low_s1_agent_m0_waitrequest;                                      // sad_result_low_s1_translator:uav_waitrequest -> sad_result_low_s1_agent:m0_waitrequest
	wire          sad_result_low_s1_agent_m0_debugaccess;                                      // sad_result_low_s1_agent:m0_debugaccess -> sad_result_low_s1_translator:uav_debugaccess
	wire   [29:0] sad_result_low_s1_agent_m0_address;                                          // sad_result_low_s1_agent:m0_address -> sad_result_low_s1_translator:uav_address
	wire    [3:0] sad_result_low_s1_agent_m0_byteenable;                                       // sad_result_low_s1_agent:m0_byteenable -> sad_result_low_s1_translator:uav_byteenable
	wire          sad_result_low_s1_agent_m0_read;                                             // sad_result_low_s1_agent:m0_read -> sad_result_low_s1_translator:uav_read
	wire          sad_result_low_s1_agent_m0_readdatavalid;                                    // sad_result_low_s1_translator:uav_readdatavalid -> sad_result_low_s1_agent:m0_readdatavalid
	wire          sad_result_low_s1_agent_m0_lock;                                             // sad_result_low_s1_agent:m0_lock -> sad_result_low_s1_translator:uav_lock
	wire   [31:0] sad_result_low_s1_agent_m0_writedata;                                        // sad_result_low_s1_agent:m0_writedata -> sad_result_low_s1_translator:uav_writedata
	wire          sad_result_low_s1_agent_m0_write;                                            // sad_result_low_s1_agent:m0_write -> sad_result_low_s1_translator:uav_write
	wire    [2:0] sad_result_low_s1_agent_m0_burstcount;                                       // sad_result_low_s1_agent:m0_burstcount -> sad_result_low_s1_translator:uav_burstcount
	wire          sad_result_low_s1_agent_rf_source_valid;                                     // sad_result_low_s1_agent:rf_source_valid -> sad_result_low_s1_agent_rsp_fifo:in_valid
	wire  [129:0] sad_result_low_s1_agent_rf_source_data;                                      // sad_result_low_s1_agent:rf_source_data -> sad_result_low_s1_agent_rsp_fifo:in_data
	wire          sad_result_low_s1_agent_rf_source_ready;                                     // sad_result_low_s1_agent_rsp_fifo:in_ready -> sad_result_low_s1_agent:rf_source_ready
	wire          sad_result_low_s1_agent_rf_source_startofpacket;                             // sad_result_low_s1_agent:rf_source_startofpacket -> sad_result_low_s1_agent_rsp_fifo:in_startofpacket
	wire          sad_result_low_s1_agent_rf_source_endofpacket;                               // sad_result_low_s1_agent:rf_source_endofpacket -> sad_result_low_s1_agent_rsp_fifo:in_endofpacket
	wire          sad_result_low_s1_agent_rsp_fifo_out_valid;                                  // sad_result_low_s1_agent_rsp_fifo:out_valid -> sad_result_low_s1_agent:rf_sink_valid
	wire  [129:0] sad_result_low_s1_agent_rsp_fifo_out_data;                                   // sad_result_low_s1_agent_rsp_fifo:out_data -> sad_result_low_s1_agent:rf_sink_data
	wire          sad_result_low_s1_agent_rsp_fifo_out_ready;                                  // sad_result_low_s1_agent:rf_sink_ready -> sad_result_low_s1_agent_rsp_fifo:out_ready
	wire          sad_result_low_s1_agent_rsp_fifo_out_startofpacket;                          // sad_result_low_s1_agent_rsp_fifo:out_startofpacket -> sad_result_low_s1_agent:rf_sink_startofpacket
	wire          sad_result_low_s1_agent_rsp_fifo_out_endofpacket;                            // sad_result_low_s1_agent_rsp_fifo:out_endofpacket -> sad_result_low_s1_agent:rf_sink_endofpacket
	wire          sad_result_low_s1_agent_rdata_fifo_src_valid;                                // sad_result_low_s1_agent:rdata_fifo_src_valid -> sad_result_low_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sad_result_low_s1_agent_rdata_fifo_src_data;                                 // sad_result_low_s1_agent:rdata_fifo_src_data -> sad_result_low_s1_agent_rdata_fifo:in_data
	wire          sad_result_low_s1_agent_rdata_fifo_src_ready;                                // sad_result_low_s1_agent_rdata_fifo:in_ready -> sad_result_low_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sad_result_high_s1_agent_m0_readdata;                                        // sad_result_high_s1_translator:uav_readdata -> sad_result_high_s1_agent:m0_readdata
	wire          sad_result_high_s1_agent_m0_waitrequest;                                     // sad_result_high_s1_translator:uav_waitrequest -> sad_result_high_s1_agent:m0_waitrequest
	wire          sad_result_high_s1_agent_m0_debugaccess;                                     // sad_result_high_s1_agent:m0_debugaccess -> sad_result_high_s1_translator:uav_debugaccess
	wire   [29:0] sad_result_high_s1_agent_m0_address;                                         // sad_result_high_s1_agent:m0_address -> sad_result_high_s1_translator:uav_address
	wire    [3:0] sad_result_high_s1_agent_m0_byteenable;                                      // sad_result_high_s1_agent:m0_byteenable -> sad_result_high_s1_translator:uav_byteenable
	wire          sad_result_high_s1_agent_m0_read;                                            // sad_result_high_s1_agent:m0_read -> sad_result_high_s1_translator:uav_read
	wire          sad_result_high_s1_agent_m0_readdatavalid;                                   // sad_result_high_s1_translator:uav_readdatavalid -> sad_result_high_s1_agent:m0_readdatavalid
	wire          sad_result_high_s1_agent_m0_lock;                                            // sad_result_high_s1_agent:m0_lock -> sad_result_high_s1_translator:uav_lock
	wire   [31:0] sad_result_high_s1_agent_m0_writedata;                                       // sad_result_high_s1_agent:m0_writedata -> sad_result_high_s1_translator:uav_writedata
	wire          sad_result_high_s1_agent_m0_write;                                           // sad_result_high_s1_agent:m0_write -> sad_result_high_s1_translator:uav_write
	wire    [2:0] sad_result_high_s1_agent_m0_burstcount;                                      // sad_result_high_s1_agent:m0_burstcount -> sad_result_high_s1_translator:uav_burstcount
	wire          sad_result_high_s1_agent_rf_source_valid;                                    // sad_result_high_s1_agent:rf_source_valid -> sad_result_high_s1_agent_rsp_fifo:in_valid
	wire  [129:0] sad_result_high_s1_agent_rf_source_data;                                     // sad_result_high_s1_agent:rf_source_data -> sad_result_high_s1_agent_rsp_fifo:in_data
	wire          sad_result_high_s1_agent_rf_source_ready;                                    // sad_result_high_s1_agent_rsp_fifo:in_ready -> sad_result_high_s1_agent:rf_source_ready
	wire          sad_result_high_s1_agent_rf_source_startofpacket;                            // sad_result_high_s1_agent:rf_source_startofpacket -> sad_result_high_s1_agent_rsp_fifo:in_startofpacket
	wire          sad_result_high_s1_agent_rf_source_endofpacket;                              // sad_result_high_s1_agent:rf_source_endofpacket -> sad_result_high_s1_agent_rsp_fifo:in_endofpacket
	wire          sad_result_high_s1_agent_rsp_fifo_out_valid;                                 // sad_result_high_s1_agent_rsp_fifo:out_valid -> sad_result_high_s1_agent:rf_sink_valid
	wire  [129:0] sad_result_high_s1_agent_rsp_fifo_out_data;                                  // sad_result_high_s1_agent_rsp_fifo:out_data -> sad_result_high_s1_agent:rf_sink_data
	wire          sad_result_high_s1_agent_rsp_fifo_out_ready;                                 // sad_result_high_s1_agent:rf_sink_ready -> sad_result_high_s1_agent_rsp_fifo:out_ready
	wire          sad_result_high_s1_agent_rsp_fifo_out_startofpacket;                         // sad_result_high_s1_agent_rsp_fifo:out_startofpacket -> sad_result_high_s1_agent:rf_sink_startofpacket
	wire          sad_result_high_s1_agent_rsp_fifo_out_endofpacket;                           // sad_result_high_s1_agent_rsp_fifo:out_endofpacket -> sad_result_high_s1_agent:rf_sink_endofpacket
	wire          sad_result_high_s1_agent_rdata_fifo_src_valid;                               // sad_result_high_s1_agent:rdata_fifo_src_valid -> sad_result_high_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sad_result_high_s1_agent_rdata_fifo_src_data;                                // sad_result_high_s1_agent:rdata_fifo_src_data -> sad_result_high_s1_agent_rdata_fifo:in_data
	wire          sad_result_high_s1_agent_rdata_fifo_src_ready;                               // sad_result_high_s1_agent_rdata_fifo:in_ready -> sad_result_high_s1_agent:rdata_fifo_src_ready
	wire   [31:0] result_ready_s1_agent_m0_readdata;                                           // result_ready_s1_translator:uav_readdata -> result_ready_s1_agent:m0_readdata
	wire          result_ready_s1_agent_m0_waitrequest;                                        // result_ready_s1_translator:uav_waitrequest -> result_ready_s1_agent:m0_waitrequest
	wire          result_ready_s1_agent_m0_debugaccess;                                        // result_ready_s1_agent:m0_debugaccess -> result_ready_s1_translator:uav_debugaccess
	wire   [29:0] result_ready_s1_agent_m0_address;                                            // result_ready_s1_agent:m0_address -> result_ready_s1_translator:uav_address
	wire    [3:0] result_ready_s1_agent_m0_byteenable;                                         // result_ready_s1_agent:m0_byteenable -> result_ready_s1_translator:uav_byteenable
	wire          result_ready_s1_agent_m0_read;                                               // result_ready_s1_agent:m0_read -> result_ready_s1_translator:uav_read
	wire          result_ready_s1_agent_m0_readdatavalid;                                      // result_ready_s1_translator:uav_readdatavalid -> result_ready_s1_agent:m0_readdatavalid
	wire          result_ready_s1_agent_m0_lock;                                               // result_ready_s1_agent:m0_lock -> result_ready_s1_translator:uav_lock
	wire   [31:0] result_ready_s1_agent_m0_writedata;                                          // result_ready_s1_agent:m0_writedata -> result_ready_s1_translator:uav_writedata
	wire          result_ready_s1_agent_m0_write;                                              // result_ready_s1_agent:m0_write -> result_ready_s1_translator:uav_write
	wire    [2:0] result_ready_s1_agent_m0_burstcount;                                         // result_ready_s1_agent:m0_burstcount -> result_ready_s1_translator:uav_burstcount
	wire          result_ready_s1_agent_rf_source_valid;                                       // result_ready_s1_agent:rf_source_valid -> result_ready_s1_agent_rsp_fifo:in_valid
	wire  [129:0] result_ready_s1_agent_rf_source_data;                                        // result_ready_s1_agent:rf_source_data -> result_ready_s1_agent_rsp_fifo:in_data
	wire          result_ready_s1_agent_rf_source_ready;                                       // result_ready_s1_agent_rsp_fifo:in_ready -> result_ready_s1_agent:rf_source_ready
	wire          result_ready_s1_agent_rf_source_startofpacket;                               // result_ready_s1_agent:rf_source_startofpacket -> result_ready_s1_agent_rsp_fifo:in_startofpacket
	wire          result_ready_s1_agent_rf_source_endofpacket;                                 // result_ready_s1_agent:rf_source_endofpacket -> result_ready_s1_agent_rsp_fifo:in_endofpacket
	wire          result_ready_s1_agent_rsp_fifo_out_valid;                                    // result_ready_s1_agent_rsp_fifo:out_valid -> result_ready_s1_agent:rf_sink_valid
	wire  [129:0] result_ready_s1_agent_rsp_fifo_out_data;                                     // result_ready_s1_agent_rsp_fifo:out_data -> result_ready_s1_agent:rf_sink_data
	wire          result_ready_s1_agent_rsp_fifo_out_ready;                                    // result_ready_s1_agent:rf_sink_ready -> result_ready_s1_agent_rsp_fifo:out_ready
	wire          result_ready_s1_agent_rsp_fifo_out_startofpacket;                            // result_ready_s1_agent_rsp_fifo:out_startofpacket -> result_ready_s1_agent:rf_sink_startofpacket
	wire          result_ready_s1_agent_rsp_fifo_out_endofpacket;                              // result_ready_s1_agent_rsp_fifo:out_endofpacket -> result_ready_s1_agent:rf_sink_endofpacket
	wire          result_ready_s1_agent_rdata_fifo_src_valid;                                  // result_ready_s1_agent:rdata_fifo_src_valid -> result_ready_s1_agent_rdata_fifo:in_valid
	wire   [33:0] result_ready_s1_agent_rdata_fifo_src_data;                                   // result_ready_s1_agent:rdata_fifo_src_data -> result_ready_s1_agent_rdata_fifo:in_data
	wire          result_ready_s1_agent_rdata_fifo_src_ready;                                  // result_ready_s1_agent_rdata_fifo:in_ready -> result_ready_s1_agent:rdata_fifo_src_ready
	wire   [31:0] lcu_loaded_s1_agent_m0_readdata;                                             // lcu_loaded_s1_translator:uav_readdata -> lcu_loaded_s1_agent:m0_readdata
	wire          lcu_loaded_s1_agent_m0_waitrequest;                                          // lcu_loaded_s1_translator:uav_waitrequest -> lcu_loaded_s1_agent:m0_waitrequest
	wire          lcu_loaded_s1_agent_m0_debugaccess;                                          // lcu_loaded_s1_agent:m0_debugaccess -> lcu_loaded_s1_translator:uav_debugaccess
	wire   [29:0] lcu_loaded_s1_agent_m0_address;                                              // lcu_loaded_s1_agent:m0_address -> lcu_loaded_s1_translator:uav_address
	wire    [3:0] lcu_loaded_s1_agent_m0_byteenable;                                           // lcu_loaded_s1_agent:m0_byteenable -> lcu_loaded_s1_translator:uav_byteenable
	wire          lcu_loaded_s1_agent_m0_read;                                                 // lcu_loaded_s1_agent:m0_read -> lcu_loaded_s1_translator:uav_read
	wire          lcu_loaded_s1_agent_m0_readdatavalid;                                        // lcu_loaded_s1_translator:uav_readdatavalid -> lcu_loaded_s1_agent:m0_readdatavalid
	wire          lcu_loaded_s1_agent_m0_lock;                                                 // lcu_loaded_s1_agent:m0_lock -> lcu_loaded_s1_translator:uav_lock
	wire   [31:0] lcu_loaded_s1_agent_m0_writedata;                                            // lcu_loaded_s1_agent:m0_writedata -> lcu_loaded_s1_translator:uav_writedata
	wire          lcu_loaded_s1_agent_m0_write;                                                // lcu_loaded_s1_agent:m0_write -> lcu_loaded_s1_translator:uav_write
	wire    [2:0] lcu_loaded_s1_agent_m0_burstcount;                                           // lcu_loaded_s1_agent:m0_burstcount -> lcu_loaded_s1_translator:uav_burstcount
	wire          lcu_loaded_s1_agent_rf_source_valid;                                         // lcu_loaded_s1_agent:rf_source_valid -> lcu_loaded_s1_agent_rsp_fifo:in_valid
	wire  [129:0] lcu_loaded_s1_agent_rf_source_data;                                          // lcu_loaded_s1_agent:rf_source_data -> lcu_loaded_s1_agent_rsp_fifo:in_data
	wire          lcu_loaded_s1_agent_rf_source_ready;                                         // lcu_loaded_s1_agent_rsp_fifo:in_ready -> lcu_loaded_s1_agent:rf_source_ready
	wire          lcu_loaded_s1_agent_rf_source_startofpacket;                                 // lcu_loaded_s1_agent:rf_source_startofpacket -> lcu_loaded_s1_agent_rsp_fifo:in_startofpacket
	wire          lcu_loaded_s1_agent_rf_source_endofpacket;                                   // lcu_loaded_s1_agent:rf_source_endofpacket -> lcu_loaded_s1_agent_rsp_fifo:in_endofpacket
	wire          lcu_loaded_s1_agent_rsp_fifo_out_valid;                                      // lcu_loaded_s1_agent_rsp_fifo:out_valid -> lcu_loaded_s1_agent:rf_sink_valid
	wire  [129:0] lcu_loaded_s1_agent_rsp_fifo_out_data;                                       // lcu_loaded_s1_agent_rsp_fifo:out_data -> lcu_loaded_s1_agent:rf_sink_data
	wire          lcu_loaded_s1_agent_rsp_fifo_out_ready;                                      // lcu_loaded_s1_agent:rf_sink_ready -> lcu_loaded_s1_agent_rsp_fifo:out_ready
	wire          lcu_loaded_s1_agent_rsp_fifo_out_startofpacket;                              // lcu_loaded_s1_agent_rsp_fifo:out_startofpacket -> lcu_loaded_s1_agent:rf_sink_startofpacket
	wire          lcu_loaded_s1_agent_rsp_fifo_out_endofpacket;                                // lcu_loaded_s1_agent_rsp_fifo:out_endofpacket -> lcu_loaded_s1_agent:rf_sink_endofpacket
	wire          lcu_loaded_s1_agent_rdata_fifo_src_valid;                                    // lcu_loaded_s1_agent:rdata_fifo_src_valid -> lcu_loaded_s1_agent_rdata_fifo:in_valid
	wire   [33:0] lcu_loaded_s1_agent_rdata_fifo_src_data;                                     // lcu_loaded_s1_agent:rdata_fifo_src_data -> lcu_loaded_s1_agent_rdata_fifo:in_data
	wire          lcu_loaded_s1_agent_rdata_fifo_src_ready;                                    // lcu_loaded_s1_agent_rdata_fifo:in_ready -> lcu_loaded_s1_agent:rdata_fifo_src_ready
	wire   [31:0] lambda_loaded_s1_agent_m0_readdata;                                          // lambda_loaded_s1_translator:uav_readdata -> lambda_loaded_s1_agent:m0_readdata
	wire          lambda_loaded_s1_agent_m0_waitrequest;                                       // lambda_loaded_s1_translator:uav_waitrequest -> lambda_loaded_s1_agent:m0_waitrequest
	wire          lambda_loaded_s1_agent_m0_debugaccess;                                       // lambda_loaded_s1_agent:m0_debugaccess -> lambda_loaded_s1_translator:uav_debugaccess
	wire   [29:0] lambda_loaded_s1_agent_m0_address;                                           // lambda_loaded_s1_agent:m0_address -> lambda_loaded_s1_translator:uav_address
	wire    [3:0] lambda_loaded_s1_agent_m0_byteenable;                                        // lambda_loaded_s1_agent:m0_byteenable -> lambda_loaded_s1_translator:uav_byteenable
	wire          lambda_loaded_s1_agent_m0_read;                                              // lambda_loaded_s1_agent:m0_read -> lambda_loaded_s1_translator:uav_read
	wire          lambda_loaded_s1_agent_m0_readdatavalid;                                     // lambda_loaded_s1_translator:uav_readdatavalid -> lambda_loaded_s1_agent:m0_readdatavalid
	wire          lambda_loaded_s1_agent_m0_lock;                                              // lambda_loaded_s1_agent:m0_lock -> lambda_loaded_s1_translator:uav_lock
	wire   [31:0] lambda_loaded_s1_agent_m0_writedata;                                         // lambda_loaded_s1_agent:m0_writedata -> lambda_loaded_s1_translator:uav_writedata
	wire          lambda_loaded_s1_agent_m0_write;                                             // lambda_loaded_s1_agent:m0_write -> lambda_loaded_s1_translator:uav_write
	wire    [2:0] lambda_loaded_s1_agent_m0_burstcount;                                        // lambda_loaded_s1_agent:m0_burstcount -> lambda_loaded_s1_translator:uav_burstcount
	wire          lambda_loaded_s1_agent_rf_source_valid;                                      // lambda_loaded_s1_agent:rf_source_valid -> lambda_loaded_s1_agent_rsp_fifo:in_valid
	wire  [129:0] lambda_loaded_s1_agent_rf_source_data;                                       // lambda_loaded_s1_agent:rf_source_data -> lambda_loaded_s1_agent_rsp_fifo:in_data
	wire          lambda_loaded_s1_agent_rf_source_ready;                                      // lambda_loaded_s1_agent_rsp_fifo:in_ready -> lambda_loaded_s1_agent:rf_source_ready
	wire          lambda_loaded_s1_agent_rf_source_startofpacket;                              // lambda_loaded_s1_agent:rf_source_startofpacket -> lambda_loaded_s1_agent_rsp_fifo:in_startofpacket
	wire          lambda_loaded_s1_agent_rf_source_endofpacket;                                // lambda_loaded_s1_agent:rf_source_endofpacket -> lambda_loaded_s1_agent_rsp_fifo:in_endofpacket
	wire          lambda_loaded_s1_agent_rsp_fifo_out_valid;                                   // lambda_loaded_s1_agent_rsp_fifo:out_valid -> lambda_loaded_s1_agent:rf_sink_valid
	wire  [129:0] lambda_loaded_s1_agent_rsp_fifo_out_data;                                    // lambda_loaded_s1_agent_rsp_fifo:out_data -> lambda_loaded_s1_agent:rf_sink_data
	wire          lambda_loaded_s1_agent_rsp_fifo_out_ready;                                   // lambda_loaded_s1_agent:rf_sink_ready -> lambda_loaded_s1_agent_rsp_fifo:out_ready
	wire          lambda_loaded_s1_agent_rsp_fifo_out_startofpacket;                           // lambda_loaded_s1_agent_rsp_fifo:out_startofpacket -> lambda_loaded_s1_agent:rf_sink_startofpacket
	wire          lambda_loaded_s1_agent_rsp_fifo_out_endofpacket;                             // lambda_loaded_s1_agent_rsp_fifo:out_endofpacket -> lambda_loaded_s1_agent:rf_sink_endofpacket
	wire          lambda_loaded_s1_agent_rdata_fifo_src_valid;                                 // lambda_loaded_s1_agent:rdata_fifo_src_valid -> lambda_loaded_s1_agent_rdata_fifo:in_valid
	wire   [33:0] lambda_loaded_s1_agent_rdata_fifo_src_data;                                  // lambda_loaded_s1_agent:rdata_fifo_src_data -> lambda_loaded_s1_agent_rdata_fifo:in_data
	wire          lambda_loaded_s1_agent_rdata_fifo_src_ready;                                 // lambda_loaded_s1_agent_rdata_fifo:in_ready -> lambda_loaded_s1_agent:rdata_fifo_src_ready
	wire   [15:0] camera_control_oc_s1_agent_m0_readdata;                                      // camera_control_oc_s1_translator:uav_readdata -> camera_control_oc_s1_agent:m0_readdata
	wire          camera_control_oc_s1_agent_m0_waitrequest;                                   // camera_control_oc_s1_translator:uav_waitrequest -> camera_control_oc_s1_agent:m0_waitrequest
	wire          camera_control_oc_s1_agent_m0_debugaccess;                                   // camera_control_oc_s1_agent:m0_debugaccess -> camera_control_oc_s1_translator:uav_debugaccess
	wire   [29:0] camera_control_oc_s1_agent_m0_address;                                       // camera_control_oc_s1_agent:m0_address -> camera_control_oc_s1_translator:uav_address
	wire    [1:0] camera_control_oc_s1_agent_m0_byteenable;                                    // camera_control_oc_s1_agent:m0_byteenable -> camera_control_oc_s1_translator:uav_byteenable
	wire          camera_control_oc_s1_agent_m0_read;                                          // camera_control_oc_s1_agent:m0_read -> camera_control_oc_s1_translator:uav_read
	wire          camera_control_oc_s1_agent_m0_readdatavalid;                                 // camera_control_oc_s1_translator:uav_readdatavalid -> camera_control_oc_s1_agent:m0_readdatavalid
	wire          camera_control_oc_s1_agent_m0_lock;                                          // camera_control_oc_s1_agent:m0_lock -> camera_control_oc_s1_translator:uav_lock
	wire   [15:0] camera_control_oc_s1_agent_m0_writedata;                                     // camera_control_oc_s1_agent:m0_writedata -> camera_control_oc_s1_translator:uav_writedata
	wire          camera_control_oc_s1_agent_m0_write;                                         // camera_control_oc_s1_agent:m0_write -> camera_control_oc_s1_translator:uav_write
	wire    [1:0] camera_control_oc_s1_agent_m0_burstcount;                                    // camera_control_oc_s1_agent:m0_burstcount -> camera_control_oc_s1_translator:uav_burstcount
	wire          camera_control_oc_s1_agent_rf_source_valid;                                  // camera_control_oc_s1_agent:rf_source_valid -> camera_control_oc_s1_agent_rsp_fifo:in_valid
	wire  [111:0] camera_control_oc_s1_agent_rf_source_data;                                   // camera_control_oc_s1_agent:rf_source_data -> camera_control_oc_s1_agent_rsp_fifo:in_data
	wire          camera_control_oc_s1_agent_rf_source_ready;                                  // camera_control_oc_s1_agent_rsp_fifo:in_ready -> camera_control_oc_s1_agent:rf_source_ready
	wire          camera_control_oc_s1_agent_rf_source_startofpacket;                          // camera_control_oc_s1_agent:rf_source_startofpacket -> camera_control_oc_s1_agent_rsp_fifo:in_startofpacket
	wire          camera_control_oc_s1_agent_rf_source_endofpacket;                            // camera_control_oc_s1_agent:rf_source_endofpacket -> camera_control_oc_s1_agent_rsp_fifo:in_endofpacket
	wire          camera_control_oc_s1_agent_rsp_fifo_out_valid;                               // camera_control_oc_s1_agent_rsp_fifo:out_valid -> camera_control_oc_s1_agent:rf_sink_valid
	wire  [111:0] camera_control_oc_s1_agent_rsp_fifo_out_data;                                // camera_control_oc_s1_agent_rsp_fifo:out_data -> camera_control_oc_s1_agent:rf_sink_data
	wire          camera_control_oc_s1_agent_rsp_fifo_out_ready;                               // camera_control_oc_s1_agent:rf_sink_ready -> camera_control_oc_s1_agent_rsp_fifo:out_ready
	wire          camera_control_oc_s1_agent_rsp_fifo_out_startofpacket;                       // camera_control_oc_s1_agent_rsp_fifo:out_startofpacket -> camera_control_oc_s1_agent:rf_sink_startofpacket
	wire          camera_control_oc_s1_agent_rsp_fifo_out_endofpacket;                         // camera_control_oc_s1_agent_rsp_fifo:out_endofpacket -> camera_control_oc_s1_agent:rf_sink_endofpacket
	wire          camera_control_oc_s1_agent_rdata_fifo_src_valid;                             // camera_control_oc_s1_agent:rdata_fifo_src_valid -> camera_control_oc_s1_agent_rdata_fifo:in_valid
	wire   [17:0] camera_control_oc_s1_agent_rdata_fifo_src_data;                              // camera_control_oc_s1_agent:rdata_fifo_src_data -> camera_control_oc_s1_agent_rdata_fifo:in_data
	wire          camera_control_oc_s1_agent_rdata_fifo_src_ready;                             // camera_control_oc_s1_agent_rdata_fifo:in_ready -> camera_control_oc_s1_agent:rdata_fifo_src_ready
	wire   [31:0] configure_camera_s1_agent_m0_readdata;                                       // configure_camera_s1_translator:uav_readdata -> configure_camera_s1_agent:m0_readdata
	wire          configure_camera_s1_agent_m0_waitrequest;                                    // configure_camera_s1_translator:uav_waitrequest -> configure_camera_s1_agent:m0_waitrequest
	wire          configure_camera_s1_agent_m0_debugaccess;                                    // configure_camera_s1_agent:m0_debugaccess -> configure_camera_s1_translator:uav_debugaccess
	wire   [29:0] configure_camera_s1_agent_m0_address;                                        // configure_camera_s1_agent:m0_address -> configure_camera_s1_translator:uav_address
	wire    [3:0] configure_camera_s1_agent_m0_byteenable;                                     // configure_camera_s1_agent:m0_byteenable -> configure_camera_s1_translator:uav_byteenable
	wire          configure_camera_s1_agent_m0_read;                                           // configure_camera_s1_agent:m0_read -> configure_camera_s1_translator:uav_read
	wire          configure_camera_s1_agent_m0_readdatavalid;                                  // configure_camera_s1_translator:uav_readdatavalid -> configure_camera_s1_agent:m0_readdatavalid
	wire          configure_camera_s1_agent_m0_lock;                                           // configure_camera_s1_agent:m0_lock -> configure_camera_s1_translator:uav_lock
	wire   [31:0] configure_camera_s1_agent_m0_writedata;                                      // configure_camera_s1_agent:m0_writedata -> configure_camera_s1_translator:uav_writedata
	wire          configure_camera_s1_agent_m0_write;                                          // configure_camera_s1_agent:m0_write -> configure_camera_s1_translator:uav_write
	wire    [2:0] configure_camera_s1_agent_m0_burstcount;                                     // configure_camera_s1_agent:m0_burstcount -> configure_camera_s1_translator:uav_burstcount
	wire          configure_camera_s1_agent_rf_source_valid;                                   // configure_camera_s1_agent:rf_source_valid -> configure_camera_s1_agent_rsp_fifo:in_valid
	wire  [129:0] configure_camera_s1_agent_rf_source_data;                                    // configure_camera_s1_agent:rf_source_data -> configure_camera_s1_agent_rsp_fifo:in_data
	wire          configure_camera_s1_agent_rf_source_ready;                                   // configure_camera_s1_agent_rsp_fifo:in_ready -> configure_camera_s1_agent:rf_source_ready
	wire          configure_camera_s1_agent_rf_source_startofpacket;                           // configure_camera_s1_agent:rf_source_startofpacket -> configure_camera_s1_agent_rsp_fifo:in_startofpacket
	wire          configure_camera_s1_agent_rf_source_endofpacket;                             // configure_camera_s1_agent:rf_source_endofpacket -> configure_camera_s1_agent_rsp_fifo:in_endofpacket
	wire          configure_camera_s1_agent_rsp_fifo_out_valid;                                // configure_camera_s1_agent_rsp_fifo:out_valid -> configure_camera_s1_agent:rf_sink_valid
	wire  [129:0] configure_camera_s1_agent_rsp_fifo_out_data;                                 // configure_camera_s1_agent_rsp_fifo:out_data -> configure_camera_s1_agent:rf_sink_data
	wire          configure_camera_s1_agent_rsp_fifo_out_ready;                                // configure_camera_s1_agent:rf_sink_ready -> configure_camera_s1_agent_rsp_fifo:out_ready
	wire          configure_camera_s1_agent_rsp_fifo_out_startofpacket;                        // configure_camera_s1_agent_rsp_fifo:out_startofpacket -> configure_camera_s1_agent:rf_sink_startofpacket
	wire          configure_camera_s1_agent_rsp_fifo_out_endofpacket;                          // configure_camera_s1_agent_rsp_fifo:out_endofpacket -> configure_camera_s1_agent:rf_sink_endofpacket
	wire          configure_camera_s1_agent_rdata_fifo_src_valid;                              // configure_camera_s1_agent:rdata_fifo_src_valid -> configure_camera_s1_agent_rdata_fifo:in_valid
	wire   [33:0] configure_camera_s1_agent_rdata_fifo_src_data;                               // configure_camera_s1_agent:rdata_fifo_src_data -> configure_camera_s1_agent_rdata_fifo:in_data
	wire          configure_camera_s1_agent_rdata_fifo_src_ready;                              // configure_camera_s1_agent_rdata_fifo:in_ready -> configure_camera_s1_agent:rdata_fifo_src_ready
	wire   [31:0] yuv_ctrl_s1_agent_m0_readdata;                                               // yuv_ctrl_s1_translator:uav_readdata -> yuv_ctrl_s1_agent:m0_readdata
	wire          yuv_ctrl_s1_agent_m0_waitrequest;                                            // yuv_ctrl_s1_translator:uav_waitrequest -> yuv_ctrl_s1_agent:m0_waitrequest
	wire          yuv_ctrl_s1_agent_m0_debugaccess;                                            // yuv_ctrl_s1_agent:m0_debugaccess -> yuv_ctrl_s1_translator:uav_debugaccess
	wire   [29:0] yuv_ctrl_s1_agent_m0_address;                                                // yuv_ctrl_s1_agent:m0_address -> yuv_ctrl_s1_translator:uav_address
	wire    [3:0] yuv_ctrl_s1_agent_m0_byteenable;                                             // yuv_ctrl_s1_agent:m0_byteenable -> yuv_ctrl_s1_translator:uav_byteenable
	wire          yuv_ctrl_s1_agent_m0_read;                                                   // yuv_ctrl_s1_agent:m0_read -> yuv_ctrl_s1_translator:uav_read
	wire          yuv_ctrl_s1_agent_m0_readdatavalid;                                          // yuv_ctrl_s1_translator:uav_readdatavalid -> yuv_ctrl_s1_agent:m0_readdatavalid
	wire          yuv_ctrl_s1_agent_m0_lock;                                                   // yuv_ctrl_s1_agent:m0_lock -> yuv_ctrl_s1_translator:uav_lock
	wire   [31:0] yuv_ctrl_s1_agent_m0_writedata;                                              // yuv_ctrl_s1_agent:m0_writedata -> yuv_ctrl_s1_translator:uav_writedata
	wire          yuv_ctrl_s1_agent_m0_write;                                                  // yuv_ctrl_s1_agent:m0_write -> yuv_ctrl_s1_translator:uav_write
	wire    [2:0] yuv_ctrl_s1_agent_m0_burstcount;                                             // yuv_ctrl_s1_agent:m0_burstcount -> yuv_ctrl_s1_translator:uav_burstcount
	wire          yuv_ctrl_s1_agent_rf_source_valid;                                           // yuv_ctrl_s1_agent:rf_source_valid -> yuv_ctrl_s1_agent_rsp_fifo:in_valid
	wire  [129:0] yuv_ctrl_s1_agent_rf_source_data;                                            // yuv_ctrl_s1_agent:rf_source_data -> yuv_ctrl_s1_agent_rsp_fifo:in_data
	wire          yuv_ctrl_s1_agent_rf_source_ready;                                           // yuv_ctrl_s1_agent_rsp_fifo:in_ready -> yuv_ctrl_s1_agent:rf_source_ready
	wire          yuv_ctrl_s1_agent_rf_source_startofpacket;                                   // yuv_ctrl_s1_agent:rf_source_startofpacket -> yuv_ctrl_s1_agent_rsp_fifo:in_startofpacket
	wire          yuv_ctrl_s1_agent_rf_source_endofpacket;                                     // yuv_ctrl_s1_agent:rf_source_endofpacket -> yuv_ctrl_s1_agent_rsp_fifo:in_endofpacket
	wire          yuv_ctrl_s1_agent_rsp_fifo_out_valid;                                        // yuv_ctrl_s1_agent_rsp_fifo:out_valid -> yuv_ctrl_s1_agent:rf_sink_valid
	wire  [129:0] yuv_ctrl_s1_agent_rsp_fifo_out_data;                                         // yuv_ctrl_s1_agent_rsp_fifo:out_data -> yuv_ctrl_s1_agent:rf_sink_data
	wire          yuv_ctrl_s1_agent_rsp_fifo_out_ready;                                        // yuv_ctrl_s1_agent:rf_sink_ready -> yuv_ctrl_s1_agent_rsp_fifo:out_ready
	wire          yuv_ctrl_s1_agent_rsp_fifo_out_startofpacket;                                // yuv_ctrl_s1_agent_rsp_fifo:out_startofpacket -> yuv_ctrl_s1_agent:rf_sink_startofpacket
	wire          yuv_ctrl_s1_agent_rsp_fifo_out_endofpacket;                                  // yuv_ctrl_s1_agent_rsp_fifo:out_endofpacket -> yuv_ctrl_s1_agent:rf_sink_endofpacket
	wire          yuv_ctrl_s1_agent_rdata_fifo_src_valid;                                      // yuv_ctrl_s1_agent:rdata_fifo_src_valid -> yuv_ctrl_s1_agent_rdata_fifo:in_valid
	wire   [33:0] yuv_ctrl_s1_agent_rdata_fifo_src_data;                                       // yuv_ctrl_s1_agent:rdata_fifo_src_data -> yuv_ctrl_s1_agent_rdata_fifo:in_data
	wire          yuv_ctrl_s1_agent_rdata_fifo_src_ready;                                      // yuv_ctrl_s1_agent_rdata_fifo:in_ready -> yuv_ctrl_s1_agent:rdata_fifo_src_ready
	wire   [31:0] yuv_status_s1_agent_m0_readdata;                                             // yuv_status_s1_translator:uav_readdata -> yuv_status_s1_agent:m0_readdata
	wire          yuv_status_s1_agent_m0_waitrequest;                                          // yuv_status_s1_translator:uav_waitrequest -> yuv_status_s1_agent:m0_waitrequest
	wire          yuv_status_s1_agent_m0_debugaccess;                                          // yuv_status_s1_agent:m0_debugaccess -> yuv_status_s1_translator:uav_debugaccess
	wire   [29:0] yuv_status_s1_agent_m0_address;                                              // yuv_status_s1_agent:m0_address -> yuv_status_s1_translator:uav_address
	wire    [3:0] yuv_status_s1_agent_m0_byteenable;                                           // yuv_status_s1_agent:m0_byteenable -> yuv_status_s1_translator:uav_byteenable
	wire          yuv_status_s1_agent_m0_read;                                                 // yuv_status_s1_agent:m0_read -> yuv_status_s1_translator:uav_read
	wire          yuv_status_s1_agent_m0_readdatavalid;                                        // yuv_status_s1_translator:uav_readdatavalid -> yuv_status_s1_agent:m0_readdatavalid
	wire          yuv_status_s1_agent_m0_lock;                                                 // yuv_status_s1_agent:m0_lock -> yuv_status_s1_translator:uav_lock
	wire   [31:0] yuv_status_s1_agent_m0_writedata;                                            // yuv_status_s1_agent:m0_writedata -> yuv_status_s1_translator:uav_writedata
	wire          yuv_status_s1_agent_m0_write;                                                // yuv_status_s1_agent:m0_write -> yuv_status_s1_translator:uav_write
	wire    [2:0] yuv_status_s1_agent_m0_burstcount;                                           // yuv_status_s1_agent:m0_burstcount -> yuv_status_s1_translator:uav_burstcount
	wire          yuv_status_s1_agent_rf_source_valid;                                         // yuv_status_s1_agent:rf_source_valid -> yuv_status_s1_agent_rsp_fifo:in_valid
	wire  [129:0] yuv_status_s1_agent_rf_source_data;                                          // yuv_status_s1_agent:rf_source_data -> yuv_status_s1_agent_rsp_fifo:in_data
	wire          yuv_status_s1_agent_rf_source_ready;                                         // yuv_status_s1_agent_rsp_fifo:in_ready -> yuv_status_s1_agent:rf_source_ready
	wire          yuv_status_s1_agent_rf_source_startofpacket;                                 // yuv_status_s1_agent:rf_source_startofpacket -> yuv_status_s1_agent_rsp_fifo:in_startofpacket
	wire          yuv_status_s1_agent_rf_source_endofpacket;                                   // yuv_status_s1_agent:rf_source_endofpacket -> yuv_status_s1_agent_rsp_fifo:in_endofpacket
	wire          yuv_status_s1_agent_rsp_fifo_out_valid;                                      // yuv_status_s1_agent_rsp_fifo:out_valid -> yuv_status_s1_agent:rf_sink_valid
	wire  [129:0] yuv_status_s1_agent_rsp_fifo_out_data;                                       // yuv_status_s1_agent_rsp_fifo:out_data -> yuv_status_s1_agent:rf_sink_data
	wire          yuv_status_s1_agent_rsp_fifo_out_ready;                                      // yuv_status_s1_agent:rf_sink_ready -> yuv_status_s1_agent_rsp_fifo:out_ready
	wire          yuv_status_s1_agent_rsp_fifo_out_startofpacket;                              // yuv_status_s1_agent_rsp_fifo:out_startofpacket -> yuv_status_s1_agent:rf_sink_startofpacket
	wire          yuv_status_s1_agent_rsp_fifo_out_endofpacket;                                // yuv_status_s1_agent_rsp_fifo:out_endofpacket -> yuv_status_s1_agent:rf_sink_endofpacket
	wire          yuv_status_s1_agent_rdata_fifo_src_valid;                                    // yuv_status_s1_agent:rdata_fifo_src_valid -> yuv_status_s1_agent_rdata_fifo:in_valid
	wire   [33:0] yuv_status_s1_agent_rdata_fifo_src_data;                                     // yuv_status_s1_agent:rdata_fifo_src_data -> yuv_status_s1_agent_rdata_fifo:in_data
	wire          yuv_status_s1_agent_rdata_fifo_src_ready;                                    // yuv_status_s1_agent_rdata_fifo:in_ready -> yuv_status_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                   // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [164:0] hps_0_h2f_axi_master_agent_write_cp_data;                                    // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                   // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                           // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                             // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                    // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [164:0] hps_0_h2f_axi_master_agent_read_cp_data;                                     // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                    // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                            // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                              // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          acc_config_altera_axi_slave_agent_write_rp_valid;                            // acc_config_altera_axi_slave_agent:write_rp_valid -> router_002:sink_valid
	wire  [128:0] acc_config_altera_axi_slave_agent_write_rp_data;                             // acc_config_altera_axi_slave_agent:write_rp_data -> router_002:sink_data
	wire          acc_config_altera_axi_slave_agent_write_rp_ready;                            // router_002:sink_ready -> acc_config_altera_axi_slave_agent:write_rp_ready
	wire          acc_config_altera_axi_slave_agent_write_rp_startofpacket;                    // acc_config_altera_axi_slave_agent:write_rp_startofpacket -> router_002:sink_startofpacket
	wire          acc_config_altera_axi_slave_agent_write_rp_endofpacket;                      // acc_config_altera_axi_slave_agent:write_rp_endofpacket -> router_002:sink_endofpacket
	wire          acc_config_altera_axi_slave_agent_read_rp_valid;                             // acc_config_altera_axi_slave_agent:read_rp_valid -> router_003:sink_valid
	wire  [128:0] acc_config_altera_axi_slave_agent_read_rp_data;                              // acc_config_altera_axi_slave_agent:read_rp_data -> router_003:sink_data
	wire          acc_config_altera_axi_slave_agent_read_rp_ready;                             // router_003:sink_ready -> acc_config_altera_axi_slave_agent:read_rp_ready
	wire          acc_config_altera_axi_slave_agent_read_rp_startofpacket;                     // acc_config_altera_axi_slave_agent:read_rp_startofpacket -> router_003:sink_startofpacket
	wire          acc_config_altera_axi_slave_agent_read_rp_endofpacket;                       // acc_config_altera_axi_slave_agent:read_rp_endofpacket -> router_003:sink_endofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_valid;                   // axi_dma_unfiltered2_altera_axi_slave_agent:write_rp_valid -> router_004:sink_valid
	wire  [128:0] axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_data;                    // axi_dma_unfiltered2_altera_axi_slave_agent:write_rp_data -> router_004:sink_data
	wire          axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_ready;                   // router_004:sink_ready -> axi_dma_unfiltered2_altera_axi_slave_agent:write_rp_ready
	wire          axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_startofpacket;           // axi_dma_unfiltered2_altera_axi_slave_agent:write_rp_startofpacket -> router_004:sink_startofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_endofpacket;             // axi_dma_unfiltered2_altera_axi_slave_agent:write_rp_endofpacket -> router_004:sink_endofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_valid;                    // axi_dma_unfiltered2_altera_axi_slave_agent:read_rp_valid -> router_005:sink_valid
	wire  [128:0] axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_data;                     // axi_dma_unfiltered2_altera_axi_slave_agent:read_rp_data -> router_005:sink_data
	wire          axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_ready;                    // router_005:sink_ready -> axi_dma_unfiltered2_altera_axi_slave_agent:read_rp_ready
	wire          axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_startofpacket;            // axi_dma_unfiltered2_altera_axi_slave_agent:read_rp_startofpacket -> router_005:sink_startofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_endofpacket;              // axi_dma_unfiltered2_altera_axi_slave_agent:read_rp_endofpacket -> router_005:sink_endofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_valid;                   // axi_dma_unfiltered1_altera_axi_slave_agent:write_rp_valid -> router_006:sink_valid
	wire  [128:0] axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_data;                    // axi_dma_unfiltered1_altera_axi_slave_agent:write_rp_data -> router_006:sink_data
	wire          axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_ready;                   // router_006:sink_ready -> axi_dma_unfiltered1_altera_axi_slave_agent:write_rp_ready
	wire          axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_startofpacket;           // axi_dma_unfiltered1_altera_axi_slave_agent:write_rp_startofpacket -> router_006:sink_startofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_endofpacket;             // axi_dma_unfiltered1_altera_axi_slave_agent:write_rp_endofpacket -> router_006:sink_endofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_valid;                    // axi_dma_unfiltered1_altera_axi_slave_agent:read_rp_valid -> router_007:sink_valid
	wire  [128:0] axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_data;                     // axi_dma_unfiltered1_altera_axi_slave_agent:read_rp_data -> router_007:sink_data
	wire          axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_ready;                    // router_007:sink_ready -> axi_dma_unfiltered1_altera_axi_slave_agent:read_rp_ready
	wire          axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_startofpacket;            // axi_dma_unfiltered1_altera_axi_slave_agent:read_rp_startofpacket -> router_007:sink_startofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_endofpacket;              // axi_dma_unfiltered1_altera_axi_slave_agent:read_rp_endofpacket -> router_007:sink_endofpacket
	wire          axi_dma_orig_block_altera_axi_slave_agent_write_rp_valid;                    // axi_dma_orig_block_altera_axi_slave_agent:write_rp_valid -> router_008:sink_valid
	wire  [128:0] axi_dma_orig_block_altera_axi_slave_agent_write_rp_data;                     // axi_dma_orig_block_altera_axi_slave_agent:write_rp_data -> router_008:sink_data
	wire          axi_dma_orig_block_altera_axi_slave_agent_write_rp_ready;                    // router_008:sink_ready -> axi_dma_orig_block_altera_axi_slave_agent:write_rp_ready
	wire          axi_dma_orig_block_altera_axi_slave_agent_write_rp_startofpacket;            // axi_dma_orig_block_altera_axi_slave_agent:write_rp_startofpacket -> router_008:sink_startofpacket
	wire          axi_dma_orig_block_altera_axi_slave_agent_write_rp_endofpacket;              // axi_dma_orig_block_altera_axi_slave_agent:write_rp_endofpacket -> router_008:sink_endofpacket
	wire          axi_dma_orig_block_altera_axi_slave_agent_read_rp_valid;                     // axi_dma_orig_block_altera_axi_slave_agent:read_rp_valid -> router_009:sink_valid
	wire  [128:0] axi_dma_orig_block_altera_axi_slave_agent_read_rp_data;                      // axi_dma_orig_block_altera_axi_slave_agent:read_rp_data -> router_009:sink_data
	wire          axi_dma_orig_block_altera_axi_slave_agent_read_rp_ready;                     // router_009:sink_ready -> axi_dma_orig_block_altera_axi_slave_agent:read_rp_ready
	wire          axi_dma_orig_block_altera_axi_slave_agent_read_rp_startofpacket;             // axi_dma_orig_block_altera_axi_slave_agent:read_rp_startofpacket -> router_009:sink_startofpacket
	wire          axi_dma_orig_block_altera_axi_slave_agent_read_rp_endofpacket;               // axi_dma_orig_block_altera_axi_slave_agent:read_rp_endofpacket -> router_009:sink_endofpacket
	wire          dma_yuv_altera_axi_slave_agent_write_rp_valid;                               // dma_yuv_altera_axi_slave_agent:write_rp_valid -> router_010:sink_valid
	wire  [128:0] dma_yuv_altera_axi_slave_agent_write_rp_data;                                // dma_yuv_altera_axi_slave_agent:write_rp_data -> router_010:sink_data
	wire          dma_yuv_altera_axi_slave_agent_write_rp_ready;                               // router_010:sink_ready -> dma_yuv_altera_axi_slave_agent:write_rp_ready
	wire          dma_yuv_altera_axi_slave_agent_write_rp_startofpacket;                       // dma_yuv_altera_axi_slave_agent:write_rp_startofpacket -> router_010:sink_startofpacket
	wire          dma_yuv_altera_axi_slave_agent_write_rp_endofpacket;                         // dma_yuv_altera_axi_slave_agent:write_rp_endofpacket -> router_010:sink_endofpacket
	wire          dma_yuv_altera_axi_slave_agent_read_rp_valid;                                // dma_yuv_altera_axi_slave_agent:read_rp_valid -> router_011:sink_valid
	wire  [128:0] dma_yuv_altera_axi_slave_agent_read_rp_data;                                 // dma_yuv_altera_axi_slave_agent:read_rp_data -> router_011:sink_data
	wire          dma_yuv_altera_axi_slave_agent_read_rp_ready;                                // router_011:sink_ready -> dma_yuv_altera_axi_slave_agent:read_rp_ready
	wire          dma_yuv_altera_axi_slave_agent_read_rp_startofpacket;                        // dma_yuv_altera_axi_slave_agent:read_rp_startofpacket -> router_011:sink_startofpacket
	wire          dma_yuv_altera_axi_slave_agent_read_rp_endofpacket;                          // dma_yuv_altera_axi_slave_agent:read_rp_endofpacket -> router_011:sink_endofpacket
	wire          sad_result_low_s1_agent_rp_valid;                                            // sad_result_low_s1_agent:rp_valid -> router_012:sink_valid
	wire  [128:0] sad_result_low_s1_agent_rp_data;                                             // sad_result_low_s1_agent:rp_data -> router_012:sink_data
	wire          sad_result_low_s1_agent_rp_ready;                                            // router_012:sink_ready -> sad_result_low_s1_agent:rp_ready
	wire          sad_result_low_s1_agent_rp_startofpacket;                                    // sad_result_low_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          sad_result_low_s1_agent_rp_endofpacket;                                      // sad_result_low_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          sad_result_high_s1_agent_rp_valid;                                           // sad_result_high_s1_agent:rp_valid -> router_013:sink_valid
	wire  [128:0] sad_result_high_s1_agent_rp_data;                                            // sad_result_high_s1_agent:rp_data -> router_013:sink_data
	wire          sad_result_high_s1_agent_rp_ready;                                           // router_013:sink_ready -> sad_result_high_s1_agent:rp_ready
	wire          sad_result_high_s1_agent_rp_startofpacket;                                   // sad_result_high_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          sad_result_high_s1_agent_rp_endofpacket;                                     // sad_result_high_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          result_ready_s1_agent_rp_valid;                                              // result_ready_s1_agent:rp_valid -> router_014:sink_valid
	wire  [128:0] result_ready_s1_agent_rp_data;                                               // result_ready_s1_agent:rp_data -> router_014:sink_data
	wire          result_ready_s1_agent_rp_ready;                                              // router_014:sink_ready -> result_ready_s1_agent:rp_ready
	wire          result_ready_s1_agent_rp_startofpacket;                                      // result_ready_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          result_ready_s1_agent_rp_endofpacket;                                        // result_ready_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          lcu_loaded_s1_agent_rp_valid;                                                // lcu_loaded_s1_agent:rp_valid -> router_015:sink_valid
	wire  [128:0] lcu_loaded_s1_agent_rp_data;                                                 // lcu_loaded_s1_agent:rp_data -> router_015:sink_data
	wire          lcu_loaded_s1_agent_rp_ready;                                                // router_015:sink_ready -> lcu_loaded_s1_agent:rp_ready
	wire          lcu_loaded_s1_agent_rp_startofpacket;                                        // lcu_loaded_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          lcu_loaded_s1_agent_rp_endofpacket;                                          // lcu_loaded_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          lambda_loaded_s1_agent_rp_valid;                                             // lambda_loaded_s1_agent:rp_valid -> router_016:sink_valid
	wire  [128:0] lambda_loaded_s1_agent_rp_data;                                              // lambda_loaded_s1_agent:rp_data -> router_016:sink_data
	wire          lambda_loaded_s1_agent_rp_ready;                                             // router_016:sink_ready -> lambda_loaded_s1_agent:rp_ready
	wire          lambda_loaded_s1_agent_rp_startofpacket;                                     // lambda_loaded_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          lambda_loaded_s1_agent_rp_endofpacket;                                       // lambda_loaded_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          camera_control_oc_s1_agent_rp_valid;                                         // camera_control_oc_s1_agent:rp_valid -> router_017:sink_valid
	wire  [110:0] camera_control_oc_s1_agent_rp_data;                                          // camera_control_oc_s1_agent:rp_data -> router_017:sink_data
	wire          camera_control_oc_s1_agent_rp_ready;                                         // router_017:sink_ready -> camera_control_oc_s1_agent:rp_ready
	wire          camera_control_oc_s1_agent_rp_startofpacket;                                 // camera_control_oc_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          camera_control_oc_s1_agent_rp_endofpacket;                                   // camera_control_oc_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          configure_camera_s1_agent_rp_valid;                                          // configure_camera_s1_agent:rp_valid -> router_018:sink_valid
	wire  [128:0] configure_camera_s1_agent_rp_data;                                           // configure_camera_s1_agent:rp_data -> router_018:sink_data
	wire          configure_camera_s1_agent_rp_ready;                                          // router_018:sink_ready -> configure_camera_s1_agent:rp_ready
	wire          configure_camera_s1_agent_rp_startofpacket;                                  // configure_camera_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          configure_camera_s1_agent_rp_endofpacket;                                    // configure_camera_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          yuv_ctrl_s1_agent_rp_valid;                                                  // yuv_ctrl_s1_agent:rp_valid -> router_019:sink_valid
	wire  [128:0] yuv_ctrl_s1_agent_rp_data;                                                   // yuv_ctrl_s1_agent:rp_data -> router_019:sink_data
	wire          yuv_ctrl_s1_agent_rp_ready;                                                  // router_019:sink_ready -> yuv_ctrl_s1_agent:rp_ready
	wire          yuv_ctrl_s1_agent_rp_startofpacket;                                          // yuv_ctrl_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          yuv_ctrl_s1_agent_rp_endofpacket;                                            // yuv_ctrl_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          yuv_status_s1_agent_rp_valid;                                                // yuv_status_s1_agent:rp_valid -> router_020:sink_valid
	wire  [128:0] yuv_status_s1_agent_rp_data;                                                 // yuv_status_s1_agent:rp_data -> router_020:sink_data
	wire          yuv_status_s1_agent_rp_ready;                                                // router_020:sink_ready -> yuv_status_s1_agent:rp_ready
	wire          yuv_status_s1_agent_rp_startofpacket;                                        // yuv_status_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          yuv_status_s1_agent_rp_endofpacket;                                          // yuv_status_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_src_valid;                                                            // router:src_valid -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [164:0] router_src_data;                                                             // router:src_data -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                            // hps_0_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [18:0] router_src_channel;                                                          // router:src_channel -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                    // router:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                      // router:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [164:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_data;                                // hps_0_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_ready;                               // cmd_demux:sink_ready -> hps_0_h2f_axi_master_wr_limiter:cmd_src_ready
	wire   [18:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_channel;                             // hps_0_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                       // hps_0_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                         // hps_0_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                           // rsp_mux:src_valid -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [164:0] rsp_mux_src_data;                                                            // rsp_mux:src_data -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                           // hps_0_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [18:0] rsp_mux_src_channel;                                                         // rsp_mux:src_channel -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                   // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                     // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_valid;                               // hps_0_h2f_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [164:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_data;                                // hps_0_h2f_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_ready;                               // hps_0_h2f_axi_master_agent:write_rp_ready -> hps_0_h2f_axi_master_wr_limiter:rsp_src_ready
	wire   [18:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_channel;                             // hps_0_h2f_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                       // hps_0_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                         // hps_0_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                        // router_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [164:0] router_001_src_data;                                                         // router_001:src_data -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                        // hps_0_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [18:0] router_001_src_channel;                                                      // router_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                // router_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                  // router_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [164:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_data;                                // hps_0_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_ready;                               // cmd_demux_001:sink_ready -> hps_0_h2f_axi_master_rd_limiter:cmd_src_ready
	wire   [18:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_channel;                             // hps_0_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                       // hps_0_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                         // hps_0_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                       // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [164:0] rsp_mux_001_src_data;                                                        // rsp_mux_001:src_data -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                       // hps_0_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [18:0] rsp_mux_001_src_channel;                                                     // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                               // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                 // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_valid;                               // hps_0_h2f_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [164:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_data;                                // hps_0_h2f_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_ready;                               // hps_0_h2f_axi_master_agent:read_rp_ready -> hps_0_h2f_axi_master_rd_limiter:rsp_src_ready
	wire   [18:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_channel;                             // hps_0_h2f_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                       // hps_0_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                         // hps_0_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          acc_config_altera_axi_slave_wr_burst_adapter_source0_valid;                  // acc_config_altera_axi_slave_wr_burst_adapter:source0_valid -> acc_config_altera_axi_slave_agent:write_cp_valid
	wire  [128:0] acc_config_altera_axi_slave_wr_burst_adapter_source0_data;                   // acc_config_altera_axi_slave_wr_burst_adapter:source0_data -> acc_config_altera_axi_slave_agent:write_cp_data
	wire          acc_config_altera_axi_slave_wr_burst_adapter_source0_ready;                  // acc_config_altera_axi_slave_agent:write_cp_ready -> acc_config_altera_axi_slave_wr_burst_adapter:source0_ready
	wire   [18:0] acc_config_altera_axi_slave_wr_burst_adapter_source0_channel;                // acc_config_altera_axi_slave_wr_burst_adapter:source0_channel -> acc_config_altera_axi_slave_agent:write_cp_channel
	wire          acc_config_altera_axi_slave_wr_burst_adapter_source0_startofpacket;          // acc_config_altera_axi_slave_wr_burst_adapter:source0_startofpacket -> acc_config_altera_axi_slave_agent:write_cp_startofpacket
	wire          acc_config_altera_axi_slave_wr_burst_adapter_source0_endofpacket;            // acc_config_altera_axi_slave_wr_burst_adapter:source0_endofpacket -> acc_config_altera_axi_slave_agent:write_cp_endofpacket
	wire          acc_config_altera_axi_slave_rd_burst_adapter_source0_valid;                  // acc_config_altera_axi_slave_rd_burst_adapter:source0_valid -> acc_config_altera_axi_slave_agent:read_cp_valid
	wire  [128:0] acc_config_altera_axi_slave_rd_burst_adapter_source0_data;                   // acc_config_altera_axi_slave_rd_burst_adapter:source0_data -> acc_config_altera_axi_slave_agent:read_cp_data
	wire          acc_config_altera_axi_slave_rd_burst_adapter_source0_ready;                  // acc_config_altera_axi_slave_agent:read_cp_ready -> acc_config_altera_axi_slave_rd_burst_adapter:source0_ready
	wire   [18:0] acc_config_altera_axi_slave_rd_burst_adapter_source0_channel;                // acc_config_altera_axi_slave_rd_burst_adapter:source0_channel -> acc_config_altera_axi_slave_agent:read_cp_channel
	wire          acc_config_altera_axi_slave_rd_burst_adapter_source0_startofpacket;          // acc_config_altera_axi_slave_rd_burst_adapter:source0_startofpacket -> acc_config_altera_axi_slave_agent:read_cp_startofpacket
	wire          acc_config_altera_axi_slave_rd_burst_adapter_source0_endofpacket;            // acc_config_altera_axi_slave_rd_burst_adapter:source0_endofpacket -> acc_config_altera_axi_slave_agent:read_cp_endofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_valid;         // axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:source0_valid -> axi_dma_unfiltered2_altera_axi_slave_agent:write_cp_valid
	wire  [128:0] axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_data;          // axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:source0_data -> axi_dma_unfiltered2_altera_axi_slave_agent:write_cp_data
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_ready;         // axi_dma_unfiltered2_altera_axi_slave_agent:write_cp_ready -> axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:source0_ready
	wire   [18:0] axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_channel;       // axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:source0_channel -> axi_dma_unfiltered2_altera_axi_slave_agent:write_cp_channel
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_startofpacket; // axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:source0_startofpacket -> axi_dma_unfiltered2_altera_axi_slave_agent:write_cp_startofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_endofpacket;   // axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:source0_endofpacket -> axi_dma_unfiltered2_altera_axi_slave_agent:write_cp_endofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_valid;         // axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:source0_valid -> axi_dma_unfiltered2_altera_axi_slave_agent:read_cp_valid
	wire  [128:0] axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_data;          // axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:source0_data -> axi_dma_unfiltered2_altera_axi_slave_agent:read_cp_data
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_ready;         // axi_dma_unfiltered2_altera_axi_slave_agent:read_cp_ready -> axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:source0_ready
	wire   [18:0] axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_channel;       // axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:source0_channel -> axi_dma_unfiltered2_altera_axi_slave_agent:read_cp_channel
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_startofpacket; // axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:source0_startofpacket -> axi_dma_unfiltered2_altera_axi_slave_agent:read_cp_startofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_endofpacket;   // axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:source0_endofpacket -> axi_dma_unfiltered2_altera_axi_slave_agent:read_cp_endofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_valid;         // axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:source0_valid -> axi_dma_unfiltered1_altera_axi_slave_agent:write_cp_valid
	wire  [128:0] axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_data;          // axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:source0_data -> axi_dma_unfiltered1_altera_axi_slave_agent:write_cp_data
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_ready;         // axi_dma_unfiltered1_altera_axi_slave_agent:write_cp_ready -> axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:source0_ready
	wire   [18:0] axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_channel;       // axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:source0_channel -> axi_dma_unfiltered1_altera_axi_slave_agent:write_cp_channel
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_startofpacket; // axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:source0_startofpacket -> axi_dma_unfiltered1_altera_axi_slave_agent:write_cp_startofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_endofpacket;   // axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:source0_endofpacket -> axi_dma_unfiltered1_altera_axi_slave_agent:write_cp_endofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_valid;         // axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:source0_valid -> axi_dma_unfiltered1_altera_axi_slave_agent:read_cp_valid
	wire  [128:0] axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_data;          // axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:source0_data -> axi_dma_unfiltered1_altera_axi_slave_agent:read_cp_data
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_ready;         // axi_dma_unfiltered1_altera_axi_slave_agent:read_cp_ready -> axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:source0_ready
	wire   [18:0] axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_channel;       // axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:source0_channel -> axi_dma_unfiltered1_altera_axi_slave_agent:read_cp_channel
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_startofpacket; // axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:source0_startofpacket -> axi_dma_unfiltered1_altera_axi_slave_agent:read_cp_startofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_endofpacket;   // axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:source0_endofpacket -> axi_dma_unfiltered1_altera_axi_slave_agent:read_cp_endofpacket
	wire          axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_valid;          // axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:source0_valid -> axi_dma_orig_block_altera_axi_slave_agent:write_cp_valid
	wire  [128:0] axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_data;           // axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:source0_data -> axi_dma_orig_block_altera_axi_slave_agent:write_cp_data
	wire          axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_ready;          // axi_dma_orig_block_altera_axi_slave_agent:write_cp_ready -> axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:source0_ready
	wire   [18:0] axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_channel;        // axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:source0_channel -> axi_dma_orig_block_altera_axi_slave_agent:write_cp_channel
	wire          axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_startofpacket;  // axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:source0_startofpacket -> axi_dma_orig_block_altera_axi_slave_agent:write_cp_startofpacket
	wire          axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_endofpacket;    // axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:source0_endofpacket -> axi_dma_orig_block_altera_axi_slave_agent:write_cp_endofpacket
	wire          axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_valid;          // axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:source0_valid -> axi_dma_orig_block_altera_axi_slave_agent:read_cp_valid
	wire  [128:0] axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_data;           // axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:source0_data -> axi_dma_orig_block_altera_axi_slave_agent:read_cp_data
	wire          axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_ready;          // axi_dma_orig_block_altera_axi_slave_agent:read_cp_ready -> axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:source0_ready
	wire   [18:0] axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_channel;        // axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:source0_channel -> axi_dma_orig_block_altera_axi_slave_agent:read_cp_channel
	wire          axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_startofpacket;  // axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:source0_startofpacket -> axi_dma_orig_block_altera_axi_slave_agent:read_cp_startofpacket
	wire          axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_endofpacket;    // axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:source0_endofpacket -> axi_dma_orig_block_altera_axi_slave_agent:read_cp_endofpacket
	wire          dma_yuv_altera_axi_slave_wr_burst_adapter_source0_valid;                     // dma_yuv_altera_axi_slave_wr_burst_adapter:source0_valid -> dma_yuv_altera_axi_slave_agent:write_cp_valid
	wire  [128:0] dma_yuv_altera_axi_slave_wr_burst_adapter_source0_data;                      // dma_yuv_altera_axi_slave_wr_burst_adapter:source0_data -> dma_yuv_altera_axi_slave_agent:write_cp_data
	wire          dma_yuv_altera_axi_slave_wr_burst_adapter_source0_ready;                     // dma_yuv_altera_axi_slave_agent:write_cp_ready -> dma_yuv_altera_axi_slave_wr_burst_adapter:source0_ready
	wire   [18:0] dma_yuv_altera_axi_slave_wr_burst_adapter_source0_channel;                   // dma_yuv_altera_axi_slave_wr_burst_adapter:source0_channel -> dma_yuv_altera_axi_slave_agent:write_cp_channel
	wire          dma_yuv_altera_axi_slave_wr_burst_adapter_source0_startofpacket;             // dma_yuv_altera_axi_slave_wr_burst_adapter:source0_startofpacket -> dma_yuv_altera_axi_slave_agent:write_cp_startofpacket
	wire          dma_yuv_altera_axi_slave_wr_burst_adapter_source0_endofpacket;               // dma_yuv_altera_axi_slave_wr_burst_adapter:source0_endofpacket -> dma_yuv_altera_axi_slave_agent:write_cp_endofpacket
	wire          dma_yuv_altera_axi_slave_rd_burst_adapter_source0_valid;                     // dma_yuv_altera_axi_slave_rd_burst_adapter:source0_valid -> dma_yuv_altera_axi_slave_agent:read_cp_valid
	wire  [128:0] dma_yuv_altera_axi_slave_rd_burst_adapter_source0_data;                      // dma_yuv_altera_axi_slave_rd_burst_adapter:source0_data -> dma_yuv_altera_axi_slave_agent:read_cp_data
	wire          dma_yuv_altera_axi_slave_rd_burst_adapter_source0_ready;                     // dma_yuv_altera_axi_slave_agent:read_cp_ready -> dma_yuv_altera_axi_slave_rd_burst_adapter:source0_ready
	wire   [18:0] dma_yuv_altera_axi_slave_rd_burst_adapter_source0_channel;                   // dma_yuv_altera_axi_slave_rd_burst_adapter:source0_channel -> dma_yuv_altera_axi_slave_agent:read_cp_channel
	wire          dma_yuv_altera_axi_slave_rd_burst_adapter_source0_startofpacket;             // dma_yuv_altera_axi_slave_rd_burst_adapter:source0_startofpacket -> dma_yuv_altera_axi_slave_agent:read_cp_startofpacket
	wire          dma_yuv_altera_axi_slave_rd_burst_adapter_source0_endofpacket;               // dma_yuv_altera_axi_slave_rd_burst_adapter:source0_endofpacket -> dma_yuv_altera_axi_slave_agent:read_cp_endofpacket
	wire          sad_result_low_s1_burst_adapter_source0_valid;                               // sad_result_low_s1_burst_adapter:source0_valid -> sad_result_low_s1_agent:cp_valid
	wire  [128:0] sad_result_low_s1_burst_adapter_source0_data;                                // sad_result_low_s1_burst_adapter:source0_data -> sad_result_low_s1_agent:cp_data
	wire          sad_result_low_s1_burst_adapter_source0_ready;                               // sad_result_low_s1_agent:cp_ready -> sad_result_low_s1_burst_adapter:source0_ready
	wire   [18:0] sad_result_low_s1_burst_adapter_source0_channel;                             // sad_result_low_s1_burst_adapter:source0_channel -> sad_result_low_s1_agent:cp_channel
	wire          sad_result_low_s1_burst_adapter_source0_startofpacket;                       // sad_result_low_s1_burst_adapter:source0_startofpacket -> sad_result_low_s1_agent:cp_startofpacket
	wire          sad_result_low_s1_burst_adapter_source0_endofpacket;                         // sad_result_low_s1_burst_adapter:source0_endofpacket -> sad_result_low_s1_agent:cp_endofpacket
	wire          sad_result_high_s1_burst_adapter_source0_valid;                              // sad_result_high_s1_burst_adapter:source0_valid -> sad_result_high_s1_agent:cp_valid
	wire  [128:0] sad_result_high_s1_burst_adapter_source0_data;                               // sad_result_high_s1_burst_adapter:source0_data -> sad_result_high_s1_agent:cp_data
	wire          sad_result_high_s1_burst_adapter_source0_ready;                              // sad_result_high_s1_agent:cp_ready -> sad_result_high_s1_burst_adapter:source0_ready
	wire   [18:0] sad_result_high_s1_burst_adapter_source0_channel;                            // sad_result_high_s1_burst_adapter:source0_channel -> sad_result_high_s1_agent:cp_channel
	wire          sad_result_high_s1_burst_adapter_source0_startofpacket;                      // sad_result_high_s1_burst_adapter:source0_startofpacket -> sad_result_high_s1_agent:cp_startofpacket
	wire          sad_result_high_s1_burst_adapter_source0_endofpacket;                        // sad_result_high_s1_burst_adapter:source0_endofpacket -> sad_result_high_s1_agent:cp_endofpacket
	wire          result_ready_s1_burst_adapter_source0_valid;                                 // result_ready_s1_burst_adapter:source0_valid -> result_ready_s1_agent:cp_valid
	wire  [128:0] result_ready_s1_burst_adapter_source0_data;                                  // result_ready_s1_burst_adapter:source0_data -> result_ready_s1_agent:cp_data
	wire          result_ready_s1_burst_adapter_source0_ready;                                 // result_ready_s1_agent:cp_ready -> result_ready_s1_burst_adapter:source0_ready
	wire   [18:0] result_ready_s1_burst_adapter_source0_channel;                               // result_ready_s1_burst_adapter:source0_channel -> result_ready_s1_agent:cp_channel
	wire          result_ready_s1_burst_adapter_source0_startofpacket;                         // result_ready_s1_burst_adapter:source0_startofpacket -> result_ready_s1_agent:cp_startofpacket
	wire          result_ready_s1_burst_adapter_source0_endofpacket;                           // result_ready_s1_burst_adapter:source0_endofpacket -> result_ready_s1_agent:cp_endofpacket
	wire          lcu_loaded_s1_burst_adapter_source0_valid;                                   // lcu_loaded_s1_burst_adapter:source0_valid -> lcu_loaded_s1_agent:cp_valid
	wire  [128:0] lcu_loaded_s1_burst_adapter_source0_data;                                    // lcu_loaded_s1_burst_adapter:source0_data -> lcu_loaded_s1_agent:cp_data
	wire          lcu_loaded_s1_burst_adapter_source0_ready;                                   // lcu_loaded_s1_agent:cp_ready -> lcu_loaded_s1_burst_adapter:source0_ready
	wire   [18:0] lcu_loaded_s1_burst_adapter_source0_channel;                                 // lcu_loaded_s1_burst_adapter:source0_channel -> lcu_loaded_s1_agent:cp_channel
	wire          lcu_loaded_s1_burst_adapter_source0_startofpacket;                           // lcu_loaded_s1_burst_adapter:source0_startofpacket -> lcu_loaded_s1_agent:cp_startofpacket
	wire          lcu_loaded_s1_burst_adapter_source0_endofpacket;                             // lcu_loaded_s1_burst_adapter:source0_endofpacket -> lcu_loaded_s1_agent:cp_endofpacket
	wire          lambda_loaded_s1_burst_adapter_source0_valid;                                // lambda_loaded_s1_burst_adapter:source0_valid -> lambda_loaded_s1_agent:cp_valid
	wire  [128:0] lambda_loaded_s1_burst_adapter_source0_data;                                 // lambda_loaded_s1_burst_adapter:source0_data -> lambda_loaded_s1_agent:cp_data
	wire          lambda_loaded_s1_burst_adapter_source0_ready;                                // lambda_loaded_s1_agent:cp_ready -> lambda_loaded_s1_burst_adapter:source0_ready
	wire   [18:0] lambda_loaded_s1_burst_adapter_source0_channel;                              // lambda_loaded_s1_burst_adapter:source0_channel -> lambda_loaded_s1_agent:cp_channel
	wire          lambda_loaded_s1_burst_adapter_source0_startofpacket;                        // lambda_loaded_s1_burst_adapter:source0_startofpacket -> lambda_loaded_s1_agent:cp_startofpacket
	wire          lambda_loaded_s1_burst_adapter_source0_endofpacket;                          // lambda_loaded_s1_burst_adapter:source0_endofpacket -> lambda_loaded_s1_agent:cp_endofpacket
	wire          camera_control_oc_s1_burst_adapter_source0_valid;                            // camera_control_oc_s1_burst_adapter:source0_valid -> camera_control_oc_s1_agent:cp_valid
	wire  [110:0] camera_control_oc_s1_burst_adapter_source0_data;                             // camera_control_oc_s1_burst_adapter:source0_data -> camera_control_oc_s1_agent:cp_data
	wire          camera_control_oc_s1_burst_adapter_source0_ready;                            // camera_control_oc_s1_agent:cp_ready -> camera_control_oc_s1_burst_adapter:source0_ready
	wire   [18:0] camera_control_oc_s1_burst_adapter_source0_channel;                          // camera_control_oc_s1_burst_adapter:source0_channel -> camera_control_oc_s1_agent:cp_channel
	wire          camera_control_oc_s1_burst_adapter_source0_startofpacket;                    // camera_control_oc_s1_burst_adapter:source0_startofpacket -> camera_control_oc_s1_agent:cp_startofpacket
	wire          camera_control_oc_s1_burst_adapter_source0_endofpacket;                      // camera_control_oc_s1_burst_adapter:source0_endofpacket -> camera_control_oc_s1_agent:cp_endofpacket
	wire          configure_camera_s1_burst_adapter_source0_valid;                             // configure_camera_s1_burst_adapter:source0_valid -> configure_camera_s1_agent:cp_valid
	wire  [128:0] configure_camera_s1_burst_adapter_source0_data;                              // configure_camera_s1_burst_adapter:source0_data -> configure_camera_s1_agent:cp_data
	wire          configure_camera_s1_burst_adapter_source0_ready;                             // configure_camera_s1_agent:cp_ready -> configure_camera_s1_burst_adapter:source0_ready
	wire   [18:0] configure_camera_s1_burst_adapter_source0_channel;                           // configure_camera_s1_burst_adapter:source0_channel -> configure_camera_s1_agent:cp_channel
	wire          configure_camera_s1_burst_adapter_source0_startofpacket;                     // configure_camera_s1_burst_adapter:source0_startofpacket -> configure_camera_s1_agent:cp_startofpacket
	wire          configure_camera_s1_burst_adapter_source0_endofpacket;                       // configure_camera_s1_burst_adapter:source0_endofpacket -> configure_camera_s1_agent:cp_endofpacket
	wire          yuv_ctrl_s1_burst_adapter_source0_valid;                                     // yuv_ctrl_s1_burst_adapter:source0_valid -> yuv_ctrl_s1_agent:cp_valid
	wire  [128:0] yuv_ctrl_s1_burst_adapter_source0_data;                                      // yuv_ctrl_s1_burst_adapter:source0_data -> yuv_ctrl_s1_agent:cp_data
	wire          yuv_ctrl_s1_burst_adapter_source0_ready;                                     // yuv_ctrl_s1_agent:cp_ready -> yuv_ctrl_s1_burst_adapter:source0_ready
	wire   [18:0] yuv_ctrl_s1_burst_adapter_source0_channel;                                   // yuv_ctrl_s1_burst_adapter:source0_channel -> yuv_ctrl_s1_agent:cp_channel
	wire          yuv_ctrl_s1_burst_adapter_source0_startofpacket;                             // yuv_ctrl_s1_burst_adapter:source0_startofpacket -> yuv_ctrl_s1_agent:cp_startofpacket
	wire          yuv_ctrl_s1_burst_adapter_source0_endofpacket;                               // yuv_ctrl_s1_burst_adapter:source0_endofpacket -> yuv_ctrl_s1_agent:cp_endofpacket
	wire          yuv_status_s1_burst_adapter_source0_valid;                                   // yuv_status_s1_burst_adapter:source0_valid -> yuv_status_s1_agent:cp_valid
	wire  [128:0] yuv_status_s1_burst_adapter_source0_data;                                    // yuv_status_s1_burst_adapter:source0_data -> yuv_status_s1_agent:cp_data
	wire          yuv_status_s1_burst_adapter_source0_ready;                                   // yuv_status_s1_agent:cp_ready -> yuv_status_s1_burst_adapter:source0_ready
	wire   [18:0] yuv_status_s1_burst_adapter_source0_channel;                                 // yuv_status_s1_burst_adapter:source0_channel -> yuv_status_s1_agent:cp_channel
	wire          yuv_status_s1_burst_adapter_source0_startofpacket;                           // yuv_status_s1_burst_adapter:source0_startofpacket -> yuv_status_s1_agent:cp_startofpacket
	wire          yuv_status_s1_burst_adapter_source0_endofpacket;                             // yuv_status_s1_burst_adapter:source0_endofpacket -> yuv_status_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [164:0] cmd_demux_src0_data;                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [18:0] cmd_demux_src0_channel;                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                        // cmd_demux:src1_valid -> cmd_mux_002:sink0_valid
	wire  [164:0] cmd_demux_src1_data;                                                         // cmd_demux:src1_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src1_ready;                                                        // cmd_mux_002:sink0_ready -> cmd_demux:src1_ready
	wire   [18:0] cmd_demux_src1_channel;                                                      // cmd_demux:src1_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                // cmd_demux:src1_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                  // cmd_demux:src1_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                        // cmd_demux:src2_valid -> cmd_mux_004:sink0_valid
	wire  [164:0] cmd_demux_src2_data;                                                         // cmd_demux:src2_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src2_ready;                                                        // cmd_mux_004:sink0_ready -> cmd_demux:src2_ready
	wire   [18:0] cmd_demux_src2_channel;                                                      // cmd_demux:src2_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                // cmd_demux:src2_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                  // cmd_demux:src2_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                        // cmd_demux:src3_valid -> cmd_mux_006:sink0_valid
	wire  [164:0] cmd_demux_src3_data;                                                         // cmd_demux:src3_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src3_ready;                                                        // cmd_mux_006:sink0_ready -> cmd_demux:src3_ready
	wire   [18:0] cmd_demux_src3_channel;                                                      // cmd_demux:src3_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                // cmd_demux:src3_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                  // cmd_demux:src3_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                        // cmd_demux:src4_valid -> cmd_mux_008:sink0_valid
	wire  [164:0] cmd_demux_src4_data;                                                         // cmd_demux:src4_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src4_ready;                                                        // cmd_mux_008:sink0_ready -> cmd_demux:src4_ready
	wire   [18:0] cmd_demux_src4_channel;                                                      // cmd_demux:src4_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                // cmd_demux:src4_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                  // cmd_demux:src4_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                        // cmd_demux:src5_valid -> cmd_mux_010:sink0_valid
	wire  [164:0] cmd_demux_src5_data;                                                         // cmd_demux:src5_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src5_ready;                                                        // cmd_mux_010:sink0_ready -> cmd_demux:src5_ready
	wire   [18:0] cmd_demux_src5_channel;                                                      // cmd_demux:src5_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                // cmd_demux:src5_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                  // cmd_demux:src5_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                        // cmd_demux:src6_valid -> cmd_mux_011:sink0_valid
	wire  [164:0] cmd_demux_src6_data;                                                         // cmd_demux:src6_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src6_ready;                                                        // cmd_mux_011:sink0_ready -> cmd_demux:src6_ready
	wire   [18:0] cmd_demux_src6_channel;                                                      // cmd_demux:src6_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                // cmd_demux:src6_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                  // cmd_demux:src6_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                        // cmd_demux:src7_valid -> cmd_mux_012:sink0_valid
	wire  [164:0] cmd_demux_src7_data;                                                         // cmd_demux:src7_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src7_ready;                                                        // cmd_mux_012:sink0_ready -> cmd_demux:src7_ready
	wire   [18:0] cmd_demux_src7_channel;                                                      // cmd_demux:src7_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                // cmd_demux:src7_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                  // cmd_demux:src7_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                        // cmd_demux:src8_valid -> cmd_mux_013:sink0_valid
	wire  [164:0] cmd_demux_src8_data;                                                         // cmd_demux:src8_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src8_ready;                                                        // cmd_mux_013:sink0_ready -> cmd_demux:src8_ready
	wire   [18:0] cmd_demux_src8_channel;                                                      // cmd_demux:src8_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                // cmd_demux:src8_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                  // cmd_demux:src8_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                        // cmd_demux:src9_valid -> cmd_mux_014:sink0_valid
	wire  [164:0] cmd_demux_src9_data;                                                         // cmd_demux:src9_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src9_ready;                                                        // cmd_mux_014:sink0_ready -> cmd_demux:src9_ready
	wire   [18:0] cmd_demux_src9_channel;                                                      // cmd_demux:src9_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                // cmd_demux:src9_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                  // cmd_demux:src9_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                       // cmd_demux:src10_valid -> cmd_mux_015:sink0_valid
	wire  [164:0] cmd_demux_src10_data;                                                        // cmd_demux:src10_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src10_ready;                                                       // cmd_mux_015:sink0_ready -> cmd_demux:src10_ready
	wire   [18:0] cmd_demux_src10_channel;                                                     // cmd_demux:src10_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                               // cmd_demux:src10_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                 // cmd_demux:src10_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                       // cmd_demux:src11_valid -> cmd_mux_016:sink0_valid
	wire  [164:0] cmd_demux_src11_data;                                                        // cmd_demux:src11_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src11_ready;                                                       // cmd_mux_016:sink0_ready -> cmd_demux:src11_ready
	wire   [18:0] cmd_demux_src11_channel;                                                     // cmd_demux:src11_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                               // cmd_demux:src11_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                 // cmd_demux:src11_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                       // cmd_demux:src12_valid -> cmd_mux_017:sink0_valid
	wire  [164:0] cmd_demux_src12_data;                                                        // cmd_demux:src12_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src12_ready;                                                       // cmd_mux_017:sink0_ready -> cmd_demux:src12_ready
	wire   [18:0] cmd_demux_src12_channel;                                                     // cmd_demux:src12_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                               // cmd_demux:src12_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                 // cmd_demux:src12_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                       // cmd_demux:src13_valid -> cmd_mux_018:sink0_valid
	wire  [164:0] cmd_demux_src13_data;                                                        // cmd_demux:src13_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src13_ready;                                                       // cmd_mux_018:sink0_ready -> cmd_demux:src13_ready
	wire   [18:0] cmd_demux_src13_channel;                                                     // cmd_demux:src13_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                               // cmd_demux:src13_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                 // cmd_demux:src13_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                    // cmd_demux_001:src0_valid -> cmd_mux_001:sink0_valid
	wire  [164:0] cmd_demux_001_src0_data;                                                     // cmd_demux_001:src0_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src0_ready;                                                    // cmd_mux_001:sink0_ready -> cmd_demux_001:src0_ready
	wire   [18:0] cmd_demux_001_src0_channel;                                                  // cmd_demux_001:src0_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src0_startofpacket;                                            // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                              // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                    // cmd_demux_001:src1_valid -> cmd_mux_003:sink0_valid
	wire  [164:0] cmd_demux_001_src1_data;                                                     // cmd_demux_001:src1_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_001_src1_ready;                                                    // cmd_mux_003:sink0_ready -> cmd_demux_001:src1_ready
	wire   [18:0] cmd_demux_001_src1_channel;                                                  // cmd_demux_001:src1_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src1_startofpacket;                                            // cmd_demux_001:src1_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                              // cmd_demux_001:src1_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                    // cmd_demux_001:src2_valid -> cmd_mux_005:sink0_valid
	wire  [164:0] cmd_demux_001_src2_data;                                                     // cmd_demux_001:src2_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_001_src2_ready;                                                    // cmd_mux_005:sink0_ready -> cmd_demux_001:src2_ready
	wire   [18:0] cmd_demux_001_src2_channel;                                                  // cmd_demux_001:src2_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                            // cmd_demux_001:src2_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                              // cmd_demux_001:src2_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                    // cmd_demux_001:src3_valid -> cmd_mux_007:sink0_valid
	wire  [164:0] cmd_demux_001_src3_data;                                                     // cmd_demux_001:src3_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_001_src3_ready;                                                    // cmd_mux_007:sink0_ready -> cmd_demux_001:src3_ready
	wire   [18:0] cmd_demux_001_src3_channel;                                                  // cmd_demux_001:src3_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                            // cmd_demux_001:src3_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                              // cmd_demux_001:src3_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                    // cmd_demux_001:src4_valid -> cmd_mux_009:sink0_valid
	wire  [164:0] cmd_demux_001_src4_data;                                                     // cmd_demux_001:src4_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_001_src4_ready;                                                    // cmd_mux_009:sink0_ready -> cmd_demux_001:src4_ready
	wire   [18:0] cmd_demux_001_src4_channel;                                                  // cmd_demux_001:src4_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                            // cmd_demux_001:src4_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                              // cmd_demux_001:src4_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                    // cmd_demux_001:src5_valid -> cmd_mux_010:sink1_valid
	wire  [164:0] cmd_demux_001_src5_data;                                                     // cmd_demux_001:src5_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src5_ready;                                                    // cmd_mux_010:sink1_ready -> cmd_demux_001:src5_ready
	wire   [18:0] cmd_demux_001_src5_channel;                                                  // cmd_demux_001:src5_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                            // cmd_demux_001:src5_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                              // cmd_demux_001:src5_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                    // cmd_demux_001:src6_valid -> cmd_mux_011:sink1_valid
	wire  [164:0] cmd_demux_001_src6_data;                                                     // cmd_demux_001:src6_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src6_ready;                                                    // cmd_mux_011:sink1_ready -> cmd_demux_001:src6_ready
	wire   [18:0] cmd_demux_001_src6_channel;                                                  // cmd_demux_001:src6_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                            // cmd_demux_001:src6_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                              // cmd_demux_001:src6_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                    // cmd_demux_001:src7_valid -> cmd_mux_012:sink1_valid
	wire  [164:0] cmd_demux_001_src7_data;                                                     // cmd_demux_001:src7_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src7_ready;                                                    // cmd_mux_012:sink1_ready -> cmd_demux_001:src7_ready
	wire   [18:0] cmd_demux_001_src7_channel;                                                  // cmd_demux_001:src7_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                            // cmd_demux_001:src7_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                              // cmd_demux_001:src7_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                    // cmd_demux_001:src8_valid -> cmd_mux_013:sink1_valid
	wire  [164:0] cmd_demux_001_src8_data;                                                     // cmd_demux_001:src8_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_001_src8_ready;                                                    // cmd_mux_013:sink1_ready -> cmd_demux_001:src8_ready
	wire   [18:0] cmd_demux_001_src8_channel;                                                  // cmd_demux_001:src8_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                            // cmd_demux_001:src8_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                              // cmd_demux_001:src8_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                    // cmd_demux_001:src9_valid -> cmd_mux_014:sink1_valid
	wire  [164:0] cmd_demux_001_src9_data;                                                     // cmd_demux_001:src9_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_001_src9_ready;                                                    // cmd_mux_014:sink1_ready -> cmd_demux_001:src9_ready
	wire   [18:0] cmd_demux_001_src9_channel;                                                  // cmd_demux_001:src9_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                            // cmd_demux_001:src9_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                              // cmd_demux_001:src9_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                   // cmd_demux_001:src10_valid -> cmd_mux_015:sink1_valid
	wire  [164:0] cmd_demux_001_src10_data;                                                    // cmd_demux_001:src10_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_001_src10_ready;                                                   // cmd_mux_015:sink1_ready -> cmd_demux_001:src10_ready
	wire   [18:0] cmd_demux_001_src10_channel;                                                 // cmd_demux_001:src10_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                           // cmd_demux_001:src10_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                             // cmd_demux_001:src10_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                                   // cmd_demux_001:src11_valid -> cmd_mux_016:sink1_valid
	wire  [164:0] cmd_demux_001_src11_data;                                                    // cmd_demux_001:src11_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_001_src11_ready;                                                   // cmd_mux_016:sink1_ready -> cmd_demux_001:src11_ready
	wire   [18:0] cmd_demux_001_src11_channel;                                                 // cmd_demux_001:src11_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                           // cmd_demux_001:src11_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                             // cmd_demux_001:src11_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                                   // cmd_demux_001:src12_valid -> cmd_mux_017:sink1_valid
	wire  [164:0] cmd_demux_001_src12_data;                                                    // cmd_demux_001:src12_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_001_src12_ready;                                                   // cmd_mux_017:sink1_ready -> cmd_demux_001:src12_ready
	wire   [18:0] cmd_demux_001_src12_channel;                                                 // cmd_demux_001:src12_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                                           // cmd_demux_001:src12_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                             // cmd_demux_001:src12_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_001_src13_valid;                                                   // cmd_demux_001:src13_valid -> cmd_mux_018:sink1_valid
	wire  [164:0] cmd_demux_001_src13_data;                                                    // cmd_demux_001:src13_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_001_src13_ready;                                                   // cmd_mux_018:sink1_ready -> cmd_demux_001:src13_ready
	wire   [18:0] cmd_demux_001_src13_channel;                                                 // cmd_demux_001:src13_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_001_src13_startofpacket;                                           // cmd_demux_001:src13_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                             // cmd_demux_001:src13_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [164:0] rsp_demux_src0_data;                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [18:0] rsp_demux_src0_channel;                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                    // rsp_demux_001:src0_valid -> rsp_mux_001:sink0_valid
	wire  [164:0] rsp_demux_001_src0_data;                                                     // rsp_demux_001:src0_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_001_src0_ready;                                                    // rsp_mux_001:sink0_ready -> rsp_demux_001:src0_ready
	wire   [18:0] rsp_demux_001_src0_channel;                                                  // rsp_demux_001:src0_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src0_startofpacket;                                            // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                              // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                    // rsp_demux_002:src0_valid -> rsp_mux:sink1_valid
	wire  [164:0] rsp_demux_002_src0_data;                                                     // rsp_demux_002:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_002_src0_ready;                                                    // rsp_mux:sink1_ready -> rsp_demux_002:src0_ready
	wire   [18:0] rsp_demux_002_src0_channel;                                                  // rsp_demux_002:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_002_src0_startofpacket;                                            // rsp_demux_002:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                              // rsp_demux_002:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                    // rsp_demux_003:src0_valid -> rsp_mux_001:sink1_valid
	wire  [164:0] rsp_demux_003_src0_data;                                                     // rsp_demux_003:src0_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_003_src0_ready;                                                    // rsp_mux_001:sink1_ready -> rsp_demux_003:src0_ready
	wire   [18:0] rsp_demux_003_src0_channel;                                                  // rsp_demux_003:src0_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_003_src0_startofpacket;                                            // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                              // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                    // rsp_demux_004:src0_valid -> rsp_mux:sink2_valid
	wire  [164:0] rsp_demux_004_src0_data;                                                     // rsp_demux_004:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_004_src0_ready;                                                    // rsp_mux:sink2_ready -> rsp_demux_004:src0_ready
	wire   [18:0] rsp_demux_004_src0_channel;                                                  // rsp_demux_004:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_004_src0_startofpacket;                                            // rsp_demux_004:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                              // rsp_demux_004:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_005_src0_valid;                                                    // rsp_demux_005:src0_valid -> rsp_mux_001:sink2_valid
	wire  [164:0] rsp_demux_005_src0_data;                                                     // rsp_demux_005:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_005_src0_ready;                                                    // rsp_mux_001:sink2_ready -> rsp_demux_005:src0_ready
	wire   [18:0] rsp_demux_005_src0_channel;                                                  // rsp_demux_005:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_005_src0_startofpacket;                                            // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                              // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_006_src0_valid;                                                    // rsp_demux_006:src0_valid -> rsp_mux:sink3_valid
	wire  [164:0] rsp_demux_006_src0_data;                                                     // rsp_demux_006:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_006_src0_ready;                                                    // rsp_mux:sink3_ready -> rsp_demux_006:src0_ready
	wire   [18:0] rsp_demux_006_src0_channel;                                                  // rsp_demux_006:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_006_src0_startofpacket;                                            // rsp_demux_006:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                              // rsp_demux_006:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_007_src0_valid;                                                    // rsp_demux_007:src0_valid -> rsp_mux_001:sink3_valid
	wire  [164:0] rsp_demux_007_src0_data;                                                     // rsp_demux_007:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_007_src0_ready;                                                    // rsp_mux_001:sink3_ready -> rsp_demux_007:src0_ready
	wire   [18:0] rsp_demux_007_src0_channel;                                                  // rsp_demux_007:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_007_src0_startofpacket;                                            // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                              // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_008_src0_valid;                                                    // rsp_demux_008:src0_valid -> rsp_mux:sink4_valid
	wire  [164:0] rsp_demux_008_src0_data;                                                     // rsp_demux_008:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_008_src0_ready;                                                    // rsp_mux:sink4_ready -> rsp_demux_008:src0_ready
	wire   [18:0] rsp_demux_008_src0_channel;                                                  // rsp_demux_008:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_008_src0_startofpacket;                                            // rsp_demux_008:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                              // rsp_demux_008:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_009_src0_valid;                                                    // rsp_demux_009:src0_valid -> rsp_mux_001:sink4_valid
	wire  [164:0] rsp_demux_009_src0_data;                                                     // rsp_demux_009:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_009_src0_ready;                                                    // rsp_mux_001:sink4_ready -> rsp_demux_009:src0_ready
	wire   [18:0] rsp_demux_009_src0_channel;                                                  // rsp_demux_009:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_009_src0_startofpacket;                                            // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                              // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_010_src0_valid;                                                    // rsp_demux_010:src0_valid -> rsp_mux:sink5_valid
	wire  [164:0] rsp_demux_010_src0_data;                                                     // rsp_demux_010:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_010_src0_ready;                                                    // rsp_mux:sink5_ready -> rsp_demux_010:src0_ready
	wire   [18:0] rsp_demux_010_src0_channel;                                                  // rsp_demux_010:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_010_src0_startofpacket;                                            // rsp_demux_010:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                              // rsp_demux_010:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_010_src1_valid;                                                    // rsp_demux_010:src1_valid -> rsp_mux_001:sink5_valid
	wire  [164:0] rsp_demux_010_src1_data;                                                     // rsp_demux_010:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_010_src1_ready;                                                    // rsp_mux_001:sink5_ready -> rsp_demux_010:src1_ready
	wire   [18:0] rsp_demux_010_src1_channel;                                                  // rsp_demux_010:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_010_src1_startofpacket;                                            // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                              // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_011_src0_valid;                                                    // rsp_demux_011:src0_valid -> rsp_mux:sink6_valid
	wire  [164:0] rsp_demux_011_src0_data;                                                     // rsp_demux_011:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_011_src0_ready;                                                    // rsp_mux:sink6_ready -> rsp_demux_011:src0_ready
	wire   [18:0] rsp_demux_011_src0_channel;                                                  // rsp_demux_011:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_011_src0_startofpacket;                                            // rsp_demux_011:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                              // rsp_demux_011:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_011_src1_valid;                                                    // rsp_demux_011:src1_valid -> rsp_mux_001:sink6_valid
	wire  [164:0] rsp_demux_011_src1_data;                                                     // rsp_demux_011:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_011_src1_ready;                                                    // rsp_mux_001:sink6_ready -> rsp_demux_011:src1_ready
	wire   [18:0] rsp_demux_011_src1_channel;                                                  // rsp_demux_011:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_011_src1_startofpacket;                                            // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                              // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_012_src0_valid;                                                    // rsp_demux_012:src0_valid -> rsp_mux:sink7_valid
	wire  [164:0] rsp_demux_012_src0_data;                                                     // rsp_demux_012:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_012_src0_ready;                                                    // rsp_mux:sink7_ready -> rsp_demux_012:src0_ready
	wire   [18:0] rsp_demux_012_src0_channel;                                                  // rsp_demux_012:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_012_src0_startofpacket;                                            // rsp_demux_012:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                              // rsp_demux_012:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_012_src1_valid;                                                    // rsp_demux_012:src1_valid -> rsp_mux_001:sink7_valid
	wire  [164:0] rsp_demux_012_src1_data;                                                     // rsp_demux_012:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_012_src1_ready;                                                    // rsp_mux_001:sink7_ready -> rsp_demux_012:src1_ready
	wire   [18:0] rsp_demux_012_src1_channel;                                                  // rsp_demux_012:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_012_src1_startofpacket;                                            // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                              // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_013_src0_valid;                                                    // rsp_demux_013:src0_valid -> rsp_mux:sink8_valid
	wire  [164:0] rsp_demux_013_src0_data;                                                     // rsp_demux_013:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_013_src0_ready;                                                    // rsp_mux:sink8_ready -> rsp_demux_013:src0_ready
	wire   [18:0] rsp_demux_013_src0_channel;                                                  // rsp_demux_013:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_013_src0_startofpacket;                                            // rsp_demux_013:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                              // rsp_demux_013:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_013_src1_valid;                                                    // rsp_demux_013:src1_valid -> rsp_mux_001:sink8_valid
	wire  [164:0] rsp_demux_013_src1_data;                                                     // rsp_demux_013:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_013_src1_ready;                                                    // rsp_mux_001:sink8_ready -> rsp_demux_013:src1_ready
	wire   [18:0] rsp_demux_013_src1_channel;                                                  // rsp_demux_013:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_013_src1_startofpacket;                                            // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                              // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_014_src0_valid;                                                    // rsp_demux_014:src0_valid -> rsp_mux:sink9_valid
	wire  [164:0] rsp_demux_014_src0_data;                                                     // rsp_demux_014:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_014_src0_ready;                                                    // rsp_mux:sink9_ready -> rsp_demux_014:src0_ready
	wire   [18:0] rsp_demux_014_src0_channel;                                                  // rsp_demux_014:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_014_src0_startofpacket;                                            // rsp_demux_014:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                              // rsp_demux_014:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_014_src1_valid;                                                    // rsp_demux_014:src1_valid -> rsp_mux_001:sink9_valid
	wire  [164:0] rsp_demux_014_src1_data;                                                     // rsp_demux_014:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_014_src1_ready;                                                    // rsp_mux_001:sink9_ready -> rsp_demux_014:src1_ready
	wire   [18:0] rsp_demux_014_src1_channel;                                                  // rsp_demux_014:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_014_src1_startofpacket;                                            // rsp_demux_014:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                              // rsp_demux_014:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_015_src0_valid;                                                    // rsp_demux_015:src0_valid -> rsp_mux:sink10_valid
	wire  [164:0] rsp_demux_015_src0_data;                                                     // rsp_demux_015:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_015_src0_ready;                                                    // rsp_mux:sink10_ready -> rsp_demux_015:src0_ready
	wire   [18:0] rsp_demux_015_src0_channel;                                                  // rsp_demux_015:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_015_src0_startofpacket;                                            // rsp_demux_015:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                              // rsp_demux_015:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_015_src1_valid;                                                    // rsp_demux_015:src1_valid -> rsp_mux_001:sink10_valid
	wire  [164:0] rsp_demux_015_src1_data;                                                     // rsp_demux_015:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_015_src1_ready;                                                    // rsp_mux_001:sink10_ready -> rsp_demux_015:src1_ready
	wire   [18:0] rsp_demux_015_src1_channel;                                                  // rsp_demux_015:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_015_src1_startofpacket;                                            // rsp_demux_015:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                              // rsp_demux_015:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_016_src0_valid;                                                    // rsp_demux_016:src0_valid -> rsp_mux:sink11_valid
	wire  [164:0] rsp_demux_016_src0_data;                                                     // rsp_demux_016:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_016_src0_ready;                                                    // rsp_mux:sink11_ready -> rsp_demux_016:src0_ready
	wire   [18:0] rsp_demux_016_src0_channel;                                                  // rsp_demux_016:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_016_src0_startofpacket;                                            // rsp_demux_016:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                              // rsp_demux_016:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_016_src1_valid;                                                    // rsp_demux_016:src1_valid -> rsp_mux_001:sink11_valid
	wire  [164:0] rsp_demux_016_src1_data;                                                     // rsp_demux_016:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_016_src1_ready;                                                    // rsp_mux_001:sink11_ready -> rsp_demux_016:src1_ready
	wire   [18:0] rsp_demux_016_src1_channel;                                                  // rsp_demux_016:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_016_src1_startofpacket;                                            // rsp_demux_016:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                              // rsp_demux_016:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_017_src0_valid;                                                    // rsp_demux_017:src0_valid -> rsp_mux:sink12_valid
	wire  [164:0] rsp_demux_017_src0_data;                                                     // rsp_demux_017:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_017_src0_ready;                                                    // rsp_mux:sink12_ready -> rsp_demux_017:src0_ready
	wire   [18:0] rsp_demux_017_src0_channel;                                                  // rsp_demux_017:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_017_src0_startofpacket;                                            // rsp_demux_017:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                              // rsp_demux_017:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_017_src1_valid;                                                    // rsp_demux_017:src1_valid -> rsp_mux_001:sink12_valid
	wire  [164:0] rsp_demux_017_src1_data;                                                     // rsp_demux_017:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_017_src1_ready;                                                    // rsp_mux_001:sink12_ready -> rsp_demux_017:src1_ready
	wire   [18:0] rsp_demux_017_src1_channel;                                                  // rsp_demux_017:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_017_src1_startofpacket;                                            // rsp_demux_017:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                              // rsp_demux_017:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_018_src0_valid;                                                    // rsp_demux_018:src0_valid -> rsp_mux:sink13_valid
	wire  [164:0] rsp_demux_018_src0_data;                                                     // rsp_demux_018:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_018_src0_ready;                                                    // rsp_mux:sink13_ready -> rsp_demux_018:src0_ready
	wire   [18:0] rsp_demux_018_src0_channel;                                                  // rsp_demux_018:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_018_src0_startofpacket;                                            // rsp_demux_018:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                              // rsp_demux_018:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_018_src1_valid;                                                    // rsp_demux_018:src1_valid -> rsp_mux_001:sink13_valid
	wire  [164:0] rsp_demux_018_src1_data;                                                     // rsp_demux_018:src1_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_018_src1_ready;                                                    // rsp_mux_001:sink13_ready -> rsp_demux_018:src1_ready
	wire   [18:0] rsp_demux_018_src1_channel;                                                  // rsp_demux_018:src1_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_018_src1_startofpacket;                                            // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                              // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          router_002_src_valid;                                                        // router_002:src_valid -> acc_config_altera_axi_slave_wr_rsp_width_adapter:in_valid
	wire  [128:0] router_002_src_data;                                                         // router_002:src_data -> acc_config_altera_axi_slave_wr_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                        // acc_config_altera_axi_slave_wr_rsp_width_adapter:in_ready -> router_002:src_ready
	wire   [18:0] router_002_src_channel;                                                      // router_002:src_channel -> acc_config_altera_axi_slave_wr_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                // router_002:src_startofpacket -> acc_config_altera_axi_slave_wr_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                  // router_002:src_endofpacket -> acc_config_altera_axi_slave_wr_rsp_width_adapter:in_endofpacket
	wire          acc_config_altera_axi_slave_wr_rsp_width_adapter_src_valid;                  // acc_config_altera_axi_slave_wr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [164:0] acc_config_altera_axi_slave_wr_rsp_width_adapter_src_data;                   // acc_config_altera_axi_slave_wr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          acc_config_altera_axi_slave_wr_rsp_width_adapter_src_ready;                  // rsp_demux:sink_ready -> acc_config_altera_axi_slave_wr_rsp_width_adapter:out_ready
	wire   [18:0] acc_config_altera_axi_slave_wr_rsp_width_adapter_src_channel;                // acc_config_altera_axi_slave_wr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          acc_config_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket;          // acc_config_altera_axi_slave_wr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          acc_config_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket;            // acc_config_altera_axi_slave_wr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                                        // router_003:src_valid -> acc_config_altera_axi_slave_rd_rsp_width_adapter:in_valid
	wire  [128:0] router_003_src_data;                                                         // router_003:src_data -> acc_config_altera_axi_slave_rd_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                        // acc_config_altera_axi_slave_rd_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [18:0] router_003_src_channel;                                                      // router_003:src_channel -> acc_config_altera_axi_slave_rd_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                // router_003:src_startofpacket -> acc_config_altera_axi_slave_rd_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                  // router_003:src_endofpacket -> acc_config_altera_axi_slave_rd_rsp_width_adapter:in_endofpacket
	wire          acc_config_altera_axi_slave_rd_rsp_width_adapter_src_valid;                  // acc_config_altera_axi_slave_rd_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [164:0] acc_config_altera_axi_slave_rd_rsp_width_adapter_src_data;                   // acc_config_altera_axi_slave_rd_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          acc_config_altera_axi_slave_rd_rsp_width_adapter_src_ready;                  // rsp_demux_001:sink_ready -> acc_config_altera_axi_slave_rd_rsp_width_adapter:out_ready
	wire   [18:0] acc_config_altera_axi_slave_rd_rsp_width_adapter_src_channel;                // acc_config_altera_axi_slave_rd_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          acc_config_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket;          // acc_config_altera_axi_slave_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          acc_config_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket;            // acc_config_altera_axi_slave_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                                        // router_004:src_valid -> axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:in_valid
	wire  [128:0] router_004_src_data;                                                         // router_004:src_data -> axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                                        // axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:in_ready -> router_004:src_ready
	wire   [18:0] router_004_src_channel;                                                      // router_004:src_channel -> axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                                // router_004:src_startofpacket -> axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                                  // router_004:src_endofpacket -> axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:in_endofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_valid;         // axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [164:0] axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_data;          // axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_ready;         // rsp_demux_002:sink_ready -> axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:out_ready
	wire   [18:0] axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_channel;       // axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket; // axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket;   // axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                                        // router_005:src_valid -> axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:in_valid
	wire  [128:0] router_005_src_data;                                                         // router_005:src_data -> axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                                        // axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:in_ready -> router_005:src_ready
	wire   [18:0] router_005_src_channel;                                                      // router_005:src_channel -> axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                                // router_005:src_startofpacket -> axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                                  // router_005:src_endofpacket -> axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:in_endofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_valid;         // axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [164:0] axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_data;          // axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_ready;         // rsp_demux_003:sink_ready -> axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:out_ready
	wire   [18:0] axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_channel;       // axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket; // axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket;   // axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                                        // router_006:src_valid -> axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:in_valid
	wire  [128:0] router_006_src_data;                                                         // router_006:src_data -> axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                                        // axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:in_ready -> router_006:src_ready
	wire   [18:0] router_006_src_channel;                                                      // router_006:src_channel -> axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                                // router_006:src_startofpacket -> axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                                  // router_006:src_endofpacket -> axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:in_endofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_valid;         // axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [164:0] axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_data;          // axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_ready;         // rsp_demux_004:sink_ready -> axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:out_ready
	wire   [18:0] axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_channel;       // axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket; // axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket;   // axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                                        // router_007:src_valid -> axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:in_valid
	wire  [128:0] router_007_src_data;                                                         // router_007:src_data -> axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                                        // axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:in_ready -> router_007:src_ready
	wire   [18:0] router_007_src_channel;                                                      // router_007:src_channel -> axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                                                // router_007:src_startofpacket -> axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                                  // router_007:src_endofpacket -> axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:in_endofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_valid;         // axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:out_valid -> rsp_demux_005:sink_valid
	wire  [164:0] axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_data;          // axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:out_data -> rsp_demux_005:sink_data
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_ready;         // rsp_demux_005:sink_ready -> axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:out_ready
	wire   [18:0] axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_channel;       // axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:out_channel -> rsp_demux_005:sink_channel
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket; // axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket;   // axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_008_src_valid;                                                        // router_008:src_valid -> axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:in_valid
	wire  [128:0] router_008_src_data;                                                         // router_008:src_data -> axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                                        // axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:in_ready -> router_008:src_ready
	wire   [18:0] router_008_src_channel;                                                      // router_008:src_channel -> axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                                                // router_008:src_startofpacket -> axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                                  // router_008:src_endofpacket -> axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:in_endofpacket
	wire          axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_valid;          // axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:out_valid -> rsp_demux_006:sink_valid
	wire  [164:0] axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_data;           // axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:out_data -> rsp_demux_006:sink_data
	wire          axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_ready;          // rsp_demux_006:sink_ready -> axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:out_ready
	wire   [18:0] axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_channel;        // axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:out_channel -> rsp_demux_006:sink_channel
	wire          axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket;  // axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:out_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket;    // axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter:out_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_009_src_valid;                                                        // router_009:src_valid -> axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:in_valid
	wire  [128:0] router_009_src_data;                                                         // router_009:src_data -> axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:in_data
	wire          router_009_src_ready;                                                        // axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:in_ready -> router_009:src_ready
	wire   [18:0] router_009_src_channel;                                                      // router_009:src_channel -> axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:in_channel
	wire          router_009_src_startofpacket;                                                // router_009:src_startofpacket -> axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:in_startofpacket
	wire          router_009_src_endofpacket;                                                  // router_009:src_endofpacket -> axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:in_endofpacket
	wire          axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_valid;          // axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:out_valid -> rsp_demux_007:sink_valid
	wire  [164:0] axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_data;           // axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:out_data -> rsp_demux_007:sink_data
	wire          axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_ready;          // rsp_demux_007:sink_ready -> axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:out_ready
	wire   [18:0] axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_channel;        // axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:out_channel -> rsp_demux_007:sink_channel
	wire          axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket;  // axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket;    // axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_010_src_valid;                                                        // router_010:src_valid -> dma_yuv_altera_axi_slave_wr_rsp_width_adapter:in_valid
	wire  [128:0] router_010_src_data;                                                         // router_010:src_data -> dma_yuv_altera_axi_slave_wr_rsp_width_adapter:in_data
	wire          router_010_src_ready;                                                        // dma_yuv_altera_axi_slave_wr_rsp_width_adapter:in_ready -> router_010:src_ready
	wire   [18:0] router_010_src_channel;                                                      // router_010:src_channel -> dma_yuv_altera_axi_slave_wr_rsp_width_adapter:in_channel
	wire          router_010_src_startofpacket;                                                // router_010:src_startofpacket -> dma_yuv_altera_axi_slave_wr_rsp_width_adapter:in_startofpacket
	wire          router_010_src_endofpacket;                                                  // router_010:src_endofpacket -> dma_yuv_altera_axi_slave_wr_rsp_width_adapter:in_endofpacket
	wire          dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_valid;                     // dma_yuv_altera_axi_slave_wr_rsp_width_adapter:out_valid -> rsp_demux_008:sink_valid
	wire  [164:0] dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_data;                      // dma_yuv_altera_axi_slave_wr_rsp_width_adapter:out_data -> rsp_demux_008:sink_data
	wire          dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_ready;                     // rsp_demux_008:sink_ready -> dma_yuv_altera_axi_slave_wr_rsp_width_adapter:out_ready
	wire   [18:0] dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_channel;                   // dma_yuv_altera_axi_slave_wr_rsp_width_adapter:out_channel -> rsp_demux_008:sink_channel
	wire          dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket;             // dma_yuv_altera_axi_slave_wr_rsp_width_adapter:out_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket;               // dma_yuv_altera_axi_slave_wr_rsp_width_adapter:out_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_011_src_valid;                                                        // router_011:src_valid -> dma_yuv_altera_axi_slave_rd_rsp_width_adapter:in_valid
	wire  [128:0] router_011_src_data;                                                         // router_011:src_data -> dma_yuv_altera_axi_slave_rd_rsp_width_adapter:in_data
	wire          router_011_src_ready;                                                        // dma_yuv_altera_axi_slave_rd_rsp_width_adapter:in_ready -> router_011:src_ready
	wire   [18:0] router_011_src_channel;                                                      // router_011:src_channel -> dma_yuv_altera_axi_slave_rd_rsp_width_adapter:in_channel
	wire          router_011_src_startofpacket;                                                // router_011:src_startofpacket -> dma_yuv_altera_axi_slave_rd_rsp_width_adapter:in_startofpacket
	wire          router_011_src_endofpacket;                                                  // router_011:src_endofpacket -> dma_yuv_altera_axi_slave_rd_rsp_width_adapter:in_endofpacket
	wire          dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_valid;                     // dma_yuv_altera_axi_slave_rd_rsp_width_adapter:out_valid -> rsp_demux_009:sink_valid
	wire  [164:0] dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_data;                      // dma_yuv_altera_axi_slave_rd_rsp_width_adapter:out_data -> rsp_demux_009:sink_data
	wire          dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_ready;                     // rsp_demux_009:sink_ready -> dma_yuv_altera_axi_slave_rd_rsp_width_adapter:out_ready
	wire   [18:0] dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_channel;                   // dma_yuv_altera_axi_slave_rd_rsp_width_adapter:out_channel -> rsp_demux_009:sink_channel
	wire          dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket;             // dma_yuv_altera_axi_slave_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket;               // dma_yuv_altera_axi_slave_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_012_src_valid;                                                        // router_012:src_valid -> sad_result_low_s1_rsp_width_adapter:in_valid
	wire  [128:0] router_012_src_data;                                                         // router_012:src_data -> sad_result_low_s1_rsp_width_adapter:in_data
	wire          router_012_src_ready;                                                        // sad_result_low_s1_rsp_width_adapter:in_ready -> router_012:src_ready
	wire   [18:0] router_012_src_channel;                                                      // router_012:src_channel -> sad_result_low_s1_rsp_width_adapter:in_channel
	wire          router_012_src_startofpacket;                                                // router_012:src_startofpacket -> sad_result_low_s1_rsp_width_adapter:in_startofpacket
	wire          router_012_src_endofpacket;                                                  // router_012:src_endofpacket -> sad_result_low_s1_rsp_width_adapter:in_endofpacket
	wire          sad_result_low_s1_rsp_width_adapter_src_valid;                               // sad_result_low_s1_rsp_width_adapter:out_valid -> rsp_demux_010:sink_valid
	wire  [164:0] sad_result_low_s1_rsp_width_adapter_src_data;                                // sad_result_low_s1_rsp_width_adapter:out_data -> rsp_demux_010:sink_data
	wire          sad_result_low_s1_rsp_width_adapter_src_ready;                               // rsp_demux_010:sink_ready -> sad_result_low_s1_rsp_width_adapter:out_ready
	wire   [18:0] sad_result_low_s1_rsp_width_adapter_src_channel;                             // sad_result_low_s1_rsp_width_adapter:out_channel -> rsp_demux_010:sink_channel
	wire          sad_result_low_s1_rsp_width_adapter_src_startofpacket;                       // sad_result_low_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          sad_result_low_s1_rsp_width_adapter_src_endofpacket;                         // sad_result_low_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_013_src_valid;                                                        // router_013:src_valid -> sad_result_high_s1_rsp_width_adapter:in_valid
	wire  [128:0] router_013_src_data;                                                         // router_013:src_data -> sad_result_high_s1_rsp_width_adapter:in_data
	wire          router_013_src_ready;                                                        // sad_result_high_s1_rsp_width_adapter:in_ready -> router_013:src_ready
	wire   [18:0] router_013_src_channel;                                                      // router_013:src_channel -> sad_result_high_s1_rsp_width_adapter:in_channel
	wire          router_013_src_startofpacket;                                                // router_013:src_startofpacket -> sad_result_high_s1_rsp_width_adapter:in_startofpacket
	wire          router_013_src_endofpacket;                                                  // router_013:src_endofpacket -> sad_result_high_s1_rsp_width_adapter:in_endofpacket
	wire          sad_result_high_s1_rsp_width_adapter_src_valid;                              // sad_result_high_s1_rsp_width_adapter:out_valid -> rsp_demux_011:sink_valid
	wire  [164:0] sad_result_high_s1_rsp_width_adapter_src_data;                               // sad_result_high_s1_rsp_width_adapter:out_data -> rsp_demux_011:sink_data
	wire          sad_result_high_s1_rsp_width_adapter_src_ready;                              // rsp_demux_011:sink_ready -> sad_result_high_s1_rsp_width_adapter:out_ready
	wire   [18:0] sad_result_high_s1_rsp_width_adapter_src_channel;                            // sad_result_high_s1_rsp_width_adapter:out_channel -> rsp_demux_011:sink_channel
	wire          sad_result_high_s1_rsp_width_adapter_src_startofpacket;                      // sad_result_high_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          sad_result_high_s1_rsp_width_adapter_src_endofpacket;                        // sad_result_high_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_014_src_valid;                                                        // router_014:src_valid -> result_ready_s1_rsp_width_adapter:in_valid
	wire  [128:0] router_014_src_data;                                                         // router_014:src_data -> result_ready_s1_rsp_width_adapter:in_data
	wire          router_014_src_ready;                                                        // result_ready_s1_rsp_width_adapter:in_ready -> router_014:src_ready
	wire   [18:0] router_014_src_channel;                                                      // router_014:src_channel -> result_ready_s1_rsp_width_adapter:in_channel
	wire          router_014_src_startofpacket;                                                // router_014:src_startofpacket -> result_ready_s1_rsp_width_adapter:in_startofpacket
	wire          router_014_src_endofpacket;                                                  // router_014:src_endofpacket -> result_ready_s1_rsp_width_adapter:in_endofpacket
	wire          result_ready_s1_rsp_width_adapter_src_valid;                                 // result_ready_s1_rsp_width_adapter:out_valid -> rsp_demux_012:sink_valid
	wire  [164:0] result_ready_s1_rsp_width_adapter_src_data;                                  // result_ready_s1_rsp_width_adapter:out_data -> rsp_demux_012:sink_data
	wire          result_ready_s1_rsp_width_adapter_src_ready;                                 // rsp_demux_012:sink_ready -> result_ready_s1_rsp_width_adapter:out_ready
	wire   [18:0] result_ready_s1_rsp_width_adapter_src_channel;                               // result_ready_s1_rsp_width_adapter:out_channel -> rsp_demux_012:sink_channel
	wire          result_ready_s1_rsp_width_adapter_src_startofpacket;                         // result_ready_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          result_ready_s1_rsp_width_adapter_src_endofpacket;                           // result_ready_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_015_src_valid;                                                        // router_015:src_valid -> lcu_loaded_s1_rsp_width_adapter:in_valid
	wire  [128:0] router_015_src_data;                                                         // router_015:src_data -> lcu_loaded_s1_rsp_width_adapter:in_data
	wire          router_015_src_ready;                                                        // lcu_loaded_s1_rsp_width_adapter:in_ready -> router_015:src_ready
	wire   [18:0] router_015_src_channel;                                                      // router_015:src_channel -> lcu_loaded_s1_rsp_width_adapter:in_channel
	wire          router_015_src_startofpacket;                                                // router_015:src_startofpacket -> lcu_loaded_s1_rsp_width_adapter:in_startofpacket
	wire          router_015_src_endofpacket;                                                  // router_015:src_endofpacket -> lcu_loaded_s1_rsp_width_adapter:in_endofpacket
	wire          lcu_loaded_s1_rsp_width_adapter_src_valid;                                   // lcu_loaded_s1_rsp_width_adapter:out_valid -> rsp_demux_013:sink_valid
	wire  [164:0] lcu_loaded_s1_rsp_width_adapter_src_data;                                    // lcu_loaded_s1_rsp_width_adapter:out_data -> rsp_demux_013:sink_data
	wire          lcu_loaded_s1_rsp_width_adapter_src_ready;                                   // rsp_demux_013:sink_ready -> lcu_loaded_s1_rsp_width_adapter:out_ready
	wire   [18:0] lcu_loaded_s1_rsp_width_adapter_src_channel;                                 // lcu_loaded_s1_rsp_width_adapter:out_channel -> rsp_demux_013:sink_channel
	wire          lcu_loaded_s1_rsp_width_adapter_src_startofpacket;                           // lcu_loaded_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          lcu_loaded_s1_rsp_width_adapter_src_endofpacket;                             // lcu_loaded_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_016_src_valid;                                                        // router_016:src_valid -> lambda_loaded_s1_rsp_width_adapter:in_valid
	wire  [128:0] router_016_src_data;                                                         // router_016:src_data -> lambda_loaded_s1_rsp_width_adapter:in_data
	wire          router_016_src_ready;                                                        // lambda_loaded_s1_rsp_width_adapter:in_ready -> router_016:src_ready
	wire   [18:0] router_016_src_channel;                                                      // router_016:src_channel -> lambda_loaded_s1_rsp_width_adapter:in_channel
	wire          router_016_src_startofpacket;                                                // router_016:src_startofpacket -> lambda_loaded_s1_rsp_width_adapter:in_startofpacket
	wire          router_016_src_endofpacket;                                                  // router_016:src_endofpacket -> lambda_loaded_s1_rsp_width_adapter:in_endofpacket
	wire          lambda_loaded_s1_rsp_width_adapter_src_valid;                                // lambda_loaded_s1_rsp_width_adapter:out_valid -> rsp_demux_014:sink_valid
	wire  [164:0] lambda_loaded_s1_rsp_width_adapter_src_data;                                 // lambda_loaded_s1_rsp_width_adapter:out_data -> rsp_demux_014:sink_data
	wire          lambda_loaded_s1_rsp_width_adapter_src_ready;                                // rsp_demux_014:sink_ready -> lambda_loaded_s1_rsp_width_adapter:out_ready
	wire   [18:0] lambda_loaded_s1_rsp_width_adapter_src_channel;                              // lambda_loaded_s1_rsp_width_adapter:out_channel -> rsp_demux_014:sink_channel
	wire          lambda_loaded_s1_rsp_width_adapter_src_startofpacket;                        // lambda_loaded_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          lambda_loaded_s1_rsp_width_adapter_src_endofpacket;                          // lambda_loaded_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_017_src_valid;                                                        // router_017:src_valid -> camera_control_oc_s1_rsp_width_adapter:in_valid
	wire  [110:0] router_017_src_data;                                                         // router_017:src_data -> camera_control_oc_s1_rsp_width_adapter:in_data
	wire          router_017_src_ready;                                                        // camera_control_oc_s1_rsp_width_adapter:in_ready -> router_017:src_ready
	wire   [18:0] router_017_src_channel;                                                      // router_017:src_channel -> camera_control_oc_s1_rsp_width_adapter:in_channel
	wire          router_017_src_startofpacket;                                                // router_017:src_startofpacket -> camera_control_oc_s1_rsp_width_adapter:in_startofpacket
	wire          router_017_src_endofpacket;                                                  // router_017:src_endofpacket -> camera_control_oc_s1_rsp_width_adapter:in_endofpacket
	wire          camera_control_oc_s1_rsp_width_adapter_src_valid;                            // camera_control_oc_s1_rsp_width_adapter:out_valid -> rsp_demux_015:sink_valid
	wire  [164:0] camera_control_oc_s1_rsp_width_adapter_src_data;                             // camera_control_oc_s1_rsp_width_adapter:out_data -> rsp_demux_015:sink_data
	wire          camera_control_oc_s1_rsp_width_adapter_src_ready;                            // rsp_demux_015:sink_ready -> camera_control_oc_s1_rsp_width_adapter:out_ready
	wire   [18:0] camera_control_oc_s1_rsp_width_adapter_src_channel;                          // camera_control_oc_s1_rsp_width_adapter:out_channel -> rsp_demux_015:sink_channel
	wire          camera_control_oc_s1_rsp_width_adapter_src_startofpacket;                    // camera_control_oc_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          camera_control_oc_s1_rsp_width_adapter_src_endofpacket;                      // camera_control_oc_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_018_src_valid;                                                        // router_018:src_valid -> configure_camera_s1_rsp_width_adapter:in_valid
	wire  [128:0] router_018_src_data;                                                         // router_018:src_data -> configure_camera_s1_rsp_width_adapter:in_data
	wire          router_018_src_ready;                                                        // configure_camera_s1_rsp_width_adapter:in_ready -> router_018:src_ready
	wire   [18:0] router_018_src_channel;                                                      // router_018:src_channel -> configure_camera_s1_rsp_width_adapter:in_channel
	wire          router_018_src_startofpacket;                                                // router_018:src_startofpacket -> configure_camera_s1_rsp_width_adapter:in_startofpacket
	wire          router_018_src_endofpacket;                                                  // router_018:src_endofpacket -> configure_camera_s1_rsp_width_adapter:in_endofpacket
	wire          configure_camera_s1_rsp_width_adapter_src_valid;                             // configure_camera_s1_rsp_width_adapter:out_valid -> rsp_demux_016:sink_valid
	wire  [164:0] configure_camera_s1_rsp_width_adapter_src_data;                              // configure_camera_s1_rsp_width_adapter:out_data -> rsp_demux_016:sink_data
	wire          configure_camera_s1_rsp_width_adapter_src_ready;                             // rsp_demux_016:sink_ready -> configure_camera_s1_rsp_width_adapter:out_ready
	wire   [18:0] configure_camera_s1_rsp_width_adapter_src_channel;                           // configure_camera_s1_rsp_width_adapter:out_channel -> rsp_demux_016:sink_channel
	wire          configure_camera_s1_rsp_width_adapter_src_startofpacket;                     // configure_camera_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          configure_camera_s1_rsp_width_adapter_src_endofpacket;                       // configure_camera_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_019_src_valid;                                                        // router_019:src_valid -> yuv_ctrl_s1_rsp_width_adapter:in_valid
	wire  [128:0] router_019_src_data;                                                         // router_019:src_data -> yuv_ctrl_s1_rsp_width_adapter:in_data
	wire          router_019_src_ready;                                                        // yuv_ctrl_s1_rsp_width_adapter:in_ready -> router_019:src_ready
	wire   [18:0] router_019_src_channel;                                                      // router_019:src_channel -> yuv_ctrl_s1_rsp_width_adapter:in_channel
	wire          router_019_src_startofpacket;                                                // router_019:src_startofpacket -> yuv_ctrl_s1_rsp_width_adapter:in_startofpacket
	wire          router_019_src_endofpacket;                                                  // router_019:src_endofpacket -> yuv_ctrl_s1_rsp_width_adapter:in_endofpacket
	wire          yuv_ctrl_s1_rsp_width_adapter_src_valid;                                     // yuv_ctrl_s1_rsp_width_adapter:out_valid -> rsp_demux_017:sink_valid
	wire  [164:0] yuv_ctrl_s1_rsp_width_adapter_src_data;                                      // yuv_ctrl_s1_rsp_width_adapter:out_data -> rsp_demux_017:sink_data
	wire          yuv_ctrl_s1_rsp_width_adapter_src_ready;                                     // rsp_demux_017:sink_ready -> yuv_ctrl_s1_rsp_width_adapter:out_ready
	wire   [18:0] yuv_ctrl_s1_rsp_width_adapter_src_channel;                                   // yuv_ctrl_s1_rsp_width_adapter:out_channel -> rsp_demux_017:sink_channel
	wire          yuv_ctrl_s1_rsp_width_adapter_src_startofpacket;                             // yuv_ctrl_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          yuv_ctrl_s1_rsp_width_adapter_src_endofpacket;                               // yuv_ctrl_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_020_src_valid;                                                        // router_020:src_valid -> yuv_status_s1_rsp_width_adapter:in_valid
	wire  [128:0] router_020_src_data;                                                         // router_020:src_data -> yuv_status_s1_rsp_width_adapter:in_data
	wire          router_020_src_ready;                                                        // yuv_status_s1_rsp_width_adapter:in_ready -> router_020:src_ready
	wire   [18:0] router_020_src_channel;                                                      // router_020:src_channel -> yuv_status_s1_rsp_width_adapter:in_channel
	wire          router_020_src_startofpacket;                                                // router_020:src_startofpacket -> yuv_status_s1_rsp_width_adapter:in_startofpacket
	wire          router_020_src_endofpacket;                                                  // router_020:src_endofpacket -> yuv_status_s1_rsp_width_adapter:in_endofpacket
	wire          yuv_status_s1_rsp_width_adapter_src_valid;                                   // yuv_status_s1_rsp_width_adapter:out_valid -> rsp_demux_018:sink_valid
	wire  [164:0] yuv_status_s1_rsp_width_adapter_src_data;                                    // yuv_status_s1_rsp_width_adapter:out_data -> rsp_demux_018:sink_data
	wire          yuv_status_s1_rsp_width_adapter_src_ready;                                   // rsp_demux_018:sink_ready -> yuv_status_s1_rsp_width_adapter:out_ready
	wire   [18:0] yuv_status_s1_rsp_width_adapter_src_channel;                                 // yuv_status_s1_rsp_width_adapter:out_channel -> rsp_demux_018:sink_channel
	wire          yuv_status_s1_rsp_width_adapter_src_startofpacket;                           // yuv_status_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          yuv_status_s1_rsp_width_adapter_src_endofpacket;                             // yuv_status_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          cmd_mux_src_valid;                                                           // cmd_mux:src_valid -> acc_config_altera_axi_slave_wr_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_src_data;                                                            // cmd_mux:src_data -> acc_config_altera_axi_slave_wr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                           // acc_config_altera_axi_slave_wr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [18:0] cmd_mux_src_channel;                                                         // cmd_mux:src_channel -> acc_config_altera_axi_slave_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                   // cmd_mux:src_startofpacket -> acc_config_altera_axi_slave_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                     // cmd_mux:src_endofpacket -> acc_config_altera_axi_slave_wr_cmd_width_adapter:in_endofpacket
	wire          acc_config_altera_axi_slave_wr_cmd_width_adapter_src_valid;                  // acc_config_altera_axi_slave_wr_cmd_width_adapter:out_valid -> acc_config_altera_axi_slave_wr_burst_adapter:sink0_valid
	wire  [128:0] acc_config_altera_axi_slave_wr_cmd_width_adapter_src_data;                   // acc_config_altera_axi_slave_wr_cmd_width_adapter:out_data -> acc_config_altera_axi_slave_wr_burst_adapter:sink0_data
	wire          acc_config_altera_axi_slave_wr_cmd_width_adapter_src_ready;                  // acc_config_altera_axi_slave_wr_burst_adapter:sink0_ready -> acc_config_altera_axi_slave_wr_cmd_width_adapter:out_ready
	wire   [18:0] acc_config_altera_axi_slave_wr_cmd_width_adapter_src_channel;                // acc_config_altera_axi_slave_wr_cmd_width_adapter:out_channel -> acc_config_altera_axi_slave_wr_burst_adapter:sink0_channel
	wire          acc_config_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket;          // acc_config_altera_axi_slave_wr_cmd_width_adapter:out_startofpacket -> acc_config_altera_axi_slave_wr_burst_adapter:sink0_startofpacket
	wire          acc_config_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket;            // acc_config_altera_axi_slave_wr_cmd_width_adapter:out_endofpacket -> acc_config_altera_axi_slave_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                       // cmd_mux_001:src_valid -> acc_config_altera_axi_slave_rd_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_001_src_data;                                                        // cmd_mux_001:src_data -> acc_config_altera_axi_slave_rd_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                       // acc_config_altera_axi_slave_rd_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [18:0] cmd_mux_001_src_channel;                                                     // cmd_mux_001:src_channel -> acc_config_altera_axi_slave_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                               // cmd_mux_001:src_startofpacket -> acc_config_altera_axi_slave_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                 // cmd_mux_001:src_endofpacket -> acc_config_altera_axi_slave_rd_cmd_width_adapter:in_endofpacket
	wire          acc_config_altera_axi_slave_rd_cmd_width_adapter_src_valid;                  // acc_config_altera_axi_slave_rd_cmd_width_adapter:out_valid -> acc_config_altera_axi_slave_rd_burst_adapter:sink0_valid
	wire  [128:0] acc_config_altera_axi_slave_rd_cmd_width_adapter_src_data;                   // acc_config_altera_axi_slave_rd_cmd_width_adapter:out_data -> acc_config_altera_axi_slave_rd_burst_adapter:sink0_data
	wire          acc_config_altera_axi_slave_rd_cmd_width_adapter_src_ready;                  // acc_config_altera_axi_slave_rd_burst_adapter:sink0_ready -> acc_config_altera_axi_slave_rd_cmd_width_adapter:out_ready
	wire   [18:0] acc_config_altera_axi_slave_rd_cmd_width_adapter_src_channel;                // acc_config_altera_axi_slave_rd_cmd_width_adapter:out_channel -> acc_config_altera_axi_slave_rd_burst_adapter:sink0_channel
	wire          acc_config_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket;          // acc_config_altera_axi_slave_rd_cmd_width_adapter:out_startofpacket -> acc_config_altera_axi_slave_rd_burst_adapter:sink0_startofpacket
	wire          acc_config_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket;            // acc_config_altera_axi_slave_rd_cmd_width_adapter:out_endofpacket -> acc_config_altera_axi_slave_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                       // cmd_mux_002:src_valid -> axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_002_src_data;                                                        // cmd_mux_002:src_data -> axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                                       // axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire   [18:0] cmd_mux_002_src_channel;                                                     // cmd_mux_002:src_channel -> axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                               // cmd_mux_002:src_startofpacket -> axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                 // cmd_mux_002:src_endofpacket -> axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:in_endofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_valid;         // axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:out_valid -> axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:sink0_valid
	wire  [128:0] axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_data;          // axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:out_data -> axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:sink0_data
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_ready;         // axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:sink0_ready -> axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:out_ready
	wire   [18:0] axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_channel;       // axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:out_channel -> axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:sink0_channel
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket; // axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:out_startofpacket -> axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:sink0_startofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket;   // axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter:out_endofpacket -> axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                       // cmd_mux_003:src_valid -> axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_003_src_data;                                                        // cmd_mux_003:src_data -> axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                       // axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire   [18:0] cmd_mux_003_src_channel;                                                     // cmd_mux_003:src_channel -> axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                               // cmd_mux_003:src_startofpacket -> axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                 // cmd_mux_003:src_endofpacket -> axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:in_endofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_valid;         // axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:out_valid -> axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:sink0_valid
	wire  [128:0] axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_data;          // axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:out_data -> axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:sink0_data
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_ready;         // axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:sink0_ready -> axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:out_ready
	wire   [18:0] axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_channel;       // axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:out_channel -> axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:sink0_channel
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket; // axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:out_startofpacket -> axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:sink0_startofpacket
	wire          axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket;   // axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter:out_endofpacket -> axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                       // cmd_mux_004:src_valid -> axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_004_src_data;                                                        // cmd_mux_004:src_data -> axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                                       // axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire   [18:0] cmd_mux_004_src_channel;                                                     // cmd_mux_004:src_channel -> axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                               // cmd_mux_004:src_startofpacket -> axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                 // cmd_mux_004:src_endofpacket -> axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:in_endofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_valid;         // axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:out_valid -> axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:sink0_valid
	wire  [128:0] axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_data;          // axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:out_data -> axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:sink0_data
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_ready;         // axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:sink0_ready -> axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:out_ready
	wire   [18:0] axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_channel;       // axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:out_channel -> axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:sink0_channel
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket; // axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:out_startofpacket -> axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:sink0_startofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket;   // axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter:out_endofpacket -> axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                                       // cmd_mux_005:src_valid -> axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_005_src_data;                                                        // cmd_mux_005:src_data -> axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:in_data
	wire          cmd_mux_005_src_ready;                                                       // axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:in_ready -> cmd_mux_005:src_ready
	wire   [18:0] cmd_mux_005_src_channel;                                                     // cmd_mux_005:src_channel -> axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_005_src_startofpacket;                                               // cmd_mux_005:src_startofpacket -> axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                 // cmd_mux_005:src_endofpacket -> axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:in_endofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_valid;         // axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:out_valid -> axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:sink0_valid
	wire  [128:0] axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_data;          // axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:out_data -> axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:sink0_data
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_ready;         // axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:sink0_ready -> axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:out_ready
	wire   [18:0] axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_channel;       // axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:out_channel -> axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:sink0_channel
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket; // axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:out_startofpacket -> axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:sink0_startofpacket
	wire          axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket;   // axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter:out_endofpacket -> axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                                       // cmd_mux_006:src_valid -> axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_006_src_data;                                                        // cmd_mux_006:src_data -> axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:in_data
	wire          cmd_mux_006_src_ready;                                                       // axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:in_ready -> cmd_mux_006:src_ready
	wire   [18:0] cmd_mux_006_src_channel;                                                     // cmd_mux_006:src_channel -> axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_006_src_startofpacket;                                               // cmd_mux_006:src_startofpacket -> axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                 // cmd_mux_006:src_endofpacket -> axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:in_endofpacket
	wire          axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_valid;          // axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:out_valid -> axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:sink0_valid
	wire  [128:0] axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_data;           // axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:out_data -> axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:sink0_data
	wire          axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_ready;          // axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:sink0_ready -> axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:out_ready
	wire   [18:0] axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_channel;        // axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:out_channel -> axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:sink0_channel
	wire          axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket;  // axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:out_startofpacket -> axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:sink0_startofpacket
	wire          axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket;    // axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter:out_endofpacket -> axi_dma_orig_block_altera_axi_slave_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_007_src_valid;                                                       // cmd_mux_007:src_valid -> axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_007_src_data;                                                        // cmd_mux_007:src_data -> axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:in_data
	wire          cmd_mux_007_src_ready;                                                       // axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:in_ready -> cmd_mux_007:src_ready
	wire   [18:0] cmd_mux_007_src_channel;                                                     // cmd_mux_007:src_channel -> axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_007_src_startofpacket;                                               // cmd_mux_007:src_startofpacket -> axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                 // cmd_mux_007:src_endofpacket -> axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:in_endofpacket
	wire          axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_valid;          // axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:out_valid -> axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:sink0_valid
	wire  [128:0] axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_data;           // axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:out_data -> axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:sink0_data
	wire          axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_ready;          // axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:sink0_ready -> axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:out_ready
	wire   [18:0] axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_channel;        // axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:out_channel -> axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:sink0_channel
	wire          axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket;  // axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:out_startofpacket -> axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:sink0_startofpacket
	wire          axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket;    // axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter:out_endofpacket -> axi_dma_orig_block_altera_axi_slave_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_008_src_valid;                                                       // cmd_mux_008:src_valid -> dma_yuv_altera_axi_slave_wr_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_008_src_data;                                                        // cmd_mux_008:src_data -> dma_yuv_altera_axi_slave_wr_cmd_width_adapter:in_data
	wire          cmd_mux_008_src_ready;                                                       // dma_yuv_altera_axi_slave_wr_cmd_width_adapter:in_ready -> cmd_mux_008:src_ready
	wire   [18:0] cmd_mux_008_src_channel;                                                     // cmd_mux_008:src_channel -> dma_yuv_altera_axi_slave_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_008_src_startofpacket;                                               // cmd_mux_008:src_startofpacket -> dma_yuv_altera_axi_slave_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                 // cmd_mux_008:src_endofpacket -> dma_yuv_altera_axi_slave_wr_cmd_width_adapter:in_endofpacket
	wire          dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_valid;                     // dma_yuv_altera_axi_slave_wr_cmd_width_adapter:out_valid -> dma_yuv_altera_axi_slave_wr_burst_adapter:sink0_valid
	wire  [128:0] dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_data;                      // dma_yuv_altera_axi_slave_wr_cmd_width_adapter:out_data -> dma_yuv_altera_axi_slave_wr_burst_adapter:sink0_data
	wire          dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_ready;                     // dma_yuv_altera_axi_slave_wr_burst_adapter:sink0_ready -> dma_yuv_altera_axi_slave_wr_cmd_width_adapter:out_ready
	wire   [18:0] dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_channel;                   // dma_yuv_altera_axi_slave_wr_cmd_width_adapter:out_channel -> dma_yuv_altera_axi_slave_wr_burst_adapter:sink0_channel
	wire          dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket;             // dma_yuv_altera_axi_slave_wr_cmd_width_adapter:out_startofpacket -> dma_yuv_altera_axi_slave_wr_burst_adapter:sink0_startofpacket
	wire          dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket;               // dma_yuv_altera_axi_slave_wr_cmd_width_adapter:out_endofpacket -> dma_yuv_altera_axi_slave_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                                       // cmd_mux_009:src_valid -> dma_yuv_altera_axi_slave_rd_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_009_src_data;                                                        // cmd_mux_009:src_data -> dma_yuv_altera_axi_slave_rd_cmd_width_adapter:in_data
	wire          cmd_mux_009_src_ready;                                                       // dma_yuv_altera_axi_slave_rd_cmd_width_adapter:in_ready -> cmd_mux_009:src_ready
	wire   [18:0] cmd_mux_009_src_channel;                                                     // cmd_mux_009:src_channel -> dma_yuv_altera_axi_slave_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_009_src_startofpacket;                                               // cmd_mux_009:src_startofpacket -> dma_yuv_altera_axi_slave_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                 // cmd_mux_009:src_endofpacket -> dma_yuv_altera_axi_slave_rd_cmd_width_adapter:in_endofpacket
	wire          dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_valid;                     // dma_yuv_altera_axi_slave_rd_cmd_width_adapter:out_valid -> dma_yuv_altera_axi_slave_rd_burst_adapter:sink0_valid
	wire  [128:0] dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_data;                      // dma_yuv_altera_axi_slave_rd_cmd_width_adapter:out_data -> dma_yuv_altera_axi_slave_rd_burst_adapter:sink0_data
	wire          dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_ready;                     // dma_yuv_altera_axi_slave_rd_burst_adapter:sink0_ready -> dma_yuv_altera_axi_slave_rd_cmd_width_adapter:out_ready
	wire   [18:0] dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_channel;                   // dma_yuv_altera_axi_slave_rd_cmd_width_adapter:out_channel -> dma_yuv_altera_axi_slave_rd_burst_adapter:sink0_channel
	wire          dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket;             // dma_yuv_altera_axi_slave_rd_cmd_width_adapter:out_startofpacket -> dma_yuv_altera_axi_slave_rd_burst_adapter:sink0_startofpacket
	wire          dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket;               // dma_yuv_altera_axi_slave_rd_cmd_width_adapter:out_endofpacket -> dma_yuv_altera_axi_slave_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_010_src_valid;                                                       // cmd_mux_010:src_valid -> sad_result_low_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_010_src_data;                                                        // cmd_mux_010:src_data -> sad_result_low_s1_cmd_width_adapter:in_data
	wire          cmd_mux_010_src_ready;                                                       // sad_result_low_s1_cmd_width_adapter:in_ready -> cmd_mux_010:src_ready
	wire   [18:0] cmd_mux_010_src_channel;                                                     // cmd_mux_010:src_channel -> sad_result_low_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_010_src_startofpacket;                                               // cmd_mux_010:src_startofpacket -> sad_result_low_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                 // cmd_mux_010:src_endofpacket -> sad_result_low_s1_cmd_width_adapter:in_endofpacket
	wire          sad_result_low_s1_cmd_width_adapter_src_valid;                               // sad_result_low_s1_cmd_width_adapter:out_valid -> sad_result_low_s1_burst_adapter:sink0_valid
	wire  [128:0] sad_result_low_s1_cmd_width_adapter_src_data;                                // sad_result_low_s1_cmd_width_adapter:out_data -> sad_result_low_s1_burst_adapter:sink0_data
	wire          sad_result_low_s1_cmd_width_adapter_src_ready;                               // sad_result_low_s1_burst_adapter:sink0_ready -> sad_result_low_s1_cmd_width_adapter:out_ready
	wire   [18:0] sad_result_low_s1_cmd_width_adapter_src_channel;                             // sad_result_low_s1_cmd_width_adapter:out_channel -> sad_result_low_s1_burst_adapter:sink0_channel
	wire          sad_result_low_s1_cmd_width_adapter_src_startofpacket;                       // sad_result_low_s1_cmd_width_adapter:out_startofpacket -> sad_result_low_s1_burst_adapter:sink0_startofpacket
	wire          sad_result_low_s1_cmd_width_adapter_src_endofpacket;                         // sad_result_low_s1_cmd_width_adapter:out_endofpacket -> sad_result_low_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                                       // cmd_mux_011:src_valid -> sad_result_high_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_011_src_data;                                                        // cmd_mux_011:src_data -> sad_result_high_s1_cmd_width_adapter:in_data
	wire          cmd_mux_011_src_ready;                                                       // sad_result_high_s1_cmd_width_adapter:in_ready -> cmd_mux_011:src_ready
	wire   [18:0] cmd_mux_011_src_channel;                                                     // cmd_mux_011:src_channel -> sad_result_high_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_011_src_startofpacket;                                               // cmd_mux_011:src_startofpacket -> sad_result_high_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                 // cmd_mux_011:src_endofpacket -> sad_result_high_s1_cmd_width_adapter:in_endofpacket
	wire          sad_result_high_s1_cmd_width_adapter_src_valid;                              // sad_result_high_s1_cmd_width_adapter:out_valid -> sad_result_high_s1_burst_adapter:sink0_valid
	wire  [128:0] sad_result_high_s1_cmd_width_adapter_src_data;                               // sad_result_high_s1_cmd_width_adapter:out_data -> sad_result_high_s1_burst_adapter:sink0_data
	wire          sad_result_high_s1_cmd_width_adapter_src_ready;                              // sad_result_high_s1_burst_adapter:sink0_ready -> sad_result_high_s1_cmd_width_adapter:out_ready
	wire   [18:0] sad_result_high_s1_cmd_width_adapter_src_channel;                            // sad_result_high_s1_cmd_width_adapter:out_channel -> sad_result_high_s1_burst_adapter:sink0_channel
	wire          sad_result_high_s1_cmd_width_adapter_src_startofpacket;                      // sad_result_high_s1_cmd_width_adapter:out_startofpacket -> sad_result_high_s1_burst_adapter:sink0_startofpacket
	wire          sad_result_high_s1_cmd_width_adapter_src_endofpacket;                        // sad_result_high_s1_cmd_width_adapter:out_endofpacket -> sad_result_high_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_012_src_valid;                                                       // cmd_mux_012:src_valid -> result_ready_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_012_src_data;                                                        // cmd_mux_012:src_data -> result_ready_s1_cmd_width_adapter:in_data
	wire          cmd_mux_012_src_ready;                                                       // result_ready_s1_cmd_width_adapter:in_ready -> cmd_mux_012:src_ready
	wire   [18:0] cmd_mux_012_src_channel;                                                     // cmd_mux_012:src_channel -> result_ready_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_012_src_startofpacket;                                               // cmd_mux_012:src_startofpacket -> result_ready_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                 // cmd_mux_012:src_endofpacket -> result_ready_s1_cmd_width_adapter:in_endofpacket
	wire          result_ready_s1_cmd_width_adapter_src_valid;                                 // result_ready_s1_cmd_width_adapter:out_valid -> result_ready_s1_burst_adapter:sink0_valid
	wire  [128:0] result_ready_s1_cmd_width_adapter_src_data;                                  // result_ready_s1_cmd_width_adapter:out_data -> result_ready_s1_burst_adapter:sink0_data
	wire          result_ready_s1_cmd_width_adapter_src_ready;                                 // result_ready_s1_burst_adapter:sink0_ready -> result_ready_s1_cmd_width_adapter:out_ready
	wire   [18:0] result_ready_s1_cmd_width_adapter_src_channel;                               // result_ready_s1_cmd_width_adapter:out_channel -> result_ready_s1_burst_adapter:sink0_channel
	wire          result_ready_s1_cmd_width_adapter_src_startofpacket;                         // result_ready_s1_cmd_width_adapter:out_startofpacket -> result_ready_s1_burst_adapter:sink0_startofpacket
	wire          result_ready_s1_cmd_width_adapter_src_endofpacket;                           // result_ready_s1_cmd_width_adapter:out_endofpacket -> result_ready_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_013_src_valid;                                                       // cmd_mux_013:src_valid -> lcu_loaded_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_013_src_data;                                                        // cmd_mux_013:src_data -> lcu_loaded_s1_cmd_width_adapter:in_data
	wire          cmd_mux_013_src_ready;                                                       // lcu_loaded_s1_cmd_width_adapter:in_ready -> cmd_mux_013:src_ready
	wire   [18:0] cmd_mux_013_src_channel;                                                     // cmd_mux_013:src_channel -> lcu_loaded_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_013_src_startofpacket;                                               // cmd_mux_013:src_startofpacket -> lcu_loaded_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                 // cmd_mux_013:src_endofpacket -> lcu_loaded_s1_cmd_width_adapter:in_endofpacket
	wire          lcu_loaded_s1_cmd_width_adapter_src_valid;                                   // lcu_loaded_s1_cmd_width_adapter:out_valid -> lcu_loaded_s1_burst_adapter:sink0_valid
	wire  [128:0] lcu_loaded_s1_cmd_width_adapter_src_data;                                    // lcu_loaded_s1_cmd_width_adapter:out_data -> lcu_loaded_s1_burst_adapter:sink0_data
	wire          lcu_loaded_s1_cmd_width_adapter_src_ready;                                   // lcu_loaded_s1_burst_adapter:sink0_ready -> lcu_loaded_s1_cmd_width_adapter:out_ready
	wire   [18:0] lcu_loaded_s1_cmd_width_adapter_src_channel;                                 // lcu_loaded_s1_cmd_width_adapter:out_channel -> lcu_loaded_s1_burst_adapter:sink0_channel
	wire          lcu_loaded_s1_cmd_width_adapter_src_startofpacket;                           // lcu_loaded_s1_cmd_width_adapter:out_startofpacket -> lcu_loaded_s1_burst_adapter:sink0_startofpacket
	wire          lcu_loaded_s1_cmd_width_adapter_src_endofpacket;                             // lcu_loaded_s1_cmd_width_adapter:out_endofpacket -> lcu_loaded_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_014_src_valid;                                                       // cmd_mux_014:src_valid -> lambda_loaded_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_014_src_data;                                                        // cmd_mux_014:src_data -> lambda_loaded_s1_cmd_width_adapter:in_data
	wire          cmd_mux_014_src_ready;                                                       // lambda_loaded_s1_cmd_width_adapter:in_ready -> cmd_mux_014:src_ready
	wire   [18:0] cmd_mux_014_src_channel;                                                     // cmd_mux_014:src_channel -> lambda_loaded_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_014_src_startofpacket;                                               // cmd_mux_014:src_startofpacket -> lambda_loaded_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                 // cmd_mux_014:src_endofpacket -> lambda_loaded_s1_cmd_width_adapter:in_endofpacket
	wire          lambda_loaded_s1_cmd_width_adapter_src_valid;                                // lambda_loaded_s1_cmd_width_adapter:out_valid -> lambda_loaded_s1_burst_adapter:sink0_valid
	wire  [128:0] lambda_loaded_s1_cmd_width_adapter_src_data;                                 // lambda_loaded_s1_cmd_width_adapter:out_data -> lambda_loaded_s1_burst_adapter:sink0_data
	wire          lambda_loaded_s1_cmd_width_adapter_src_ready;                                // lambda_loaded_s1_burst_adapter:sink0_ready -> lambda_loaded_s1_cmd_width_adapter:out_ready
	wire   [18:0] lambda_loaded_s1_cmd_width_adapter_src_channel;                              // lambda_loaded_s1_cmd_width_adapter:out_channel -> lambda_loaded_s1_burst_adapter:sink0_channel
	wire          lambda_loaded_s1_cmd_width_adapter_src_startofpacket;                        // lambda_loaded_s1_cmd_width_adapter:out_startofpacket -> lambda_loaded_s1_burst_adapter:sink0_startofpacket
	wire          lambda_loaded_s1_cmd_width_adapter_src_endofpacket;                          // lambda_loaded_s1_cmd_width_adapter:out_endofpacket -> lambda_loaded_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_015_src_valid;                                                       // cmd_mux_015:src_valid -> camera_control_oc_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_015_src_data;                                                        // cmd_mux_015:src_data -> camera_control_oc_s1_cmd_width_adapter:in_data
	wire          cmd_mux_015_src_ready;                                                       // camera_control_oc_s1_cmd_width_adapter:in_ready -> cmd_mux_015:src_ready
	wire   [18:0] cmd_mux_015_src_channel;                                                     // cmd_mux_015:src_channel -> camera_control_oc_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_015_src_startofpacket;                                               // cmd_mux_015:src_startofpacket -> camera_control_oc_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                 // cmd_mux_015:src_endofpacket -> camera_control_oc_s1_cmd_width_adapter:in_endofpacket
	wire          camera_control_oc_s1_cmd_width_adapter_src_valid;                            // camera_control_oc_s1_cmd_width_adapter:out_valid -> camera_control_oc_s1_burst_adapter:sink0_valid
	wire  [110:0] camera_control_oc_s1_cmd_width_adapter_src_data;                             // camera_control_oc_s1_cmd_width_adapter:out_data -> camera_control_oc_s1_burst_adapter:sink0_data
	wire          camera_control_oc_s1_cmd_width_adapter_src_ready;                            // camera_control_oc_s1_burst_adapter:sink0_ready -> camera_control_oc_s1_cmd_width_adapter:out_ready
	wire   [18:0] camera_control_oc_s1_cmd_width_adapter_src_channel;                          // camera_control_oc_s1_cmd_width_adapter:out_channel -> camera_control_oc_s1_burst_adapter:sink0_channel
	wire          camera_control_oc_s1_cmd_width_adapter_src_startofpacket;                    // camera_control_oc_s1_cmd_width_adapter:out_startofpacket -> camera_control_oc_s1_burst_adapter:sink0_startofpacket
	wire          camera_control_oc_s1_cmd_width_adapter_src_endofpacket;                      // camera_control_oc_s1_cmd_width_adapter:out_endofpacket -> camera_control_oc_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_016_src_valid;                                                       // cmd_mux_016:src_valid -> configure_camera_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_016_src_data;                                                        // cmd_mux_016:src_data -> configure_camera_s1_cmd_width_adapter:in_data
	wire          cmd_mux_016_src_ready;                                                       // configure_camera_s1_cmd_width_adapter:in_ready -> cmd_mux_016:src_ready
	wire   [18:0] cmd_mux_016_src_channel;                                                     // cmd_mux_016:src_channel -> configure_camera_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_016_src_startofpacket;                                               // cmd_mux_016:src_startofpacket -> configure_camera_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                 // cmd_mux_016:src_endofpacket -> configure_camera_s1_cmd_width_adapter:in_endofpacket
	wire          configure_camera_s1_cmd_width_adapter_src_valid;                             // configure_camera_s1_cmd_width_adapter:out_valid -> configure_camera_s1_burst_adapter:sink0_valid
	wire  [128:0] configure_camera_s1_cmd_width_adapter_src_data;                              // configure_camera_s1_cmd_width_adapter:out_data -> configure_camera_s1_burst_adapter:sink0_data
	wire          configure_camera_s1_cmd_width_adapter_src_ready;                             // configure_camera_s1_burst_adapter:sink0_ready -> configure_camera_s1_cmd_width_adapter:out_ready
	wire   [18:0] configure_camera_s1_cmd_width_adapter_src_channel;                           // configure_camera_s1_cmd_width_adapter:out_channel -> configure_camera_s1_burst_adapter:sink0_channel
	wire          configure_camera_s1_cmd_width_adapter_src_startofpacket;                     // configure_camera_s1_cmd_width_adapter:out_startofpacket -> configure_camera_s1_burst_adapter:sink0_startofpacket
	wire          configure_camera_s1_cmd_width_adapter_src_endofpacket;                       // configure_camera_s1_cmd_width_adapter:out_endofpacket -> configure_camera_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_017_src_valid;                                                       // cmd_mux_017:src_valid -> yuv_ctrl_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_017_src_data;                                                        // cmd_mux_017:src_data -> yuv_ctrl_s1_cmd_width_adapter:in_data
	wire          cmd_mux_017_src_ready;                                                       // yuv_ctrl_s1_cmd_width_adapter:in_ready -> cmd_mux_017:src_ready
	wire   [18:0] cmd_mux_017_src_channel;                                                     // cmd_mux_017:src_channel -> yuv_ctrl_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_017_src_startofpacket;                                               // cmd_mux_017:src_startofpacket -> yuv_ctrl_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                 // cmd_mux_017:src_endofpacket -> yuv_ctrl_s1_cmd_width_adapter:in_endofpacket
	wire          yuv_ctrl_s1_cmd_width_adapter_src_valid;                                     // yuv_ctrl_s1_cmd_width_adapter:out_valid -> yuv_ctrl_s1_burst_adapter:sink0_valid
	wire  [128:0] yuv_ctrl_s1_cmd_width_adapter_src_data;                                      // yuv_ctrl_s1_cmd_width_adapter:out_data -> yuv_ctrl_s1_burst_adapter:sink0_data
	wire          yuv_ctrl_s1_cmd_width_adapter_src_ready;                                     // yuv_ctrl_s1_burst_adapter:sink0_ready -> yuv_ctrl_s1_cmd_width_adapter:out_ready
	wire   [18:0] yuv_ctrl_s1_cmd_width_adapter_src_channel;                                   // yuv_ctrl_s1_cmd_width_adapter:out_channel -> yuv_ctrl_s1_burst_adapter:sink0_channel
	wire          yuv_ctrl_s1_cmd_width_adapter_src_startofpacket;                             // yuv_ctrl_s1_cmd_width_adapter:out_startofpacket -> yuv_ctrl_s1_burst_adapter:sink0_startofpacket
	wire          yuv_ctrl_s1_cmd_width_adapter_src_endofpacket;                               // yuv_ctrl_s1_cmd_width_adapter:out_endofpacket -> yuv_ctrl_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_018_src_valid;                                                       // cmd_mux_018:src_valid -> yuv_status_s1_cmd_width_adapter:in_valid
	wire  [164:0] cmd_mux_018_src_data;                                                        // cmd_mux_018:src_data -> yuv_status_s1_cmd_width_adapter:in_data
	wire          cmd_mux_018_src_ready;                                                       // yuv_status_s1_cmd_width_adapter:in_ready -> cmd_mux_018:src_ready
	wire   [18:0] cmd_mux_018_src_channel;                                                     // cmd_mux_018:src_channel -> yuv_status_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_018_src_startofpacket;                                               // cmd_mux_018:src_startofpacket -> yuv_status_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                 // cmd_mux_018:src_endofpacket -> yuv_status_s1_cmd_width_adapter:in_endofpacket
	wire          yuv_status_s1_cmd_width_adapter_src_valid;                                   // yuv_status_s1_cmd_width_adapter:out_valid -> yuv_status_s1_burst_adapter:sink0_valid
	wire  [128:0] yuv_status_s1_cmd_width_adapter_src_data;                                    // yuv_status_s1_cmd_width_adapter:out_data -> yuv_status_s1_burst_adapter:sink0_data
	wire          yuv_status_s1_cmd_width_adapter_src_ready;                                   // yuv_status_s1_burst_adapter:sink0_ready -> yuv_status_s1_cmd_width_adapter:out_ready
	wire   [18:0] yuv_status_s1_cmd_width_adapter_src_channel;                                 // yuv_status_s1_cmd_width_adapter:out_channel -> yuv_status_s1_burst_adapter:sink0_channel
	wire          yuv_status_s1_cmd_width_adapter_src_startofpacket;                           // yuv_status_s1_cmd_width_adapter:out_startofpacket -> yuv_status_s1_burst_adapter:sink0_startofpacket
	wire          yuv_status_s1_cmd_width_adapter_src_endofpacket;                             // yuv_status_s1_cmd_width_adapter:out_endofpacket -> yuv_status_s1_burst_adapter:sink0_endofpacket
	wire   [18:0] hps_0_h2f_axi_master_wr_limiter_cmd_valid_data;                              // hps_0_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [18:0] hps_0_h2f_axi_master_rd_limiter_cmd_valid_data;                              // hps_0_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          sad_result_low_s1_agent_rdata_fifo_out_valid;                                // sad_result_low_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sad_result_low_s1_agent_rdata_fifo_out_data;                                 // sad_result_low_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sad_result_low_s1_agent_rdata_fifo_out_ready;                                // avalon_st_adapter:in_0_ready -> sad_result_low_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                               // avalon_st_adapter:out_0_valid -> sad_result_low_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                // avalon_st_adapter:out_0_data -> sad_result_low_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                               // sad_result_low_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                               // avalon_st_adapter:out_0_error -> sad_result_low_s1_agent:rdata_fifo_sink_error
	wire          sad_result_high_s1_agent_rdata_fifo_out_valid;                               // sad_result_high_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sad_result_high_s1_agent_rdata_fifo_out_data;                                // sad_result_high_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sad_result_high_s1_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_001:in_0_ready -> sad_result_high_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                           // avalon_st_adapter_001:out_0_valid -> sad_result_high_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                            // avalon_st_adapter_001:out_0_data -> sad_result_high_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                           // sad_result_high_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                           // avalon_st_adapter_001:out_0_error -> sad_result_high_s1_agent:rdata_fifo_sink_error
	wire          result_ready_s1_agent_rdata_fifo_out_valid;                                  // result_ready_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] result_ready_s1_agent_rdata_fifo_out_data;                                   // result_ready_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          result_ready_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_002:in_0_ready -> result_ready_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                           // avalon_st_adapter_002:out_0_valid -> result_ready_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                            // avalon_st_adapter_002:out_0_data -> result_ready_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                           // result_ready_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                           // avalon_st_adapter_002:out_0_error -> result_ready_s1_agent:rdata_fifo_sink_error
	wire          lcu_loaded_s1_agent_rdata_fifo_out_valid;                                    // lcu_loaded_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] lcu_loaded_s1_agent_rdata_fifo_out_data;                                     // lcu_loaded_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          lcu_loaded_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_003:in_0_ready -> lcu_loaded_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                           // avalon_st_adapter_003:out_0_valid -> lcu_loaded_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                            // avalon_st_adapter_003:out_0_data -> lcu_loaded_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                           // lcu_loaded_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                           // avalon_st_adapter_003:out_0_error -> lcu_loaded_s1_agent:rdata_fifo_sink_error
	wire          lambda_loaded_s1_agent_rdata_fifo_out_valid;                                 // lambda_loaded_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] lambda_loaded_s1_agent_rdata_fifo_out_data;                                  // lambda_loaded_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          lambda_loaded_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_004:in_0_ready -> lambda_loaded_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                           // avalon_st_adapter_004:out_0_valid -> lambda_loaded_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                            // avalon_st_adapter_004:out_0_data -> lambda_loaded_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                           // lambda_loaded_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                           // avalon_st_adapter_004:out_0_error -> lambda_loaded_s1_agent:rdata_fifo_sink_error
	wire          camera_control_oc_s1_agent_rdata_fifo_out_valid;                             // camera_control_oc_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [17:0] camera_control_oc_s1_agent_rdata_fifo_out_data;                              // camera_control_oc_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          camera_control_oc_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_005:in_0_ready -> camera_control_oc_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                           // avalon_st_adapter_005:out_0_valid -> camera_control_oc_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_005_out_0_data;                                            // avalon_st_adapter_005:out_0_data -> camera_control_oc_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                           // camera_control_oc_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                           // avalon_st_adapter_005:out_0_error -> camera_control_oc_s1_agent:rdata_fifo_sink_error
	wire          configure_camera_s1_agent_rdata_fifo_out_valid;                              // configure_camera_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] configure_camera_s1_agent_rdata_fifo_out_data;                               // configure_camera_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          configure_camera_s1_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_006:in_0_ready -> configure_camera_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                           // avalon_st_adapter_006:out_0_valid -> configure_camera_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                            // avalon_st_adapter_006:out_0_data -> configure_camera_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                           // configure_camera_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                           // avalon_st_adapter_006:out_0_error -> configure_camera_s1_agent:rdata_fifo_sink_error
	wire          yuv_ctrl_s1_agent_rdata_fifo_out_valid;                                      // yuv_ctrl_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] yuv_ctrl_s1_agent_rdata_fifo_out_data;                                       // yuv_ctrl_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          yuv_ctrl_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_007:in_0_ready -> yuv_ctrl_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                           // avalon_st_adapter_007:out_0_valid -> yuv_ctrl_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                            // avalon_st_adapter_007:out_0_data -> yuv_ctrl_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                           // yuv_ctrl_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                           // avalon_st_adapter_007:out_0_error -> yuv_ctrl_s1_agent:rdata_fifo_sink_error
	wire          yuv_status_s1_agent_rdata_fifo_out_valid;                                    // yuv_status_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] yuv_status_s1_agent_rdata_fifo_out_data;                                     // yuv_status_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          yuv_status_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_008:in_0_ready -> yuv_status_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                           // avalon_st_adapter_008:out_0_valid -> yuv_status_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                            // avalon_st_adapter_008:out_0_data -> yuv_status_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                           // yuv_status_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                           // avalon_st_adapter_008:out_0_error -> yuv_status_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sad_result_low_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (acc_config_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sad_result_low_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (sad_result_low_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (sad_result_low_s1_agent_m0_read),                   //                         .read
		.uav_write              (sad_result_low_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (sad_result_low_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (sad_result_low_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (sad_result_low_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (sad_result_low_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (sad_result_low_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (sad_result_low_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (sad_result_low_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (sad_result_low_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (sad_result_low_s1_write),                           //                         .write
		.av_readdata            (sad_result_low_s1_readdata),                        //                         .readdata
		.av_writedata           (sad_result_low_s1_writedata),                       //                         .writedata
		.av_chipselect          (sad_result_low_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sad_result_high_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (acc_config_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sad_result_high_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sad_result_high_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sad_result_high_s1_agent_m0_read),                  //                         .read
		.uav_write              (sad_result_high_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sad_result_high_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sad_result_high_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sad_result_high_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sad_result_high_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sad_result_high_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sad_result_high_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sad_result_high_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sad_result_high_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sad_result_high_s1_write),                          //                         .write
		.av_readdata            (sad_result_high_s1_readdata),                       //                         .readdata
		.av_writedata           (sad_result_high_s1_writedata),                      //                         .writedata
		.av_chipselect          (sad_result_high_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) result_ready_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (acc_config_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (result_ready_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (result_ready_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (result_ready_s1_agent_m0_read),                     //                         .read
		.uav_write              (result_ready_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (result_ready_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (result_ready_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (result_ready_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (result_ready_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (result_ready_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (result_ready_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (result_ready_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (result_ready_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (result_ready_s1_write),                             //                         .write
		.av_readdata            (result_ready_s1_readdata),                          //                         .readdata
		.av_writedata           (result_ready_s1_writedata),                         //                         .writedata
		.av_chipselect          (result_ready_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcu_loaded_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (acc_config_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lcu_loaded_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (lcu_loaded_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (lcu_loaded_s1_agent_m0_read),                       //                         .read
		.uav_write              (lcu_loaded_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (lcu_loaded_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (lcu_loaded_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (lcu_loaded_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (lcu_loaded_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (lcu_loaded_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (lcu_loaded_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (lcu_loaded_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (lcu_loaded_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (lcu_loaded_s1_write),                               //                         .write
		.av_readdata            (lcu_loaded_s1_readdata),                            //                         .readdata
		.av_writedata           (lcu_loaded_s1_writedata),                           //                         .writedata
		.av_chipselect          (lcu_loaded_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lambda_loaded_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (acc_config_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lambda_loaded_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (lambda_loaded_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (lambda_loaded_s1_agent_m0_read),                    //                         .read
		.uav_write              (lambda_loaded_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (lambda_loaded_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (lambda_loaded_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (lambda_loaded_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (lambda_loaded_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (lambda_loaded_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (lambda_loaded_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (lambda_loaded_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (lambda_loaded_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (lambda_loaded_s1_write),                            //                         .write
		.av_readdata            (lambda_loaded_s1_readdata),                         //                         .readdata
		.av_writedata           (lambda_loaded_s1_writedata),                        //                         .writedata
		.av_chipselect          (lambda_loaded_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) camera_control_oc_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (acc_config_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (camera_control_oc_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (camera_control_oc_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (camera_control_oc_s1_agent_m0_read),                //                         .read
		.uav_write              (camera_control_oc_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (camera_control_oc_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (camera_control_oc_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (camera_control_oc_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (camera_control_oc_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (camera_control_oc_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (camera_control_oc_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (camera_control_oc_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (camera_control_oc_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (camera_control_oc_s1_write),                        //                         .write
		.av_readdata            (camera_control_oc_s1_readdata),                     //                         .readdata
		.av_writedata           (camera_control_oc_s1_writedata),                    //                         .writedata
		.av_byteenable          (camera_control_oc_s1_byteenable),                   //                         .byteenable
		.av_chipselect          (camera_control_oc_s1_chipselect),                   //                         .chipselect
		.av_clken               (camera_control_oc_s1_clken),                        //                         .clken
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) configure_camera_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (acc_config_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (configure_camera_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (configure_camera_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (configure_camera_s1_agent_m0_read),                 //                         .read
		.uav_write              (configure_camera_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (configure_camera_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (configure_camera_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (configure_camera_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (configure_camera_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (configure_camera_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (configure_camera_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (configure_camera_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (configure_camera_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (configure_camera_s1_write),                         //                         .write
		.av_readdata            (configure_camera_s1_readdata),                      //                         .readdata
		.av_writedata           (configure_camera_s1_writedata),                     //                         .writedata
		.av_chipselect          (configure_camera_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) yuv_ctrl_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (acc_config_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (yuv_ctrl_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (yuv_ctrl_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (yuv_ctrl_s1_agent_m0_read),                         //                         .read
		.uav_write              (yuv_ctrl_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (yuv_ctrl_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (yuv_ctrl_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (yuv_ctrl_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (yuv_ctrl_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (yuv_ctrl_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (yuv_ctrl_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (yuv_ctrl_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (yuv_ctrl_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (yuv_ctrl_s1_write),                                 //                         .write
		.av_readdata            (yuv_ctrl_s1_readdata),                              //                         .readdata
		.av_writedata           (yuv_ctrl_s1_writedata),                             //                         .writedata
		.av_chipselect          (yuv_ctrl_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) yuv_status_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (acc_config_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (yuv_status_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (yuv_status_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (yuv_status_s1_agent_m0_read),                       //                         .read
		.uav_write              (yuv_status_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (yuv_status_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (yuv_status_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (yuv_status_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (yuv_status_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (yuv_status_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (yuv_status_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (yuv_status_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (yuv_status_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (yuv_status_s1_write),                               //                         .write
		.av_readdata            (yuv_status_s1_readdata),                            //                         .readdata
		.av_writedata           (yuv_status_s1_writedata),                           //                         .writedata
		.av_chipselect          (yuv_status_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (131),
		.PKT_CACHE_H               (159),
		.PKT_CACHE_L               (156),
		.PKT_ADDR_SIDEBAND_H       (129),
		.PKT_ADDR_SIDEBAND_L       (129),
		.PKT_PROTECTION_H          (155),
		.PKT_PROTECTION_L          (153),
		.PKT_BURST_SIZE_H          (126),
		.PKT_BURST_SIZE_L          (124),
		.PKT_BURST_TYPE_H          (128),
		.PKT_BURST_TYPE_L          (127),
		.PKT_RESPONSE_STATUS_L     (160),
		.PKT_RESPONSE_STATUS_H     (161),
		.PKT_BURSTWRAP_H           (123),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (108),
		.PKT_ADDR_H                (101),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (107),
		.PKT_TRANS_LOCK            (106),
		.PKT_TRANS_COMPRESSED_READ (102),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.PKT_TRANS_READ            (105),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (136),
		.PKT_SRC_ID_L              (133),
		.PKT_DEST_ID_H             (140),
		.PKT_DEST_ID_L             (137),
		.PKT_THREAD_ID_H           (152),
		.PKT_THREAD_ID_L           (141),
		.PKT_QOS_L                 (132),
		.PKT_QOS_H                 (132),
		.PKT_ORI_BURST_SIZE_L      (162),
		.PKT_ORI_BURST_SIZE_H      (164),
		.PKT_DATA_SIDEBAND_H       (130),
		.PKT_DATA_SIDEBAND_L       (130),
		.ST_DATA_W                 (165),
		.ST_CHANNEL_W              (19),
		.ID                        (0)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (96),
		.PKT_QOS_L                   (96),
		.PKT_THREAD_ID_H             (116),
		.PKT_THREAD_ID_L             (105),
		.PKT_RESPONSE_STATUS_H       (125),
		.PKT_RESPONSE_STATUS_L       (124),
		.PKT_BEGIN_BURST             (95),
		.PKT_CACHE_H                 (123),
		.PKT_CACHE_L                 (120),
		.PKT_DATA_SIDEBAND_H         (94),
		.PKT_DATA_SIDEBAND_L         (94),
		.PKT_ADDR_SIDEBAND_H         (93),
		.PKT_ADDR_SIDEBAND_L         (93),
		.PKT_BURST_TYPE_H            (92),
		.PKT_BURST_TYPE_L            (91),
		.PKT_PROTECTION_H            (119),
		.PKT_PROTECTION_L            (117),
		.PKT_BURST_SIZE_H            (90),
		.PKT_BURST_SIZE_L            (88),
		.PKT_BURSTWRAP_H             (87),
		.PKT_BURSTWRAP_L             (80),
		.PKT_BYTE_CNT_H              (79),
		.PKT_BYTE_CNT_L              (72),
		.PKT_ADDR_H                  (65),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (71),
		.PKT_TRANS_LOCK              (70),
		.PKT_TRANS_COMPRESSED_READ   (66),
		.PKT_TRANS_POSTED            (67),
		.PKT_TRANS_WRITE             (68),
		.PKT_TRANS_READ              (69),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (100),
		.PKT_SRC_ID_L                (97),
		.PKT_DEST_ID_H               (104),
		.PKT_DEST_ID_L               (101),
		.PKT_ORI_BURST_SIZE_L        (126),
		.PKT_ORI_BURST_SIZE_H        (128),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (129),
		.ADDR_WIDTH                  (8),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (19),
		.AXI_SLAVE_ID_W              (12),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) acc_config_altera_axi_slave_agent (
		.aclk                   (clk_0_clk_clk),                                                      //        clock_sink.clk
		.aresetn                (~acc_config_reset_sink_reset_bridge_in_reset_reset),                 //        reset_sink.reset_n
		.read_cp_valid          (acc_config_altera_axi_slave_rd_burst_adapter_source0_valid),         //           read_cp.valid
		.read_cp_ready          (acc_config_altera_axi_slave_rd_burst_adapter_source0_ready),         //                  .ready
		.read_cp_data           (acc_config_altera_axi_slave_rd_burst_adapter_source0_data),          //                  .data
		.read_cp_channel        (acc_config_altera_axi_slave_rd_burst_adapter_source0_channel),       //                  .channel
		.read_cp_startofpacket  (acc_config_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //                  .startofpacket
		.read_cp_endofpacket    (acc_config_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.write_cp_ready         (acc_config_altera_axi_slave_wr_burst_adapter_source0_ready),         //          write_cp.ready
		.write_cp_valid         (acc_config_altera_axi_slave_wr_burst_adapter_source0_valid),         //                  .valid
		.write_cp_data          (acc_config_altera_axi_slave_wr_burst_adapter_source0_data),          //                  .data
		.write_cp_channel       (acc_config_altera_axi_slave_wr_burst_adapter_source0_channel),       //                  .channel
		.write_cp_startofpacket (acc_config_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //                  .startofpacket
		.write_cp_endofpacket   (acc_config_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.read_rp_ready          (acc_config_altera_axi_slave_agent_read_rp_ready),                    //           read_rp.ready
		.read_rp_valid          (acc_config_altera_axi_slave_agent_read_rp_valid),                    //                  .valid
		.read_rp_data           (acc_config_altera_axi_slave_agent_read_rp_data),                     //                  .data
		.read_rp_startofpacket  (acc_config_altera_axi_slave_agent_read_rp_startofpacket),            //                  .startofpacket
		.read_rp_endofpacket    (acc_config_altera_axi_slave_agent_read_rp_endofpacket),              //                  .endofpacket
		.write_rp_ready         (acc_config_altera_axi_slave_agent_write_rp_ready),                   //          write_rp.ready
		.write_rp_valid         (acc_config_altera_axi_slave_agent_write_rp_valid),                   //                  .valid
		.write_rp_data          (acc_config_altera_axi_slave_agent_write_rp_data),                    //                  .data
		.write_rp_startofpacket (acc_config_altera_axi_slave_agent_write_rp_startofpacket),           //                  .startofpacket
		.write_rp_endofpacket   (acc_config_altera_axi_slave_agent_write_rp_endofpacket),             //                  .endofpacket
		.awid                   (acc_config_altera_axi_slave_awid),                                   // altera_axi_master.awid
		.awaddr                 (acc_config_altera_axi_slave_awaddr),                                 //                  .awaddr
		.awlen                  (acc_config_altera_axi_slave_awlen),                                  //                  .awlen
		.awsize                 (acc_config_altera_axi_slave_awsize),                                 //                  .awsize
		.awburst                (acc_config_altera_axi_slave_awburst),                                //                  .awburst
		.awlock                 (acc_config_altera_axi_slave_awlock),                                 //                  .awlock
		.awcache                (acc_config_altera_axi_slave_awcache),                                //                  .awcache
		.awprot                 (acc_config_altera_axi_slave_awprot),                                 //                  .awprot
		.awvalid                (acc_config_altera_axi_slave_awvalid),                                //                  .awvalid
		.awready                (acc_config_altera_axi_slave_awready),                                //                  .awready
		.wid                    (acc_config_altera_axi_slave_wid),                                    //                  .wid
		.wdata                  (acc_config_altera_axi_slave_wdata),                                  //                  .wdata
		.wstrb                  (acc_config_altera_axi_slave_wstrb),                                  //                  .wstrb
		.wlast                  (acc_config_altera_axi_slave_wlast),                                  //                  .wlast
		.wvalid                 (acc_config_altera_axi_slave_wvalid),                                 //                  .wvalid
		.wready                 (acc_config_altera_axi_slave_wready),                                 //                  .wready
		.bid                    (acc_config_altera_axi_slave_bid),                                    //                  .bid
		.bresp                  (acc_config_altera_axi_slave_bresp),                                  //                  .bresp
		.bvalid                 (acc_config_altera_axi_slave_bvalid),                                 //                  .bvalid
		.bready                 (acc_config_altera_axi_slave_bready),                                 //                  .bready
		.arid                   (acc_config_altera_axi_slave_arid),                                   //                  .arid
		.araddr                 (acc_config_altera_axi_slave_araddr),                                 //                  .araddr
		.arlen                  (acc_config_altera_axi_slave_arlen),                                  //                  .arlen
		.arsize                 (acc_config_altera_axi_slave_arsize),                                 //                  .arsize
		.arburst                (acc_config_altera_axi_slave_arburst),                                //                  .arburst
		.arlock                 (acc_config_altera_axi_slave_arlock),                                 //                  .arlock
		.arcache                (acc_config_altera_axi_slave_arcache),                                //                  .arcache
		.arprot                 (acc_config_altera_axi_slave_arprot),                                 //                  .arprot
		.arvalid                (acc_config_altera_axi_slave_arvalid),                                //                  .arvalid
		.arready                (acc_config_altera_axi_slave_arready),                                //                  .arready
		.rid                    (acc_config_altera_axi_slave_rid),                                    //                  .rid
		.rdata                  (acc_config_altera_axi_slave_rdata),                                  //                  .rdata
		.rresp                  (acc_config_altera_axi_slave_rresp),                                  //                  .rresp
		.rlast                  (acc_config_altera_axi_slave_rlast),                                  //                  .rlast
		.rvalid                 (acc_config_altera_axi_slave_rvalid),                                 //                  .rvalid
		.rready                 (acc_config_altera_axi_slave_rready),                                 //                  .rready
		.awuser                 (),                                                                   //       (terminated)
		.aruser                 ()                                                                    //       (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (96),
		.PKT_QOS_L                   (96),
		.PKT_THREAD_ID_H             (116),
		.PKT_THREAD_ID_L             (105),
		.PKT_RESPONSE_STATUS_H       (125),
		.PKT_RESPONSE_STATUS_L       (124),
		.PKT_BEGIN_BURST             (95),
		.PKT_CACHE_H                 (123),
		.PKT_CACHE_L                 (120),
		.PKT_DATA_SIDEBAND_H         (94),
		.PKT_DATA_SIDEBAND_L         (94),
		.PKT_ADDR_SIDEBAND_H         (93),
		.PKT_ADDR_SIDEBAND_L         (93),
		.PKT_BURST_TYPE_H            (92),
		.PKT_BURST_TYPE_L            (91),
		.PKT_PROTECTION_H            (119),
		.PKT_PROTECTION_L            (117),
		.PKT_BURST_SIZE_H            (90),
		.PKT_BURST_SIZE_L            (88),
		.PKT_BURSTWRAP_H             (87),
		.PKT_BURSTWRAP_L             (80),
		.PKT_BYTE_CNT_H              (79),
		.PKT_BYTE_CNT_L              (72),
		.PKT_ADDR_H                  (65),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (71),
		.PKT_TRANS_LOCK              (70),
		.PKT_TRANS_COMPRESSED_READ   (66),
		.PKT_TRANS_POSTED            (67),
		.PKT_TRANS_WRITE             (68),
		.PKT_TRANS_READ              (69),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (100),
		.PKT_SRC_ID_L                (97),
		.PKT_DEST_ID_H               (104),
		.PKT_DEST_ID_L               (101),
		.PKT_ORI_BURST_SIZE_L        (126),
		.PKT_ORI_BURST_SIZE_H        (128),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (129),
		.ADDR_WIDTH                  (8),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (19),
		.AXI_SLAVE_ID_W              (12),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) axi_dma_unfiltered2_altera_axi_slave_agent (
		.aclk                   (clk_0_clk_clk),                                                               //        clock_sink.clk
		.aresetn                (~acc_config_reset_sink_reset_bridge_in_reset_reset),                          //        reset_sink.reset_n
		.read_cp_valid          (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_valid),         //           read_cp.valid
		.read_cp_ready          (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_ready),         //                  .ready
		.read_cp_data           (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_data),          //                  .data
		.read_cp_channel        (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_channel),       //                  .channel
		.read_cp_startofpacket  (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //                  .startofpacket
		.read_cp_endofpacket    (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.write_cp_ready         (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_ready),         //          write_cp.ready
		.write_cp_valid         (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_valid),         //                  .valid
		.write_cp_data          (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_data),          //                  .data
		.write_cp_channel       (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_channel),       //                  .channel
		.write_cp_startofpacket (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //                  .startofpacket
		.write_cp_endofpacket   (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.read_rp_ready          (axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_ready),                    //           read_rp.ready
		.read_rp_valid          (axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_valid),                    //                  .valid
		.read_rp_data           (axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_data),                     //                  .data
		.read_rp_startofpacket  (axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_startofpacket),            //                  .startofpacket
		.read_rp_endofpacket    (axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_endofpacket),              //                  .endofpacket
		.write_rp_ready         (axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_ready),                   //          write_rp.ready
		.write_rp_valid         (axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_valid),                   //                  .valid
		.write_rp_data          (axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_data),                    //                  .data
		.write_rp_startofpacket (axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_startofpacket),           //                  .startofpacket
		.write_rp_endofpacket   (axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_endofpacket),             //                  .endofpacket
		.awid                   (axi_dma_unfiltered2_altera_axi_slave_awid),                                   // altera_axi_master.awid
		.awaddr                 (axi_dma_unfiltered2_altera_axi_slave_awaddr),                                 //                  .awaddr
		.awlen                  (axi_dma_unfiltered2_altera_axi_slave_awlen),                                  //                  .awlen
		.awsize                 (axi_dma_unfiltered2_altera_axi_slave_awsize),                                 //                  .awsize
		.awburst                (axi_dma_unfiltered2_altera_axi_slave_awburst),                                //                  .awburst
		.awlock                 (axi_dma_unfiltered2_altera_axi_slave_awlock),                                 //                  .awlock
		.awcache                (axi_dma_unfiltered2_altera_axi_slave_awcache),                                //                  .awcache
		.awprot                 (axi_dma_unfiltered2_altera_axi_slave_awprot),                                 //                  .awprot
		.awvalid                (axi_dma_unfiltered2_altera_axi_slave_awvalid),                                //                  .awvalid
		.awready                (axi_dma_unfiltered2_altera_axi_slave_awready),                                //                  .awready
		.wid                    (axi_dma_unfiltered2_altera_axi_slave_wid),                                    //                  .wid
		.wdata                  (axi_dma_unfiltered2_altera_axi_slave_wdata),                                  //                  .wdata
		.wstrb                  (axi_dma_unfiltered2_altera_axi_slave_wstrb),                                  //                  .wstrb
		.wlast                  (axi_dma_unfiltered2_altera_axi_slave_wlast),                                  //                  .wlast
		.wvalid                 (axi_dma_unfiltered2_altera_axi_slave_wvalid),                                 //                  .wvalid
		.wready                 (axi_dma_unfiltered2_altera_axi_slave_wready),                                 //                  .wready
		.bid                    (axi_dma_unfiltered2_altera_axi_slave_bid),                                    //                  .bid
		.bresp                  (axi_dma_unfiltered2_altera_axi_slave_bresp),                                  //                  .bresp
		.bvalid                 (axi_dma_unfiltered2_altera_axi_slave_bvalid),                                 //                  .bvalid
		.bready                 (axi_dma_unfiltered2_altera_axi_slave_bready),                                 //                  .bready
		.arid                   (axi_dma_unfiltered2_altera_axi_slave_arid),                                   //                  .arid
		.araddr                 (axi_dma_unfiltered2_altera_axi_slave_araddr),                                 //                  .araddr
		.arlen                  (axi_dma_unfiltered2_altera_axi_slave_arlen),                                  //                  .arlen
		.arsize                 (axi_dma_unfiltered2_altera_axi_slave_arsize),                                 //                  .arsize
		.arburst                (axi_dma_unfiltered2_altera_axi_slave_arburst),                                //                  .arburst
		.arlock                 (axi_dma_unfiltered2_altera_axi_slave_arlock),                                 //                  .arlock
		.arcache                (axi_dma_unfiltered2_altera_axi_slave_arcache),                                //                  .arcache
		.arprot                 (axi_dma_unfiltered2_altera_axi_slave_arprot),                                 //                  .arprot
		.arvalid                (axi_dma_unfiltered2_altera_axi_slave_arvalid),                                //                  .arvalid
		.arready                (axi_dma_unfiltered2_altera_axi_slave_arready),                                //                  .arready
		.rid                    (axi_dma_unfiltered2_altera_axi_slave_rid),                                    //                  .rid
		.rdata                  (axi_dma_unfiltered2_altera_axi_slave_rdata),                                  //                  .rdata
		.rresp                  (axi_dma_unfiltered2_altera_axi_slave_rresp),                                  //                  .rresp
		.rlast                  (axi_dma_unfiltered2_altera_axi_slave_rlast),                                  //                  .rlast
		.rvalid                 (axi_dma_unfiltered2_altera_axi_slave_rvalid),                                 //                  .rvalid
		.rready                 (axi_dma_unfiltered2_altera_axi_slave_rready),                                 //                  .rready
		.awuser                 (),                                                                            //       (terminated)
		.aruser                 ()                                                                             //       (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (96),
		.PKT_QOS_L                   (96),
		.PKT_THREAD_ID_H             (116),
		.PKT_THREAD_ID_L             (105),
		.PKT_RESPONSE_STATUS_H       (125),
		.PKT_RESPONSE_STATUS_L       (124),
		.PKT_BEGIN_BURST             (95),
		.PKT_CACHE_H                 (123),
		.PKT_CACHE_L                 (120),
		.PKT_DATA_SIDEBAND_H         (94),
		.PKT_DATA_SIDEBAND_L         (94),
		.PKT_ADDR_SIDEBAND_H         (93),
		.PKT_ADDR_SIDEBAND_L         (93),
		.PKT_BURST_TYPE_H            (92),
		.PKT_BURST_TYPE_L            (91),
		.PKT_PROTECTION_H            (119),
		.PKT_PROTECTION_L            (117),
		.PKT_BURST_SIZE_H            (90),
		.PKT_BURST_SIZE_L            (88),
		.PKT_BURSTWRAP_H             (87),
		.PKT_BURSTWRAP_L             (80),
		.PKT_BYTE_CNT_H              (79),
		.PKT_BYTE_CNT_L              (72),
		.PKT_ADDR_H                  (65),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (71),
		.PKT_TRANS_LOCK              (70),
		.PKT_TRANS_COMPRESSED_READ   (66),
		.PKT_TRANS_POSTED            (67),
		.PKT_TRANS_WRITE             (68),
		.PKT_TRANS_READ              (69),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (100),
		.PKT_SRC_ID_L                (97),
		.PKT_DEST_ID_H               (104),
		.PKT_DEST_ID_L               (101),
		.PKT_ORI_BURST_SIZE_L        (126),
		.PKT_ORI_BURST_SIZE_H        (128),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (129),
		.ADDR_WIDTH                  (8),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (19),
		.AXI_SLAVE_ID_W              (12),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) axi_dma_unfiltered1_altera_axi_slave_agent (
		.aclk                   (clk_0_clk_clk),                                                               //        clock_sink.clk
		.aresetn                (~acc_config_reset_sink_reset_bridge_in_reset_reset),                          //        reset_sink.reset_n
		.read_cp_valid          (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_valid),         //           read_cp.valid
		.read_cp_ready          (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_ready),         //                  .ready
		.read_cp_data           (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_data),          //                  .data
		.read_cp_channel        (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_channel),       //                  .channel
		.read_cp_startofpacket  (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //                  .startofpacket
		.read_cp_endofpacket    (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.write_cp_ready         (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_ready),         //          write_cp.ready
		.write_cp_valid         (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_valid),         //                  .valid
		.write_cp_data          (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_data),          //                  .data
		.write_cp_channel       (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_channel),       //                  .channel
		.write_cp_startofpacket (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //                  .startofpacket
		.write_cp_endofpacket   (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.read_rp_ready          (axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_ready),                    //           read_rp.ready
		.read_rp_valid          (axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_valid),                    //                  .valid
		.read_rp_data           (axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_data),                     //                  .data
		.read_rp_startofpacket  (axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_startofpacket),            //                  .startofpacket
		.read_rp_endofpacket    (axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_endofpacket),              //                  .endofpacket
		.write_rp_ready         (axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_ready),                   //          write_rp.ready
		.write_rp_valid         (axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_valid),                   //                  .valid
		.write_rp_data          (axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_data),                    //                  .data
		.write_rp_startofpacket (axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_startofpacket),           //                  .startofpacket
		.write_rp_endofpacket   (axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_endofpacket),             //                  .endofpacket
		.awid                   (axi_dma_unfiltered1_altera_axi_slave_awid),                                   // altera_axi_master.awid
		.awaddr                 (axi_dma_unfiltered1_altera_axi_slave_awaddr),                                 //                  .awaddr
		.awlen                  (axi_dma_unfiltered1_altera_axi_slave_awlen),                                  //                  .awlen
		.awsize                 (axi_dma_unfiltered1_altera_axi_slave_awsize),                                 //                  .awsize
		.awburst                (axi_dma_unfiltered1_altera_axi_slave_awburst),                                //                  .awburst
		.awlock                 (axi_dma_unfiltered1_altera_axi_slave_awlock),                                 //                  .awlock
		.awcache                (axi_dma_unfiltered1_altera_axi_slave_awcache),                                //                  .awcache
		.awprot                 (axi_dma_unfiltered1_altera_axi_slave_awprot),                                 //                  .awprot
		.awvalid                (axi_dma_unfiltered1_altera_axi_slave_awvalid),                                //                  .awvalid
		.awready                (axi_dma_unfiltered1_altera_axi_slave_awready),                                //                  .awready
		.wid                    (axi_dma_unfiltered1_altera_axi_slave_wid),                                    //                  .wid
		.wdata                  (axi_dma_unfiltered1_altera_axi_slave_wdata),                                  //                  .wdata
		.wstrb                  (axi_dma_unfiltered1_altera_axi_slave_wstrb),                                  //                  .wstrb
		.wlast                  (axi_dma_unfiltered1_altera_axi_slave_wlast),                                  //                  .wlast
		.wvalid                 (axi_dma_unfiltered1_altera_axi_slave_wvalid),                                 //                  .wvalid
		.wready                 (axi_dma_unfiltered1_altera_axi_slave_wready),                                 //                  .wready
		.bid                    (axi_dma_unfiltered1_altera_axi_slave_bid),                                    //                  .bid
		.bresp                  (axi_dma_unfiltered1_altera_axi_slave_bresp),                                  //                  .bresp
		.bvalid                 (axi_dma_unfiltered1_altera_axi_slave_bvalid),                                 //                  .bvalid
		.bready                 (axi_dma_unfiltered1_altera_axi_slave_bready),                                 //                  .bready
		.arid                   (axi_dma_unfiltered1_altera_axi_slave_arid),                                   //                  .arid
		.araddr                 (axi_dma_unfiltered1_altera_axi_slave_araddr),                                 //                  .araddr
		.arlen                  (axi_dma_unfiltered1_altera_axi_slave_arlen),                                  //                  .arlen
		.arsize                 (axi_dma_unfiltered1_altera_axi_slave_arsize),                                 //                  .arsize
		.arburst                (axi_dma_unfiltered1_altera_axi_slave_arburst),                                //                  .arburst
		.arlock                 (axi_dma_unfiltered1_altera_axi_slave_arlock),                                 //                  .arlock
		.arcache                (axi_dma_unfiltered1_altera_axi_slave_arcache),                                //                  .arcache
		.arprot                 (axi_dma_unfiltered1_altera_axi_slave_arprot),                                 //                  .arprot
		.arvalid                (axi_dma_unfiltered1_altera_axi_slave_arvalid),                                //                  .arvalid
		.arready                (axi_dma_unfiltered1_altera_axi_slave_arready),                                //                  .arready
		.rid                    (axi_dma_unfiltered1_altera_axi_slave_rid),                                    //                  .rid
		.rdata                  (axi_dma_unfiltered1_altera_axi_slave_rdata),                                  //                  .rdata
		.rresp                  (axi_dma_unfiltered1_altera_axi_slave_rresp),                                  //                  .rresp
		.rlast                  (axi_dma_unfiltered1_altera_axi_slave_rlast),                                  //                  .rlast
		.rvalid                 (axi_dma_unfiltered1_altera_axi_slave_rvalid),                                 //                  .rvalid
		.rready                 (axi_dma_unfiltered1_altera_axi_slave_rready),                                 //                  .rready
		.awuser                 (),                                                                            //       (terminated)
		.aruser                 ()                                                                             //       (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (96),
		.PKT_QOS_L                   (96),
		.PKT_THREAD_ID_H             (116),
		.PKT_THREAD_ID_L             (105),
		.PKT_RESPONSE_STATUS_H       (125),
		.PKT_RESPONSE_STATUS_L       (124),
		.PKT_BEGIN_BURST             (95),
		.PKT_CACHE_H                 (123),
		.PKT_CACHE_L                 (120),
		.PKT_DATA_SIDEBAND_H         (94),
		.PKT_DATA_SIDEBAND_L         (94),
		.PKT_ADDR_SIDEBAND_H         (93),
		.PKT_ADDR_SIDEBAND_L         (93),
		.PKT_BURST_TYPE_H            (92),
		.PKT_BURST_TYPE_L            (91),
		.PKT_PROTECTION_H            (119),
		.PKT_PROTECTION_L            (117),
		.PKT_BURST_SIZE_H            (90),
		.PKT_BURST_SIZE_L            (88),
		.PKT_BURSTWRAP_H             (87),
		.PKT_BURSTWRAP_L             (80),
		.PKT_BYTE_CNT_H              (79),
		.PKT_BYTE_CNT_L              (72),
		.PKT_ADDR_H                  (65),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (71),
		.PKT_TRANS_LOCK              (70),
		.PKT_TRANS_COMPRESSED_READ   (66),
		.PKT_TRANS_POSTED            (67),
		.PKT_TRANS_WRITE             (68),
		.PKT_TRANS_READ              (69),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (100),
		.PKT_SRC_ID_L                (97),
		.PKT_DEST_ID_H               (104),
		.PKT_DEST_ID_L               (101),
		.PKT_ORI_BURST_SIZE_L        (126),
		.PKT_ORI_BURST_SIZE_H        (128),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (129),
		.ADDR_WIDTH                  (8),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (19),
		.AXI_SLAVE_ID_W              (12),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) axi_dma_orig_block_altera_axi_slave_agent (
		.aclk                   (clk_0_clk_clk),                                                              //        clock_sink.clk
		.aresetn                (~acc_config_reset_sink_reset_bridge_in_reset_reset),                         //        reset_sink.reset_n
		.read_cp_valid          (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_valid),         //           read_cp.valid
		.read_cp_ready          (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_ready),         //                  .ready
		.read_cp_data           (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_data),          //                  .data
		.read_cp_channel        (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_channel),       //                  .channel
		.read_cp_startofpacket  (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //                  .startofpacket
		.read_cp_endofpacket    (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.write_cp_ready         (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_ready),         //          write_cp.ready
		.write_cp_valid         (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_valid),         //                  .valid
		.write_cp_data          (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_data),          //                  .data
		.write_cp_channel       (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_channel),       //                  .channel
		.write_cp_startofpacket (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //                  .startofpacket
		.write_cp_endofpacket   (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.read_rp_ready          (axi_dma_orig_block_altera_axi_slave_agent_read_rp_ready),                    //           read_rp.ready
		.read_rp_valid          (axi_dma_orig_block_altera_axi_slave_agent_read_rp_valid),                    //                  .valid
		.read_rp_data           (axi_dma_orig_block_altera_axi_slave_agent_read_rp_data),                     //                  .data
		.read_rp_startofpacket  (axi_dma_orig_block_altera_axi_slave_agent_read_rp_startofpacket),            //                  .startofpacket
		.read_rp_endofpacket    (axi_dma_orig_block_altera_axi_slave_agent_read_rp_endofpacket),              //                  .endofpacket
		.write_rp_ready         (axi_dma_orig_block_altera_axi_slave_agent_write_rp_ready),                   //          write_rp.ready
		.write_rp_valid         (axi_dma_orig_block_altera_axi_slave_agent_write_rp_valid),                   //                  .valid
		.write_rp_data          (axi_dma_orig_block_altera_axi_slave_agent_write_rp_data),                    //                  .data
		.write_rp_startofpacket (axi_dma_orig_block_altera_axi_slave_agent_write_rp_startofpacket),           //                  .startofpacket
		.write_rp_endofpacket   (axi_dma_orig_block_altera_axi_slave_agent_write_rp_endofpacket),             //                  .endofpacket
		.awid                   (axi_dma_orig_block_altera_axi_slave_awid),                                   // altera_axi_master.awid
		.awaddr                 (axi_dma_orig_block_altera_axi_slave_awaddr),                                 //                  .awaddr
		.awlen                  (axi_dma_orig_block_altera_axi_slave_awlen),                                  //                  .awlen
		.awsize                 (axi_dma_orig_block_altera_axi_slave_awsize),                                 //                  .awsize
		.awburst                (axi_dma_orig_block_altera_axi_slave_awburst),                                //                  .awburst
		.awlock                 (axi_dma_orig_block_altera_axi_slave_awlock),                                 //                  .awlock
		.awcache                (axi_dma_orig_block_altera_axi_slave_awcache),                                //                  .awcache
		.awprot                 (axi_dma_orig_block_altera_axi_slave_awprot),                                 //                  .awprot
		.awvalid                (axi_dma_orig_block_altera_axi_slave_awvalid),                                //                  .awvalid
		.awready                (axi_dma_orig_block_altera_axi_slave_awready),                                //                  .awready
		.wid                    (axi_dma_orig_block_altera_axi_slave_wid),                                    //                  .wid
		.wdata                  (axi_dma_orig_block_altera_axi_slave_wdata),                                  //                  .wdata
		.wstrb                  (axi_dma_orig_block_altera_axi_slave_wstrb),                                  //                  .wstrb
		.wlast                  (axi_dma_orig_block_altera_axi_slave_wlast),                                  //                  .wlast
		.wvalid                 (axi_dma_orig_block_altera_axi_slave_wvalid),                                 //                  .wvalid
		.wready                 (axi_dma_orig_block_altera_axi_slave_wready),                                 //                  .wready
		.bid                    (axi_dma_orig_block_altera_axi_slave_bid),                                    //                  .bid
		.bresp                  (axi_dma_orig_block_altera_axi_slave_bresp),                                  //                  .bresp
		.bvalid                 (axi_dma_orig_block_altera_axi_slave_bvalid),                                 //                  .bvalid
		.bready                 (axi_dma_orig_block_altera_axi_slave_bready),                                 //                  .bready
		.arid                   (axi_dma_orig_block_altera_axi_slave_arid),                                   //                  .arid
		.araddr                 (axi_dma_orig_block_altera_axi_slave_araddr),                                 //                  .araddr
		.arlen                  (axi_dma_orig_block_altera_axi_slave_arlen),                                  //                  .arlen
		.arsize                 (axi_dma_orig_block_altera_axi_slave_arsize),                                 //                  .arsize
		.arburst                (axi_dma_orig_block_altera_axi_slave_arburst),                                //                  .arburst
		.arlock                 (axi_dma_orig_block_altera_axi_slave_arlock),                                 //                  .arlock
		.arcache                (axi_dma_orig_block_altera_axi_slave_arcache),                                //                  .arcache
		.arprot                 (axi_dma_orig_block_altera_axi_slave_arprot),                                 //                  .arprot
		.arvalid                (axi_dma_orig_block_altera_axi_slave_arvalid),                                //                  .arvalid
		.arready                (axi_dma_orig_block_altera_axi_slave_arready),                                //                  .arready
		.rid                    (axi_dma_orig_block_altera_axi_slave_rid),                                    //                  .rid
		.rdata                  (axi_dma_orig_block_altera_axi_slave_rdata),                                  //                  .rdata
		.rresp                  (axi_dma_orig_block_altera_axi_slave_rresp),                                  //                  .rresp
		.rlast                  (axi_dma_orig_block_altera_axi_slave_rlast),                                  //                  .rlast
		.rvalid                 (axi_dma_orig_block_altera_axi_slave_rvalid),                                 //                  .rvalid
		.rready                 (axi_dma_orig_block_altera_axi_slave_rready),                                 //                  .rready
		.awuser                 (),                                                                           //       (terminated)
		.aruser                 ()                                                                            //       (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (96),
		.PKT_QOS_L                   (96),
		.PKT_THREAD_ID_H             (116),
		.PKT_THREAD_ID_L             (105),
		.PKT_RESPONSE_STATUS_H       (125),
		.PKT_RESPONSE_STATUS_L       (124),
		.PKT_BEGIN_BURST             (95),
		.PKT_CACHE_H                 (123),
		.PKT_CACHE_L                 (120),
		.PKT_DATA_SIDEBAND_H         (94),
		.PKT_DATA_SIDEBAND_L         (94),
		.PKT_ADDR_SIDEBAND_H         (93),
		.PKT_ADDR_SIDEBAND_L         (93),
		.PKT_BURST_TYPE_H            (92),
		.PKT_BURST_TYPE_L            (91),
		.PKT_PROTECTION_H            (119),
		.PKT_PROTECTION_L            (117),
		.PKT_BURST_SIZE_H            (90),
		.PKT_BURST_SIZE_L            (88),
		.PKT_BURSTWRAP_H             (87),
		.PKT_BURSTWRAP_L             (80),
		.PKT_BYTE_CNT_H              (79),
		.PKT_BYTE_CNT_L              (72),
		.PKT_ADDR_H                  (65),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (71),
		.PKT_TRANS_LOCK              (70),
		.PKT_TRANS_COMPRESSED_READ   (66),
		.PKT_TRANS_POSTED            (67),
		.PKT_TRANS_WRITE             (68),
		.PKT_TRANS_READ              (69),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (100),
		.PKT_SRC_ID_L                (97),
		.PKT_DEST_ID_H               (104),
		.PKT_DEST_ID_L               (101),
		.PKT_ORI_BURST_SIZE_L        (126),
		.PKT_ORI_BURST_SIZE_H        (128),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (129),
		.ADDR_WIDTH                  (8),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (19),
		.AXI_SLAVE_ID_W              (12),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) dma_yuv_altera_axi_slave_agent (
		.aclk                   (clk_0_clk_clk),                                                   //        clock_sink.clk
		.aresetn                (~acc_config_reset_sink_reset_bridge_in_reset_reset),              //        reset_sink.reset_n
		.read_cp_valid          (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_valid),         //           read_cp.valid
		.read_cp_ready          (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_ready),         //                  .ready
		.read_cp_data           (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_data),          //                  .data
		.read_cp_channel        (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_channel),       //                  .channel
		.read_cp_startofpacket  (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //                  .startofpacket
		.read_cp_endofpacket    (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.write_cp_ready         (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_ready),         //          write_cp.ready
		.write_cp_valid         (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_valid),         //                  .valid
		.write_cp_data          (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_data),          //                  .data
		.write_cp_channel       (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_channel),       //                  .channel
		.write_cp_startofpacket (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //                  .startofpacket
		.write_cp_endofpacket   (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.read_rp_ready          (dma_yuv_altera_axi_slave_agent_read_rp_ready),                    //           read_rp.ready
		.read_rp_valid          (dma_yuv_altera_axi_slave_agent_read_rp_valid),                    //                  .valid
		.read_rp_data           (dma_yuv_altera_axi_slave_agent_read_rp_data),                     //                  .data
		.read_rp_startofpacket  (dma_yuv_altera_axi_slave_agent_read_rp_startofpacket),            //                  .startofpacket
		.read_rp_endofpacket    (dma_yuv_altera_axi_slave_agent_read_rp_endofpacket),              //                  .endofpacket
		.write_rp_ready         (dma_yuv_altera_axi_slave_agent_write_rp_ready),                   //          write_rp.ready
		.write_rp_valid         (dma_yuv_altera_axi_slave_agent_write_rp_valid),                   //                  .valid
		.write_rp_data          (dma_yuv_altera_axi_slave_agent_write_rp_data),                    //                  .data
		.write_rp_startofpacket (dma_yuv_altera_axi_slave_agent_write_rp_startofpacket),           //                  .startofpacket
		.write_rp_endofpacket   (dma_yuv_altera_axi_slave_agent_write_rp_endofpacket),             //                  .endofpacket
		.awid                   (dma_yuv_altera_axi_slave_awid),                                   // altera_axi_master.awid
		.awaddr                 (dma_yuv_altera_axi_slave_awaddr),                                 //                  .awaddr
		.awlen                  (dma_yuv_altera_axi_slave_awlen),                                  //                  .awlen
		.awsize                 (dma_yuv_altera_axi_slave_awsize),                                 //                  .awsize
		.awburst                (dma_yuv_altera_axi_slave_awburst),                                //                  .awburst
		.awlock                 (dma_yuv_altera_axi_slave_awlock),                                 //                  .awlock
		.awcache                (dma_yuv_altera_axi_slave_awcache),                                //                  .awcache
		.awprot                 (dma_yuv_altera_axi_slave_awprot),                                 //                  .awprot
		.awvalid                (dma_yuv_altera_axi_slave_awvalid),                                //                  .awvalid
		.awready                (dma_yuv_altera_axi_slave_awready),                                //                  .awready
		.wid                    (dma_yuv_altera_axi_slave_wid),                                    //                  .wid
		.wdata                  (dma_yuv_altera_axi_slave_wdata),                                  //                  .wdata
		.wstrb                  (dma_yuv_altera_axi_slave_wstrb),                                  //                  .wstrb
		.wlast                  (dma_yuv_altera_axi_slave_wlast),                                  //                  .wlast
		.wvalid                 (dma_yuv_altera_axi_slave_wvalid),                                 //                  .wvalid
		.wready                 (dma_yuv_altera_axi_slave_wready),                                 //                  .wready
		.bid                    (dma_yuv_altera_axi_slave_bid),                                    //                  .bid
		.bresp                  (dma_yuv_altera_axi_slave_bresp),                                  //                  .bresp
		.bvalid                 (dma_yuv_altera_axi_slave_bvalid),                                 //                  .bvalid
		.bready                 (dma_yuv_altera_axi_slave_bready),                                 //                  .bready
		.arid                   (dma_yuv_altera_axi_slave_arid),                                   //                  .arid
		.araddr                 (dma_yuv_altera_axi_slave_araddr),                                 //                  .araddr
		.arlen                  (dma_yuv_altera_axi_slave_arlen),                                  //                  .arlen
		.arsize                 (dma_yuv_altera_axi_slave_arsize),                                 //                  .arsize
		.arburst                (dma_yuv_altera_axi_slave_arburst),                                //                  .arburst
		.arlock                 (dma_yuv_altera_axi_slave_arlock),                                 //                  .arlock
		.arcache                (dma_yuv_altera_axi_slave_arcache),                                //                  .arcache
		.arprot                 (dma_yuv_altera_axi_slave_arprot),                                 //                  .arprot
		.arvalid                (dma_yuv_altera_axi_slave_arvalid),                                //                  .arvalid
		.arready                (dma_yuv_altera_axi_slave_arready),                                //                  .arready
		.rid                    (dma_yuv_altera_axi_slave_rid),                                    //                  .rid
		.rdata                  (dma_yuv_altera_axi_slave_rdata),                                  //                  .rdata
		.rresp                  (dma_yuv_altera_axi_slave_rresp),                                  //                  .rresp
		.rlast                  (dma_yuv_altera_axi_slave_rlast),                                  //                  .rlast
		.rvalid                 (dma_yuv_altera_axi_slave_rvalid),                                 //                  .rvalid
		.rready                 (dma_yuv_altera_axi_slave_rready),                                 //                  .rready
		.awuser                 (),                                                                //       (terminated)
		.aruser                 ()                                                                 //       (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sad_result_low_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (acc_config_reset_sink_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (sad_result_low_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sad_result_low_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sad_result_low_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sad_result_low_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sad_result_low_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sad_result_low_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sad_result_low_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sad_result_low_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sad_result_low_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sad_result_low_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sad_result_low_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sad_result_low_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sad_result_low_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sad_result_low_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sad_result_low_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sad_result_low_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sad_result_low_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sad_result_low_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sad_result_low_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sad_result_low_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sad_result_low_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sad_result_low_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sad_result_low_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sad_result_low_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sad_result_low_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sad_result_low_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sad_result_low_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sad_result_low_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sad_result_low_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sad_result_low_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sad_result_low_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sad_result_low_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (sad_result_low_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sad_result_low_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sad_result_low_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sad_result_low_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sad_result_low_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sad_result_low_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sad_result_low_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sad_result_low_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sad_result_low_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sad_result_low_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sad_result_low_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sad_result_low_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sad_result_low_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sad_result_low_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sad_result_low_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sad_result_low_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (sad_result_low_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (sad_result_low_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (sad_result_low_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (sad_result_low_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (sad_result_low_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sad_result_high_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (acc_config_reset_sink_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sad_result_high_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sad_result_high_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sad_result_high_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sad_result_high_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sad_result_high_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sad_result_high_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sad_result_high_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sad_result_high_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sad_result_high_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sad_result_high_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sad_result_high_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sad_result_high_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sad_result_high_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sad_result_high_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sad_result_high_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sad_result_high_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sad_result_high_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sad_result_high_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sad_result_high_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sad_result_high_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sad_result_high_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sad_result_high_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sad_result_high_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sad_result_high_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sad_result_high_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sad_result_high_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sad_result_high_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sad_result_high_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sad_result_high_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sad_result_high_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sad_result_high_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sad_result_high_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (sad_result_high_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sad_result_high_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sad_result_high_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sad_result_high_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sad_result_high_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sad_result_high_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sad_result_high_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sad_result_high_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sad_result_high_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sad_result_high_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sad_result_high_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sad_result_high_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sad_result_high_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sad_result_high_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sad_result_high_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sad_result_high_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sad_result_high_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sad_result_high_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sad_result_high_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sad_result_high_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sad_result_high_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) result_ready_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (acc_config_reset_sink_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (result_ready_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (result_ready_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (result_ready_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (result_ready_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (result_ready_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (result_ready_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (result_ready_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (result_ready_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (result_ready_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (result_ready_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (result_ready_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (result_ready_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (result_ready_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (result_ready_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (result_ready_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (result_ready_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (result_ready_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (result_ready_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (result_ready_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (result_ready_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (result_ready_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (result_ready_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (result_ready_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (result_ready_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (result_ready_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (result_ready_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (result_ready_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (result_ready_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (result_ready_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (result_ready_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (result_ready_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (result_ready_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (result_ready_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (result_ready_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (result_ready_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result_ready_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (result_ready_s1_agent_rf_source_data),              //        in.data
		.in_valid          (result_ready_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (result_ready_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (result_ready_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (result_ready_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (result_ready_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (result_ready_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (result_ready_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (result_ready_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (result_ready_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result_ready_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (result_ready_s1_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (result_ready_s1_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (result_ready_s1_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (result_ready_s1_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (result_ready_s1_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (result_ready_s1_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lcu_loaded_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (acc_config_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (lcu_loaded_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lcu_loaded_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lcu_loaded_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lcu_loaded_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lcu_loaded_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (lcu_loaded_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lcu_loaded_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lcu_loaded_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (lcu_loaded_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lcu_loaded_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (lcu_loaded_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (lcu_loaded_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lcu_loaded_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (lcu_loaded_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (lcu_loaded_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (lcu_loaded_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lcu_loaded_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lcu_loaded_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lcu_loaded_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lcu_loaded_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lcu_loaded_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lcu_loaded_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lcu_loaded_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lcu_loaded_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lcu_loaded_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lcu_loaded_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lcu_loaded_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lcu_loaded_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lcu_loaded_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lcu_loaded_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lcu_loaded_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lcu_loaded_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (lcu_loaded_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcu_loaded_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lcu_loaded_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcu_loaded_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lcu_loaded_s1_agent_rf_source_data),                //        in.data
		.in_valid          (lcu_loaded_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (lcu_loaded_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (lcu_loaded_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (lcu_loaded_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (lcu_loaded_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (lcu_loaded_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (lcu_loaded_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (lcu_loaded_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (lcu_loaded_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcu_loaded_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lcu_loaded_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (lcu_loaded_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (lcu_loaded_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (lcu_loaded_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (lcu_loaded_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (lcu_loaded_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lambda_loaded_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (acc_config_reset_sink_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (lambda_loaded_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lambda_loaded_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lambda_loaded_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lambda_loaded_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lambda_loaded_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (lambda_loaded_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lambda_loaded_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lambda_loaded_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (lambda_loaded_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lambda_loaded_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (lambda_loaded_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (lambda_loaded_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lambda_loaded_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (lambda_loaded_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (lambda_loaded_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (lambda_loaded_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lambda_loaded_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lambda_loaded_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lambda_loaded_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lambda_loaded_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lambda_loaded_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lambda_loaded_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lambda_loaded_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lambda_loaded_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lambda_loaded_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lambda_loaded_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lambda_loaded_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lambda_loaded_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lambda_loaded_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lambda_loaded_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lambda_loaded_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lambda_loaded_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (lambda_loaded_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lambda_loaded_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lambda_loaded_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lambda_loaded_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lambda_loaded_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lambda_loaded_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lambda_loaded_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lambda_loaded_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lambda_loaded_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lambda_loaded_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lambda_loaded_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lambda_loaded_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lambda_loaded_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lambda_loaded_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lambda_loaded_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lambda_loaded_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (lambda_loaded_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (lambda_loaded_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (lambda_loaded_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (lambda_loaded_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (lambda_loaded_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (110),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_BURST_SIZE_H          (72),
		.PKT_BURST_SIZE_L          (70),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (77),
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_BURSTWRAP_H           (69),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (79),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (111),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) camera_control_oc_s1_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (acc_config_reset_sink_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (camera_control_oc_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (camera_control_oc_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (camera_control_oc_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (camera_control_oc_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (camera_control_oc_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (camera_control_oc_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (camera_control_oc_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (camera_control_oc_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (camera_control_oc_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (camera_control_oc_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (camera_control_oc_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (camera_control_oc_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (camera_control_oc_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (camera_control_oc_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (camera_control_oc_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (camera_control_oc_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (camera_control_oc_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (camera_control_oc_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (camera_control_oc_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (camera_control_oc_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (camera_control_oc_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (camera_control_oc_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (camera_control_oc_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (camera_control_oc_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (camera_control_oc_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (camera_control_oc_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (camera_control_oc_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (camera_control_oc_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (camera_control_oc_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (camera_control_oc_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (camera_control_oc_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (camera_control_oc_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (camera_control_oc_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (camera_control_oc_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (camera_control_oc_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (112),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) camera_control_oc_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (camera_control_oc_s1_agent_rf_source_data),             //        in.data
		.in_valid          (camera_control_oc_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (camera_control_oc_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (camera_control_oc_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (camera_control_oc_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (camera_control_oc_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (camera_control_oc_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (camera_control_oc_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (camera_control_oc_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (camera_control_oc_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) camera_control_oc_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (camera_control_oc_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (camera_control_oc_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (camera_control_oc_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (camera_control_oc_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (camera_control_oc_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (camera_control_oc_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) configure_camera_s1_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (acc_config_reset_sink_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (configure_camera_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (configure_camera_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (configure_camera_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (configure_camera_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (configure_camera_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (configure_camera_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (configure_camera_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (configure_camera_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (configure_camera_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (configure_camera_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (configure_camera_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (configure_camera_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (configure_camera_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (configure_camera_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (configure_camera_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (configure_camera_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (configure_camera_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (configure_camera_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (configure_camera_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (configure_camera_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (configure_camera_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (configure_camera_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (configure_camera_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (configure_camera_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (configure_camera_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (configure_camera_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (configure_camera_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (configure_camera_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (configure_camera_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (configure_camera_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (configure_camera_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (configure_camera_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (configure_camera_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (configure_camera_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (configure_camera_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) configure_camera_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (configure_camera_s1_agent_rf_source_data),             //        in.data
		.in_valid          (configure_camera_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (configure_camera_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (configure_camera_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (configure_camera_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (configure_camera_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (configure_camera_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (configure_camera_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (configure_camera_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (configure_camera_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) configure_camera_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (configure_camera_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (configure_camera_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (configure_camera_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (configure_camera_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (configure_camera_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (configure_camera_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) yuv_ctrl_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (acc_config_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (yuv_ctrl_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (yuv_ctrl_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (yuv_ctrl_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (yuv_ctrl_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (yuv_ctrl_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (yuv_ctrl_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (yuv_ctrl_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (yuv_ctrl_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (yuv_ctrl_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (yuv_ctrl_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (yuv_ctrl_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (yuv_ctrl_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (yuv_ctrl_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (yuv_ctrl_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (yuv_ctrl_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (yuv_ctrl_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (yuv_ctrl_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (yuv_ctrl_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (yuv_ctrl_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (yuv_ctrl_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (yuv_ctrl_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (yuv_ctrl_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (yuv_ctrl_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (yuv_ctrl_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (yuv_ctrl_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (yuv_ctrl_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (yuv_ctrl_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (yuv_ctrl_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (yuv_ctrl_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (yuv_ctrl_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (yuv_ctrl_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (yuv_ctrl_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (yuv_ctrl_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (yuv_ctrl_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (yuv_ctrl_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) yuv_ctrl_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (yuv_ctrl_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (yuv_ctrl_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (yuv_ctrl_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (yuv_ctrl_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (yuv_ctrl_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (yuv_ctrl_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (yuv_ctrl_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (yuv_ctrl_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (yuv_ctrl_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (yuv_ctrl_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) yuv_ctrl_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (yuv_ctrl_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (yuv_ctrl_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (yuv_ctrl_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (yuv_ctrl_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (yuv_ctrl_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (yuv_ctrl_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) yuv_status_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (acc_config_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (yuv_status_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (yuv_status_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (yuv_status_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (yuv_status_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (yuv_status_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (yuv_status_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (yuv_status_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (yuv_status_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (yuv_status_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (yuv_status_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (yuv_status_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (yuv_status_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (yuv_status_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (yuv_status_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (yuv_status_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (yuv_status_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (yuv_status_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (yuv_status_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (yuv_status_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (yuv_status_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (yuv_status_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (yuv_status_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (yuv_status_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (yuv_status_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (yuv_status_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (yuv_status_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (yuv_status_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (yuv_status_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (yuv_status_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (yuv_status_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (yuv_status_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (yuv_status_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (yuv_status_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (yuv_status_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (yuv_status_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) yuv_status_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (yuv_status_s1_agent_rf_source_data),                //        in.data
		.in_valid          (yuv_status_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (yuv_status_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (yuv_status_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (yuv_status_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (yuv_status_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (yuv_status_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (yuv_status_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (yuv_status_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (yuv_status_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) yuv_status_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (yuv_status_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (yuv_status_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (yuv_status_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (yuv_status_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (yuv_status_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (yuv_status_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	Kvazaar_QSYS_mm_interconnect_3_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_002 router_002 (
		.sink_ready         (acc_config_altera_axi_slave_agent_write_rp_ready),         //      sink.ready
		.sink_valid         (acc_config_altera_axi_slave_agent_write_rp_valid),         //          .valid
		.sink_data          (acc_config_altera_axi_slave_agent_write_rp_data),          //          .data
		.sink_startofpacket (acc_config_altera_axi_slave_agent_write_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (acc_config_altera_axi_slave_agent_write_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                                     //       src.ready
		.src_valid          (router_002_src_valid),                                     //          .valid
		.src_data           (router_002_src_data),                                      //          .data
		.src_channel        (router_002_src_channel),                                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_003 router_003 (
		.sink_ready         (acc_config_altera_axi_slave_agent_read_rp_ready),         //      sink.ready
		.sink_valid         (acc_config_altera_axi_slave_agent_read_rp_valid),         //          .valid
		.sink_data          (acc_config_altera_axi_slave_agent_read_rp_data),          //          .data
		.sink_startofpacket (acc_config_altera_axi_slave_agent_read_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (acc_config_altera_axi_slave_agent_read_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //       src.ready
		.src_valid          (router_003_src_valid),                                    //          .valid
		.src_data           (router_003_src_data),                                     //          .data
		.src_channel        (router_003_src_channel),                                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_002 router_004 (
		.sink_ready         (axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_ready),         //      sink.ready
		.sink_valid         (axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_valid),         //          .valid
		.sink_data          (axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_data),          //          .data
		.sink_startofpacket (axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_unfiltered2_altera_axi_slave_agent_write_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (router_004_src_ready),                                              //       src.ready
		.src_valid          (router_004_src_valid),                                              //          .valid
		.src_data           (router_004_src_data),                                               //          .data
		.src_channel        (router_004_src_channel),                                            //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_003 router_005 (
		.sink_ready         (axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_ready),         //      sink.ready
		.sink_valid         (axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_valid),         //          .valid
		.sink_data          (axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_data),          //          .data
		.sink_startofpacket (axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_unfiltered2_altera_axi_slave_agent_read_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_005_src_ready),                                             //       src.ready
		.src_valid          (router_005_src_valid),                                             //          .valid
		.src_data           (router_005_src_data),                                              //          .data
		.src_channel        (router_005_src_channel),                                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                        //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_002 router_006 (
		.sink_ready         (axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_ready),         //      sink.ready
		.sink_valid         (axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_valid),         //          .valid
		.sink_data          (axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_data),          //          .data
		.sink_startofpacket (axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_unfiltered1_altera_axi_slave_agent_write_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (router_006_src_ready),                                              //       src.ready
		.src_valid          (router_006_src_valid),                                              //          .valid
		.src_data           (router_006_src_data),                                               //          .data
		.src_channel        (router_006_src_channel),                                            //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_003 router_007 (
		.sink_ready         (axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_ready),         //      sink.ready
		.sink_valid         (axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_valid),         //          .valid
		.sink_data          (axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_data),          //          .data
		.sink_startofpacket (axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_unfiltered1_altera_axi_slave_agent_read_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_007_src_ready),                                             //       src.ready
		.src_valid          (router_007_src_valid),                                             //          .valid
		.src_data           (router_007_src_data),                                              //          .data
		.src_channel        (router_007_src_channel),                                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                        //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_002 router_008 (
		.sink_ready         (axi_dma_orig_block_altera_axi_slave_agent_write_rp_ready),         //      sink.ready
		.sink_valid         (axi_dma_orig_block_altera_axi_slave_agent_write_rp_valid),         //          .valid
		.sink_data          (axi_dma_orig_block_altera_axi_slave_agent_write_rp_data),          //          .data
		.sink_startofpacket (axi_dma_orig_block_altera_axi_slave_agent_write_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_orig_block_altera_axi_slave_agent_write_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_008_src_ready),                                             //       src.ready
		.src_valid          (router_008_src_valid),                                             //          .valid
		.src_data           (router_008_src_data),                                              //          .data
		.src_channel        (router_008_src_channel),                                           //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                        //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_003 router_009 (
		.sink_ready         (axi_dma_orig_block_altera_axi_slave_agent_read_rp_ready),         //      sink.ready
		.sink_valid         (axi_dma_orig_block_altera_axi_slave_agent_read_rp_valid),         //          .valid
		.sink_data          (axi_dma_orig_block_altera_axi_slave_agent_read_rp_data),          //          .data
		.sink_startofpacket (axi_dma_orig_block_altera_axi_slave_agent_read_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_orig_block_altera_axi_slave_agent_read_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_009_src_ready),                                            //       src.ready
		.src_valid          (router_009_src_valid),                                            //          .valid
		.src_data           (router_009_src_data),                                             //          .data
		.src_channel        (router_009_src_channel),                                          //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                       //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_002 router_010 (
		.sink_ready         (dma_yuv_altera_axi_slave_agent_write_rp_ready),         //      sink.ready
		.sink_valid         (dma_yuv_altera_axi_slave_agent_write_rp_valid),         //          .valid
		.sink_data          (dma_yuv_altera_axi_slave_agent_write_rp_data),          //          .data
		.sink_startofpacket (dma_yuv_altera_axi_slave_agent_write_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_yuv_altera_axi_slave_agent_write_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_010_src_ready),                                  //       src.ready
		.src_valid          (router_010_src_valid),                                  //          .valid
		.src_data           (router_010_src_data),                                   //          .data
		.src_channel        (router_010_src_channel),                                //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                             //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_003 router_011 (
		.sink_ready         (dma_yuv_altera_axi_slave_agent_read_rp_ready),         //      sink.ready
		.sink_valid         (dma_yuv_altera_axi_slave_agent_read_rp_valid),         //          .valid
		.sink_data          (dma_yuv_altera_axi_slave_agent_read_rp_data),          //          .data
		.sink_startofpacket (dma_yuv_altera_axi_slave_agent_read_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_yuv_altera_axi_slave_agent_read_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_011_src_ready),                                 //       src.ready
		.src_valid          (router_011_src_valid),                                 //          .valid
		.src_data           (router_011_src_data),                                  //          .data
		.src_channel        (router_011_src_channel),                               //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                            //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_012 router_012 (
		.sink_ready         (sad_result_low_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (sad_result_low_s1_agent_rp_valid),                  //          .valid
		.sink_data          (sad_result_low_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (sad_result_low_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (sad_result_low_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                              //       src.ready
		.src_valid          (router_012_src_valid),                              //          .valid
		.src_data           (router_012_src_data),                               //          .data
		.src_channel        (router_012_src_channel),                            //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_012 router_013 (
		.sink_ready         (sad_result_high_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sad_result_high_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sad_result_high_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sad_result_high_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sad_result_high_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                              //       src.ready
		.src_valid          (router_013_src_valid),                              //          .valid
		.src_data           (router_013_src_data),                               //          .data
		.src_channel        (router_013_src_channel),                            //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_012 router_014 (
		.sink_ready         (result_ready_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (result_ready_s1_agent_rp_valid),                    //          .valid
		.sink_data          (result_ready_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (result_ready_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (result_ready_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                              //       src.ready
		.src_valid          (router_014_src_valid),                              //          .valid
		.src_data           (router_014_src_data),                               //          .data
		.src_channel        (router_014_src_channel),                            //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_012 router_015 (
		.sink_ready         (lcu_loaded_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (lcu_loaded_s1_agent_rp_valid),                      //          .valid
		.sink_data          (lcu_loaded_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (lcu_loaded_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (lcu_loaded_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                              //       src.ready
		.src_valid          (router_015_src_valid),                              //          .valid
		.src_data           (router_015_src_data),                               //          .data
		.src_channel        (router_015_src_channel),                            //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_012 router_016 (
		.sink_ready         (lambda_loaded_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (lambda_loaded_s1_agent_rp_valid),                   //          .valid
		.sink_data          (lambda_loaded_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (lambda_loaded_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (lambda_loaded_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                              //       src.ready
		.src_valid          (router_016_src_valid),                              //          .valid
		.src_data           (router_016_src_data),                               //          .data
		.src_channel        (router_016_src_channel),                            //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_017 router_017 (
		.sink_ready         (camera_control_oc_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (camera_control_oc_s1_agent_rp_valid),               //          .valid
		.sink_data          (camera_control_oc_s1_agent_rp_data),                //          .data
		.sink_startofpacket (camera_control_oc_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (camera_control_oc_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                              //       src.ready
		.src_valid          (router_017_src_valid),                              //          .valid
		.src_data           (router_017_src_data),                               //          .data
		.src_channel        (router_017_src_channel),                            //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_012 router_018 (
		.sink_ready         (configure_camera_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (configure_camera_s1_agent_rp_valid),                //          .valid
		.sink_data          (configure_camera_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (configure_camera_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (configure_camera_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                              //       src.ready
		.src_valid          (router_018_src_valid),                              //          .valid
		.src_data           (router_018_src_data),                               //          .data
		.src_channel        (router_018_src_channel),                            //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_012 router_019 (
		.sink_ready         (yuv_ctrl_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (yuv_ctrl_s1_agent_rp_valid),                        //          .valid
		.sink_data          (yuv_ctrl_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (yuv_ctrl_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (yuv_ctrl_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                              //       src.ready
		.src_valid          (router_019_src_valid),                              //          .valid
		.src_data           (router_019_src_data),                               //          .data
		.src_channel        (router_019_src_channel),                            //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_router_012 router_020 (
		.sink_ready         (yuv_status_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (yuv_status_s1_agent_rp_valid),                      //          .valid
		.sink_data          (yuv_status_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (yuv_status_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (yuv_status_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                              //       src.ready
		.src_valid          (router_020_src_valid),                              //          .valid
		.src_data           (router_020_src_data),                               //          .data
		.src_channel        (router_020_src_channel),                            //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                         //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (140),
		.PKT_DEST_ID_L             (137),
		.PKT_SRC_ID_H              (136),
		.PKT_SRC_ID_L              (133),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (108),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (165),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (140),
		.PKT_DEST_ID_L             (137),
		.PKT_SRC_ID_H              (136),
		.PKT_SRC_ID_L              (133),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (108),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (165),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                             //          .valid
		.cmd_sink_data          (router_001_src_data),                                              //          .data
		.cmd_sink_channel       (router_001_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) acc_config_altera_axi_slave_wr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                      //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (acc_config_altera_axi_slave_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (acc_config_altera_axi_slave_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (acc_config_altera_axi_slave_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (acc_config_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (acc_config_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (acc_config_altera_axi_slave_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) acc_config_altera_axi_slave_rd_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                      //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (acc_config_altera_axi_slave_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (acc_config_altera_axi_slave_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (acc_config_altera_axi_slave_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (acc_config_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (acc_config_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (acc_config_altera_axi_slave_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                               //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.sink0_valid           (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_dma_unfiltered2_altera_axi_slave_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                               //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.sink0_valid           (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_dma_unfiltered2_altera_axi_slave_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                               //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.sink0_valid           (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_dma_unfiltered1_altera_axi_slave_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                               //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.sink0_valid           (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_dma_unfiltered1_altera_axi_slave_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) axi_dma_orig_block_altera_axi_slave_wr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                              //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),                          // cr0_reset.reset
		.sink0_valid           (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_dma_orig_block_altera_axi_slave_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) axi_dma_orig_block_altera_axi_slave_rd_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                              //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),                          // cr0_reset.reset
		.sink0_valid           (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_dma_orig_block_altera_axi_slave_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dma_yuv_altera_axi_slave_wr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                   //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_yuv_altera_axi_slave_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dma_yuv_altera_axi_slave_rd_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                   //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_yuv_altera_axi_slave_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sad_result_low_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                         //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (sad_result_low_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sad_result_low_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sad_result_low_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sad_result_low_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sad_result_low_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sad_result_low_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sad_result_low_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sad_result_low_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sad_result_low_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sad_result_low_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sad_result_low_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sad_result_low_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sad_result_high_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sad_result_high_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sad_result_high_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sad_result_high_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sad_result_high_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sad_result_high_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sad_result_high_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sad_result_high_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sad_result_high_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sad_result_high_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sad_result_high_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sad_result_high_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sad_result_high_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) result_ready_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (result_ready_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (result_ready_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (result_ready_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (result_ready_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (result_ready_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (result_ready_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (result_ready_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (result_ready_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (result_ready_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (result_ready_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (result_ready_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (result_ready_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) lcu_loaded_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (lcu_loaded_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (lcu_loaded_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (lcu_loaded_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (lcu_loaded_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (lcu_loaded_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (lcu_loaded_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (lcu_loaded_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lcu_loaded_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (lcu_loaded_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lcu_loaded_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lcu_loaded_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lcu_loaded_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) lambda_loaded_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                        //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (lambda_loaded_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (lambda_loaded_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (lambda_loaded_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (lambda_loaded_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (lambda_loaded_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (lambda_loaded_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (lambda_loaded_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lambda_loaded_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (lambda_loaded_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lambda_loaded_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lambda_loaded_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lambda_loaded_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (77),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (72),
		.PKT_BURST_SIZE_L          (70),
		.PKT_BURST_TYPE_H          (74),
		.PKT_BURST_TYPE_L          (73),
		.PKT_BURSTWRAP_H           (69),
		.PKT_BURSTWRAP_L           (62),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (111),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (69),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) camera_control_oc_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                            //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (camera_control_oc_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (camera_control_oc_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (camera_control_oc_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (camera_control_oc_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (camera_control_oc_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (camera_control_oc_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (camera_control_oc_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (camera_control_oc_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (camera_control_oc_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (camera_control_oc_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (camera_control_oc_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (camera_control_oc_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) configure_camera_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                           //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (configure_camera_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (configure_camera_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (configure_camera_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (configure_camera_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (configure_camera_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (configure_camera_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (configure_camera_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (configure_camera_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (configure_camera_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (configure_camera_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (configure_camera_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (configure_camera_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) yuv_ctrl_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (yuv_ctrl_s1_cmd_width_adapter_src_valid),           //     sink0.valid
		.sink0_data            (yuv_ctrl_s1_cmd_width_adapter_src_data),            //          .data
		.sink0_channel         (yuv_ctrl_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink0_startofpacket   (yuv_ctrl_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink0_endofpacket     (yuv_ctrl_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink0_ready           (yuv_ctrl_s1_cmd_width_adapter_src_ready),           //          .ready
		.source0_valid         (yuv_ctrl_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (yuv_ctrl_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (yuv_ctrl_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (yuv_ctrl_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (yuv_ctrl_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (yuv_ctrl_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) yuv_status_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (acc_config_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (yuv_status_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (yuv_status_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (yuv_status_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (yuv_status_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (yuv_status_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (yuv_status_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (yuv_status_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (yuv_status_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (yuv_status_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (yuv_status_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (yuv_status_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (yuv_status_s1_burst_adapter_source0_ready)          //          .ready
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                             //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                             //           .valid
		.src0_data           (cmd_demux_src0_data),                                              //           .data
		.src0_channel        (cmd_demux_src0_channel),                                           //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                             //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                             //           .valid
		.src1_data           (cmd_demux_src1_data),                                              //           .data
		.src1_channel        (cmd_demux_src1_channel),                                           //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                       //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                             //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                             //           .valid
		.src2_data           (cmd_demux_src2_data),                                              //           .data
		.src2_channel        (cmd_demux_src2_channel),                                           //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                     //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                       //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                             //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                             //           .valid
		.src3_data           (cmd_demux_src3_data),                                              //           .data
		.src3_channel        (cmd_demux_src3_channel),                                           //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                     //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                       //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                             //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                             //           .valid
		.src4_data           (cmd_demux_src4_data),                                              //           .data
		.src4_channel        (cmd_demux_src4_channel),                                           //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                     //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                       //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                             //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                             //           .valid
		.src5_data           (cmd_demux_src5_data),                                              //           .data
		.src5_channel        (cmd_demux_src5_channel),                                           //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                     //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                       //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                             //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                             //           .valid
		.src6_data           (cmd_demux_src6_data),                                              //           .data
		.src6_channel        (cmd_demux_src6_channel),                                           //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                     //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                       //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                             //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                             //           .valid
		.src7_data           (cmd_demux_src7_data),                                              //           .data
		.src7_channel        (cmd_demux_src7_channel),                                           //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                     //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                       //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                             //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                             //           .valid
		.src8_data           (cmd_demux_src8_data),                                              //           .data
		.src8_channel        (cmd_demux_src8_channel),                                           //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                     //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                       //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                             //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                             //           .valid
		.src9_data           (cmd_demux_src9_data),                                              //           .data
		.src9_channel        (cmd_demux_src9_channel),                                           //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                     //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                       //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                            //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                            //           .valid
		.src10_data          (cmd_demux_src10_data),                                             //           .data
		.src10_channel       (cmd_demux_src10_channel),                                          //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                    //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                      //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                            //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                            //           .valid
		.src11_data          (cmd_demux_src11_data),                                             //           .data
		.src11_channel       (cmd_demux_src11_channel),                                          //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                    //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                      //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                            //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                            //           .valid
		.src12_data          (cmd_demux_src12_data),                                             //           .data
		.src12_channel       (cmd_demux_src12_channel),                                          //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                    //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                      //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                            //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                            //           .valid
		.src13_data          (cmd_demux_src13_data),                                             //           .data
		.src13_channel       (cmd_demux_src13_channel),                                          //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                                    //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket)                                       //           .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_demux cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                  //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                        //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                        //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                         //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                      //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                  //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                        //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                        //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                         //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                      //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                                  //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                        //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                        //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                         //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                                      //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                                //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket)                                   //           .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                 //          .valid
		.src_data            (cmd_mux_src_data),                                  //          .data
		.src_channel         (cmd_mux_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                            //          .channel
		.sink0_data          (cmd_demux_src0_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                             //          .valid
		.src_data            (cmd_mux_001_src_data),                              //          .data
		.src_channel         (cmd_mux_001_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_001_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src0_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                             //          .valid
		.src_data            (cmd_mux_002_src_data),                              //          .data
		.src_channel         (cmd_mux_002_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                            //          .channel
		.sink0_data          (cmd_demux_src1_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                             //          .valid
		.src_data            (cmd_mux_003_src_data),                              //          .data
		.src_channel         (cmd_mux_003_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src1_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                             //          .valid
		.src_data            (cmd_mux_004_src_data),                              //          .data
		.src_channel         (cmd_mux_004_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                            //          .channel
		.sink0_data          (cmd_demux_src2_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                             //          .valid
		.src_data            (cmd_mux_005_src_data),                              //          .data
		.src_channel         (cmd_mux_005_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                             //          .valid
		.src_data            (cmd_mux_006_src_data),                              //          .data
		.src_channel         (cmd_mux_006_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                            //          .channel
		.sink0_data          (cmd_demux_src3_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                             //          .valid
		.src_data            (cmd_mux_007_src_data),                              //          .data
		.src_channel         (cmd_mux_007_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                             //          .valid
		.src_data            (cmd_mux_008_src_data),                              //          .data
		.src_channel         (cmd_mux_008_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                            //          .channel
		.sink0_data          (cmd_demux_src4_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                             //          .valid
		.src_data            (cmd_mux_009_src_data),                              //          .data
		.src_channel         (cmd_mux_009_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux_010 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                             //          .valid
		.src_data            (cmd_mux_010_src_data),                              //          .data
		.src_channel         (cmd_mux_010_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                            //          .channel
		.sink0_data          (cmd_demux_src5_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux_010 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                             //          .valid
		.src_data            (cmd_mux_011_src_data),                              //          .data
		.src_channel         (cmd_mux_011_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                            //          .channel
		.sink0_data          (cmd_demux_src6_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux_010 cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                             //          .valid
		.src_data            (cmd_mux_012_src_data),                              //          .data
		.src_channel         (cmd_mux_012_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                            //          .channel
		.sink0_data          (cmd_demux_src7_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux_010 cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                             //          .valid
		.src_data            (cmd_mux_013_src_data),                              //          .data
		.src_channel         (cmd_mux_013_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                            //          .channel
		.sink0_data          (cmd_demux_src8_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux_010 cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                             //          .valid
		.src_data            (cmd_mux_014_src_data),                              //          .data
		.src_channel         (cmd_mux_014_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                            //          .channel
		.sink0_data          (cmd_demux_src9_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux_010 cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                             //          .valid
		.src_data            (cmd_mux_015_src_data),                              //          .data
		.src_channel         (cmd_mux_015_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                           //          .channel
		.sink0_data          (cmd_demux_src10_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)                    //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux_010 cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                             //          .valid
		.src_data            (cmd_mux_016_src_data),                              //          .data
		.src_channel         (cmd_mux_016_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                           //          .channel
		.sink0_data          (cmd_demux_src11_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)                    //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux_010 cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                             //          .valid
		.src_data            (cmd_mux_017_src_data),                              //          .data
		.src_channel         (cmd_mux_017_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                           //          .channel
		.sink0_data          (cmd_demux_src12_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)                    //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_cmd_mux_010 cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                             //          .valid
		.src_data            (cmd_mux_018_src_data),                              //          .data
		.src_channel         (cmd_mux_018_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                           //          .channel
		.sink0_data          (cmd_demux_src13_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src13_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src13_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src13_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src13_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src13_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src13_endofpacket)                    //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                               //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                               //          .valid
		.src0_data          (rsp_demux_src0_data),                                                //          .data
		.src0_channel       (rsp_demux_src0_channel),                                             //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                          //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                           //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                           //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                            //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                         //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                      //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                                               //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.sink_ready         (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                               //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                                               //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.sink_ready         (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                                    //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                                    //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                                     //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                                  //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                               //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                                               //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.sink_ready         (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                                    //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                                    //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                                     //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                                  //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                               //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                                               //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.sink_ready         (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                                               //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                                              //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.sink_ready         (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                                   //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                                   //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                                    //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                                 //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                                              //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                                              //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.sink_ready         (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                                   //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                                   //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                                    //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                                 //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                                              //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.sink_ready         (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                                   //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.sink_ready         (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                                   //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux_010 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (sad_result_low_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sad_result_low_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sad_result_low_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sad_result_low_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sad_result_low_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sad_result_low_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_010_src0_data),                               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_010_src1_data),                               //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                         //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux_010 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sad_result_high_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sad_result_high_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sad_result_high_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sad_result_high_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sad_result_high_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sad_result_high_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                         //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                               //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                               //          .valid
		.src1_data          (rsp_demux_011_src1_data),                                //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                             //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                       //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                          //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux_010 rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (result_ready_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (result_ready_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (result_ready_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (result_ready_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (result_ready_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (result_ready_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_012_src0_data),                             //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_012_src1_data),                             //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                       //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux_010 rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (lcu_loaded_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (lcu_loaded_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (lcu_loaded_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (lcu_loaded_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (lcu_loaded_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (lcu_loaded_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_013_src0_data),                           //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_013_src1_data),                           //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux_010 rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (lambda_loaded_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (lambda_loaded_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (lambda_loaded_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (lambda_loaded_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (lambda_loaded_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (lambda_loaded_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_014_src0_data),                              //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_014_src1_data),                              //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)                        //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux_010 rsp_demux_015 (
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),        // clk_reset.reset
		.sink_ready         (camera_control_oc_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (camera_control_oc_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (camera_control_oc_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (camera_control_oc_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (camera_control_oc_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (camera_control_oc_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_015_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                           //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                                 //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                                 //          .valid
		.src1_data          (rsp_demux_015_src1_data),                                  //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                               //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                            //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux_010 rsp_demux_016 (
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset),       // clk_reset.reset
		.sink_ready         (configure_camera_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (configure_camera_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (configure_camera_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (configure_camera_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (configure_camera_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (configure_camera_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_016_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_016_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)                           //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux_010 rsp_demux_017 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (yuv_ctrl_s1_rsp_width_adapter_src_ready),           //      sink.ready
		.sink_channel       (yuv_ctrl_s1_rsp_width_adapter_src_channel),         //          .channel
		.sink_data          (yuv_ctrl_s1_rsp_width_adapter_src_data),            //          .data
		.sink_startofpacket (yuv_ctrl_s1_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink_endofpacket   (yuv_ctrl_s1_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink_valid         (yuv_ctrl_s1_rsp_width_adapter_src_valid),           //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_017_src0_data),                           //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_017_src1_data),                           //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_demux_010 rsp_demux_018 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (yuv_status_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (yuv_status_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (yuv_status_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (yuv_status_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (yuv_status_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (yuv_status_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_018_src0_data),                           //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_018_src1_data),                           //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                     //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                //          .valid
		.src_data             (rsp_mux_src_data),                                                 //          .data
		.src_channel          (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                             //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                             //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                           //          .channel
		.sink0_data           (rsp_demux_src0_data),                                              //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                       //          .endofpacket
		.sink1_ready          (rsp_demux_002_src0_ready),                                         //     sink1.ready
		.sink1_valid          (rsp_demux_002_src0_valid),                                         //          .valid
		.sink1_channel        (rsp_demux_002_src0_channel),                                       //          .channel
		.sink1_data           (rsp_demux_002_src0_data),                                          //          .data
		.sink1_startofpacket  (rsp_demux_002_src0_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_002_src0_endofpacket),                                   //          .endofpacket
		.sink2_ready          (rsp_demux_004_src0_ready),                                         //     sink2.ready
		.sink2_valid          (rsp_demux_004_src0_valid),                                         //          .valid
		.sink2_channel        (rsp_demux_004_src0_channel),                                       //          .channel
		.sink2_data           (rsp_demux_004_src0_data),                                          //          .data
		.sink2_startofpacket  (rsp_demux_004_src0_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_004_src0_endofpacket),                                   //          .endofpacket
		.sink3_ready          (rsp_demux_006_src0_ready),                                         //     sink3.ready
		.sink3_valid          (rsp_demux_006_src0_valid),                                         //          .valid
		.sink3_channel        (rsp_demux_006_src0_channel),                                       //          .channel
		.sink3_data           (rsp_demux_006_src0_data),                                          //          .data
		.sink3_startofpacket  (rsp_demux_006_src0_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_006_src0_endofpacket),                                   //          .endofpacket
		.sink4_ready          (rsp_demux_008_src0_ready),                                         //     sink4.ready
		.sink4_valid          (rsp_demux_008_src0_valid),                                         //          .valid
		.sink4_channel        (rsp_demux_008_src0_channel),                                       //          .channel
		.sink4_data           (rsp_demux_008_src0_data),                                          //          .data
		.sink4_startofpacket  (rsp_demux_008_src0_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_008_src0_endofpacket),                                   //          .endofpacket
		.sink5_ready          (rsp_demux_010_src0_ready),                                         //     sink5.ready
		.sink5_valid          (rsp_demux_010_src0_valid),                                         //          .valid
		.sink5_channel        (rsp_demux_010_src0_channel),                                       //          .channel
		.sink5_data           (rsp_demux_010_src0_data),                                          //          .data
		.sink5_startofpacket  (rsp_demux_010_src0_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_010_src0_endofpacket),                                   //          .endofpacket
		.sink6_ready          (rsp_demux_011_src0_ready),                                         //     sink6.ready
		.sink6_valid          (rsp_demux_011_src0_valid),                                         //          .valid
		.sink6_channel        (rsp_demux_011_src0_channel),                                       //          .channel
		.sink6_data           (rsp_demux_011_src0_data),                                          //          .data
		.sink6_startofpacket  (rsp_demux_011_src0_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_011_src0_endofpacket),                                   //          .endofpacket
		.sink7_ready          (rsp_demux_012_src0_ready),                                         //     sink7.ready
		.sink7_valid          (rsp_demux_012_src0_valid),                                         //          .valid
		.sink7_channel        (rsp_demux_012_src0_channel),                                       //          .channel
		.sink7_data           (rsp_demux_012_src0_data),                                          //          .data
		.sink7_startofpacket  (rsp_demux_012_src0_startofpacket),                                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_012_src0_endofpacket),                                   //          .endofpacket
		.sink8_ready          (rsp_demux_013_src0_ready),                                         //     sink8.ready
		.sink8_valid          (rsp_demux_013_src0_valid),                                         //          .valid
		.sink8_channel        (rsp_demux_013_src0_channel),                                       //          .channel
		.sink8_data           (rsp_demux_013_src0_data),                                          //          .data
		.sink8_startofpacket  (rsp_demux_013_src0_startofpacket),                                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_013_src0_endofpacket),                                   //          .endofpacket
		.sink9_ready          (rsp_demux_014_src0_ready),                                         //     sink9.ready
		.sink9_valid          (rsp_demux_014_src0_valid),                                         //          .valid
		.sink9_channel        (rsp_demux_014_src0_channel),                                       //          .channel
		.sink9_data           (rsp_demux_014_src0_data),                                          //          .data
		.sink9_startofpacket  (rsp_demux_014_src0_startofpacket),                                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_014_src0_endofpacket),                                   //          .endofpacket
		.sink10_ready         (rsp_demux_015_src0_ready),                                         //    sink10.ready
		.sink10_valid         (rsp_demux_015_src0_valid),                                         //          .valid
		.sink10_channel       (rsp_demux_015_src0_channel),                                       //          .channel
		.sink10_data          (rsp_demux_015_src0_data),                                          //          .data
		.sink10_startofpacket (rsp_demux_015_src0_startofpacket),                                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_015_src0_endofpacket),                                   //          .endofpacket
		.sink11_ready         (rsp_demux_016_src0_ready),                                         //    sink11.ready
		.sink11_valid         (rsp_demux_016_src0_valid),                                         //          .valid
		.sink11_channel       (rsp_demux_016_src0_channel),                                       //          .channel
		.sink11_data          (rsp_demux_016_src0_data),                                          //          .data
		.sink11_startofpacket (rsp_demux_016_src0_startofpacket),                                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_016_src0_endofpacket),                                   //          .endofpacket
		.sink12_ready         (rsp_demux_017_src0_ready),                                         //    sink12.ready
		.sink12_valid         (rsp_demux_017_src0_valid),                                         //          .valid
		.sink12_channel       (rsp_demux_017_src0_channel),                                       //          .channel
		.sink12_data          (rsp_demux_017_src0_data),                                          //          .data
		.sink12_startofpacket (rsp_demux_017_src0_startofpacket),                                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_017_src0_endofpacket),                                   //          .endofpacket
		.sink13_ready         (rsp_demux_018_src0_ready),                                         //    sink13.ready
		.sink13_valid         (rsp_demux_018_src0_valid),                                         //          .valid
		.sink13_channel       (rsp_demux_018_src0_channel),                                       //          .channel
		.sink13_data          (rsp_demux_018_src0_data),                                          //          .data
		.sink13_startofpacket (rsp_demux_018_src0_startofpacket),                                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_018_src0_endofpacket)                                    //          .endofpacket
	);

	Kvazaar_QSYS_mm_interconnect_3_rsp_mux rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                            //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                            //          .valid
		.src_data             (rsp_mux_001_src_data),                                             //          .data
		.src_channel          (rsp_mux_001_src_channel),                                          //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready          (rsp_demux_001_src0_ready),                                         //     sink0.ready
		.sink0_valid          (rsp_demux_001_src0_valid),                                         //          .valid
		.sink0_channel        (rsp_demux_001_src0_channel),                                       //          .channel
		.sink0_data           (rsp_demux_001_src0_data),                                          //          .data
		.sink0_startofpacket  (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket    (rsp_demux_001_src0_endofpacket),                                   //          .endofpacket
		.sink1_ready          (rsp_demux_003_src0_ready),                                         //     sink1.ready
		.sink1_valid          (rsp_demux_003_src0_valid),                                         //          .valid
		.sink1_channel        (rsp_demux_003_src0_channel),                                       //          .channel
		.sink1_data           (rsp_demux_003_src0_data),                                          //          .data
		.sink1_startofpacket  (rsp_demux_003_src0_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_003_src0_endofpacket),                                   //          .endofpacket
		.sink2_ready          (rsp_demux_005_src0_ready),                                         //     sink2.ready
		.sink2_valid          (rsp_demux_005_src0_valid),                                         //          .valid
		.sink2_channel        (rsp_demux_005_src0_channel),                                       //          .channel
		.sink2_data           (rsp_demux_005_src0_data),                                          //          .data
		.sink2_startofpacket  (rsp_demux_005_src0_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_005_src0_endofpacket),                                   //          .endofpacket
		.sink3_ready          (rsp_demux_007_src0_ready),                                         //     sink3.ready
		.sink3_valid          (rsp_demux_007_src0_valid),                                         //          .valid
		.sink3_channel        (rsp_demux_007_src0_channel),                                       //          .channel
		.sink3_data           (rsp_demux_007_src0_data),                                          //          .data
		.sink3_startofpacket  (rsp_demux_007_src0_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_007_src0_endofpacket),                                   //          .endofpacket
		.sink4_ready          (rsp_demux_009_src0_ready),                                         //     sink4.ready
		.sink4_valid          (rsp_demux_009_src0_valid),                                         //          .valid
		.sink4_channel        (rsp_demux_009_src0_channel),                                       //          .channel
		.sink4_data           (rsp_demux_009_src0_data),                                          //          .data
		.sink4_startofpacket  (rsp_demux_009_src0_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_009_src0_endofpacket),                                   //          .endofpacket
		.sink5_ready          (rsp_demux_010_src1_ready),                                         //     sink5.ready
		.sink5_valid          (rsp_demux_010_src1_valid),                                         //          .valid
		.sink5_channel        (rsp_demux_010_src1_channel),                                       //          .channel
		.sink5_data           (rsp_demux_010_src1_data),                                          //          .data
		.sink5_startofpacket  (rsp_demux_010_src1_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_010_src1_endofpacket),                                   //          .endofpacket
		.sink6_ready          (rsp_demux_011_src1_ready),                                         //     sink6.ready
		.sink6_valid          (rsp_demux_011_src1_valid),                                         //          .valid
		.sink6_channel        (rsp_demux_011_src1_channel),                                       //          .channel
		.sink6_data           (rsp_demux_011_src1_data),                                          //          .data
		.sink6_startofpacket  (rsp_demux_011_src1_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_011_src1_endofpacket),                                   //          .endofpacket
		.sink7_ready          (rsp_demux_012_src1_ready),                                         //     sink7.ready
		.sink7_valid          (rsp_demux_012_src1_valid),                                         //          .valid
		.sink7_channel        (rsp_demux_012_src1_channel),                                       //          .channel
		.sink7_data           (rsp_demux_012_src1_data),                                          //          .data
		.sink7_startofpacket  (rsp_demux_012_src1_startofpacket),                                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_012_src1_endofpacket),                                   //          .endofpacket
		.sink8_ready          (rsp_demux_013_src1_ready),                                         //     sink8.ready
		.sink8_valid          (rsp_demux_013_src1_valid),                                         //          .valid
		.sink8_channel        (rsp_demux_013_src1_channel),                                       //          .channel
		.sink8_data           (rsp_demux_013_src1_data),                                          //          .data
		.sink8_startofpacket  (rsp_demux_013_src1_startofpacket),                                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_013_src1_endofpacket),                                   //          .endofpacket
		.sink9_ready          (rsp_demux_014_src1_ready),                                         //     sink9.ready
		.sink9_valid          (rsp_demux_014_src1_valid),                                         //          .valid
		.sink9_channel        (rsp_demux_014_src1_channel),                                       //          .channel
		.sink9_data           (rsp_demux_014_src1_data),                                          //          .data
		.sink9_startofpacket  (rsp_demux_014_src1_startofpacket),                                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_014_src1_endofpacket),                                   //          .endofpacket
		.sink10_ready         (rsp_demux_015_src1_ready),                                         //    sink10.ready
		.sink10_valid         (rsp_demux_015_src1_valid),                                         //          .valid
		.sink10_channel       (rsp_demux_015_src1_channel),                                       //          .channel
		.sink10_data          (rsp_demux_015_src1_data),                                          //          .data
		.sink10_startofpacket (rsp_demux_015_src1_startofpacket),                                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_015_src1_endofpacket),                                   //          .endofpacket
		.sink11_ready         (rsp_demux_016_src1_ready),                                         //    sink11.ready
		.sink11_valid         (rsp_demux_016_src1_valid),                                         //          .valid
		.sink11_channel       (rsp_demux_016_src1_channel),                                       //          .channel
		.sink11_data          (rsp_demux_016_src1_data),                                          //          .data
		.sink11_startofpacket (rsp_demux_016_src1_startofpacket),                                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_016_src1_endofpacket),                                   //          .endofpacket
		.sink12_ready         (rsp_demux_017_src1_ready),                                         //    sink12.ready
		.sink12_valid         (rsp_demux_017_src1_valid),                                         //          .valid
		.sink12_channel       (rsp_demux_017_src1_channel),                                       //          .channel
		.sink12_data          (rsp_demux_017_src1_data),                                          //          .data
		.sink12_startofpacket (rsp_demux_017_src1_startofpacket),                                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_017_src1_endofpacket),                                   //          .endofpacket
		.sink13_ready         (rsp_demux_018_src1_ready),                                         //    sink13.ready
		.sink13_valid         (rsp_demux_018_src1_valid),                                         //          .valid
		.sink13_channel       (rsp_demux_018_src1_channel),                                       //          .channel
		.sink13_data          (rsp_demux_018_src1_data),                                          //          .data
		.sink13_startofpacket (rsp_demux_018_src1_startofpacket),                                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_018_src1_endofpacket)                                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) acc_config_altera_axi_slave_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_002_src_valid),                                               //      sink.valid
		.in_channel           (router_002_src_channel),                                             //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                         //          .endofpacket
		.in_ready             (router_002_src_ready),                                               //          .ready
		.in_data              (router_002_src_data),                                                //          .data
		.out_endofpacket      (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (acc_config_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) acc_config_altera_axi_slave_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_003_src_valid),                                               //      sink.valid
		.in_channel           (router_003_src_channel),                                             //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                         //          .endofpacket
		.in_ready             (router_003_src_ready),                                               //          .ready
		.in_data              (router_003_src_data),                                                //          .data
		.out_endofpacket      (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (acc_config_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                               //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (router_004_src_valid),                                                        //      sink.valid
		.in_channel           (router_004_src_channel),                                                      //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                                                //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                                  //          .endofpacket
		.in_ready             (router_004_src_ready),                                                        //          .ready
		.in_data              (router_004_src_data),                                                         //          .data
		.out_endofpacket      (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_unfiltered2_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                               //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (router_005_src_valid),                                                        //      sink.valid
		.in_channel           (router_005_src_channel),                                                      //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                                                //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                                  //          .endofpacket
		.in_ready             (router_005_src_ready),                                                        //          .ready
		.in_data              (router_005_src_data),                                                         //          .data
		.out_endofpacket      (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_unfiltered2_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                               //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (router_006_src_valid),                                                        //      sink.valid
		.in_channel           (router_006_src_channel),                                                      //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                                                //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                                  //          .endofpacket
		.in_ready             (router_006_src_ready),                                                        //          .ready
		.in_data              (router_006_src_data),                                                         //          .data
		.out_endofpacket      (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_unfiltered1_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                               //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (router_007_src_valid),                                                        //      sink.valid
		.in_channel           (router_007_src_channel),                                                      //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                                                //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                                                  //          .endofpacket
		.in_ready             (router_007_src_ready),                                                        //          .ready
		.in_data              (router_007_src_data),                                                         //          .data
		.out_endofpacket      (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_unfiltered1_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                              //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (router_008_src_valid),                                                       //      sink.valid
		.in_channel           (router_008_src_channel),                                                     //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                                                 //          .endofpacket
		.in_ready             (router_008_src_ready),                                                       //          .ready
		.in_data              (router_008_src_data),                                                        //          .data
		.out_endofpacket      (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_orig_block_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                              //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (router_009_src_valid),                                                       //      sink.valid
		.in_channel           (router_009_src_channel),                                                     //          .channel
		.in_startofpacket     (router_009_src_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (router_009_src_endofpacket),                                                 //          .endofpacket
		.in_ready             (router_009_src_ready),                                                       //          .ready
		.in_data              (router_009_src_data),                                                        //          .data
		.out_endofpacket      (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_orig_block_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dma_yuv_altera_axi_slave_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                   //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (router_010_src_valid),                                            //      sink.valid
		.in_channel           (router_010_src_channel),                                          //          .channel
		.in_startofpacket     (router_010_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (router_010_src_endofpacket),                                      //          .endofpacket
		.in_ready             (router_010_src_ready),                                            //          .ready
		.in_data              (router_010_src_data),                                             //          .data
		.out_endofpacket      (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_yuv_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dma_yuv_altera_axi_slave_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                   //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (router_011_src_valid),                                            //      sink.valid
		.in_channel           (router_011_src_channel),                                          //          .channel
		.in_startofpacket     (router_011_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (router_011_src_endofpacket),                                      //          .endofpacket
		.in_ready             (router_011_src_ready),                                            //          .ready
		.in_data              (router_011_src_data),                                             //          .data
		.out_endofpacket      (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_yuv_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sad_result_low_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                         //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_012_src_valid),                                  //      sink.valid
		.in_channel           (router_012_src_channel),                                //          .channel
		.in_startofpacket     (router_012_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_012_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_012_src_ready),                                  //          .ready
		.in_data              (router_012_src_data),                                   //          .data
		.out_endofpacket      (sad_result_low_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sad_result_low_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sad_result_low_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sad_result_low_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sad_result_low_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sad_result_low_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sad_result_high_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                          //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_013_src_valid),                                   //      sink.valid
		.in_channel           (router_013_src_channel),                                 //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                             //          .endofpacket
		.in_ready             (router_013_src_ready),                                   //          .ready
		.in_data              (router_013_src_data),                                    //          .data
		.out_endofpacket      (sad_result_high_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sad_result_high_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sad_result_high_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sad_result_high_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sad_result_high_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sad_result_high_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) result_ready_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                       //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_014_src_valid),                                //      sink.valid
		.in_channel           (router_014_src_channel),                              //          .channel
		.in_startofpacket     (router_014_src_startofpacket),                        //          .startofpacket
		.in_endofpacket       (router_014_src_endofpacket),                          //          .endofpacket
		.in_ready             (router_014_src_ready),                                //          .ready
		.in_data              (router_014_src_data),                                 //          .data
		.out_endofpacket      (result_ready_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (result_ready_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (result_ready_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (result_ready_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (result_ready_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (result_ready_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) lcu_loaded_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                     //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_015_src_valid),                              //      sink.valid
		.in_channel           (router_015_src_channel),                            //          .channel
		.in_startofpacket     (router_015_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (router_015_src_endofpacket),                        //          .endofpacket
		.in_ready             (router_015_src_ready),                              //          .ready
		.in_data              (router_015_src_data),                               //          .data
		.out_endofpacket      (lcu_loaded_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lcu_loaded_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (lcu_loaded_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (lcu_loaded_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (lcu_loaded_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lcu_loaded_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) lambda_loaded_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                        //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (router_016_src_valid),                                 //      sink.valid
		.in_channel           (router_016_src_channel),                               //          .channel
		.in_startofpacket     (router_016_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (router_016_src_endofpacket),                           //          .endofpacket
		.in_ready             (router_016_src_ready),                                 //          .ready
		.in_data              (router_016_src_data),                                  //          .data
		.out_endofpacket      (lambda_loaded_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lambda_loaded_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (lambda_loaded_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (lambda_loaded_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (lambda_loaded_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lambda_loaded_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (61),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (69),
		.IN_PKT_BURSTWRAP_L            (62),
		.IN_PKT_BURST_SIZE_H           (72),
		.IN_PKT_BURST_SIZE_L           (70),
		.IN_PKT_RESPONSE_STATUS_H      (107),
		.IN_PKT_RESPONSE_STATUS_L      (106),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (74),
		.IN_PKT_BURST_TYPE_L           (73),
		.IN_PKT_ORI_BURST_SIZE_L       (108),
		.IN_PKT_ORI_BURST_SIZE_H       (110),
		.IN_ST_DATA_W                  (111),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) camera_control_oc_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                            //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (router_017_src_valid),                                     //      sink.valid
		.in_channel           (router_017_src_channel),                                   //          .channel
		.in_startofpacket     (router_017_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (router_017_src_endofpacket),                               //          .endofpacket
		.in_ready             (router_017_src_ready),                                     //          .ready
		.in_data              (router_017_src_data),                                      //          .data
		.out_endofpacket      (camera_control_oc_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (camera_control_oc_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (camera_control_oc_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (camera_control_oc_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (camera_control_oc_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (camera_control_oc_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) configure_camera_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                           //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (router_018_src_valid),                                    //      sink.valid
		.in_channel           (router_018_src_channel),                                  //          .channel
		.in_startofpacket     (router_018_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_018_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_018_src_ready),                                    //          .ready
		.in_data              (router_018_src_data),                                     //          .data
		.out_endofpacket      (configure_camera_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (configure_camera_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (configure_camera_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (configure_camera_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (configure_camera_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (configure_camera_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) yuv_ctrl_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                     //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_019_src_valid),                              //      sink.valid
		.in_channel           (router_019_src_channel),                            //          .channel
		.in_startofpacket     (router_019_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (router_019_src_endofpacket),                        //          .endofpacket
		.in_ready             (router_019_src_ready),                              //          .ready
		.in_data              (router_019_src_data),                               //          .data
		.out_endofpacket      (yuv_ctrl_s1_rsp_width_adapter_src_endofpacket),     //       src.endofpacket
		.out_data             (yuv_ctrl_s1_rsp_width_adapter_src_data),            //          .data
		.out_channel          (yuv_ctrl_s1_rsp_width_adapter_src_channel),         //          .channel
		.out_valid            (yuv_ctrl_s1_rsp_width_adapter_src_valid),           //          .valid
		.out_ready            (yuv_ctrl_s1_rsp_width_adapter_src_ready),           //          .ready
		.out_startofpacket    (yuv_ctrl_s1_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (161),
		.OUT_PKT_RESPONSE_STATUS_L     (160),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (162),
		.OUT_PKT_ORI_BURST_SIZE_H      (164),
		.OUT_ST_DATA_W                 (165),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) yuv_status_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                     //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_020_src_valid),                              //      sink.valid
		.in_channel           (router_020_src_channel),                            //          .channel
		.in_startofpacket     (router_020_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (router_020_src_endofpacket),                        //          .endofpacket
		.in_ready             (router_020_src_ready),                              //          .ready
		.in_data              (router_020_src_data),                               //          .data
		.out_endofpacket      (yuv_status_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (yuv_status_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (yuv_status_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (yuv_status_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (yuv_status_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (yuv_status_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) acc_config_altera_axi_slave_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                  //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                  //          .ready
		.in_data              (cmd_mux_src_data),                                                   //          .data
		.out_endofpacket      (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (acc_config_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) acc_config_altera_axi_slave_rd_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                              //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                            //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                        //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                              //          .ready
		.in_data              (cmd_mux_001_src_data),                                               //          .data
		.out_endofpacket      (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.out_channel          (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (acc_config_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                               //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                                       //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                                     //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                                 //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                                       //          .ready
		.in_data              (cmd_mux_002_src_data),                                                        //          .data
		.out_endofpacket      (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_unfiltered2_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                               //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                                       //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                                     //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                                 //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                                       //          .ready
		.in_data              (cmd_mux_003_src_data),                                                        //          .data
		.out_endofpacket      (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_unfiltered2_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                               //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                                       //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                                                     //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                                                 //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                                       //          .ready
		.in_data              (cmd_mux_004_src_data),                                                        //          .data
		.out_endofpacket      (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_unfiltered1_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                               //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_mux_005_src_valid),                                                       //      sink.valid
		.in_channel           (cmd_mux_005_src_channel),                                                     //          .channel
		.in_startofpacket     (cmd_mux_005_src_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (cmd_mux_005_src_endofpacket),                                                 //          .endofpacket
		.in_ready             (cmd_mux_005_src_ready),                                                       //          .ready
		.in_data              (cmd_mux_005_src_data),                                                        //          .data
		.out_endofpacket      (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_unfiltered1_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                              //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (cmd_mux_006_src_valid),                                                      //      sink.valid
		.in_channel           (cmd_mux_006_src_channel),                                                    //          .channel
		.in_startofpacket     (cmd_mux_006_src_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (cmd_mux_006_src_endofpacket),                                                //          .endofpacket
		.in_ready             (cmd_mux_006_src_ready),                                                      //          .ready
		.in_data              (cmd_mux_006_src_data),                                                       //          .data
		.out_endofpacket      (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_orig_block_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                              //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (cmd_mux_007_src_valid),                                                      //      sink.valid
		.in_channel           (cmd_mux_007_src_channel),                                                    //          .channel
		.in_startofpacket     (cmd_mux_007_src_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (cmd_mux_007_src_endofpacket),                                                //          .endofpacket
		.in_ready             (cmd_mux_007_src_ready),                                                      //          .ready
		.in_data              (cmd_mux_007_src_data),                                                       //          .data
		.out_endofpacket      (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.out_channel          (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_dma_orig_block_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dma_yuv_altera_axi_slave_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                   //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (cmd_mux_008_src_valid),                                           //      sink.valid
		.in_channel           (cmd_mux_008_src_channel),                                         //          .channel
		.in_startofpacket     (cmd_mux_008_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_mux_008_src_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_mux_008_src_ready),                                           //          .ready
		.in_data              (cmd_mux_008_src_data),                                            //          .data
		.out_endofpacket      (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_yuv_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dma_yuv_altera_axi_slave_rd_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                   //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (cmd_mux_009_src_valid),                                           //      sink.valid
		.in_channel           (cmd_mux_009_src_channel),                                         //          .channel
		.in_startofpacket     (cmd_mux_009_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_mux_009_src_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_mux_009_src_ready),                                           //          .ready
		.in_data              (cmd_mux_009_src_data),                                            //          .data
		.out_endofpacket      (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_yuv_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sad_result_low_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                         //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_010_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_010_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_010_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_010_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_010_src_ready),                                 //          .ready
		.in_data              (cmd_mux_010_src_data),                                  //          .data
		.out_endofpacket      (sad_result_low_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sad_result_low_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sad_result_low_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sad_result_low_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sad_result_low_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sad_result_low_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sad_result_high_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                          //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_011_src_valid),                                  //      sink.valid
		.in_channel           (cmd_mux_011_src_channel),                                //          .channel
		.in_startofpacket     (cmd_mux_011_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (cmd_mux_011_src_endofpacket),                            //          .endofpacket
		.in_ready             (cmd_mux_011_src_ready),                                  //          .ready
		.in_data              (cmd_mux_011_src_data),                                   //          .data
		.out_endofpacket      (sad_result_high_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sad_result_high_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sad_result_high_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sad_result_high_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sad_result_high_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sad_result_high_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) result_ready_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                       //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_012_src_valid),                               //      sink.valid
		.in_channel           (cmd_mux_012_src_channel),                             //          .channel
		.in_startofpacket     (cmd_mux_012_src_startofpacket),                       //          .startofpacket
		.in_endofpacket       (cmd_mux_012_src_endofpacket),                         //          .endofpacket
		.in_ready             (cmd_mux_012_src_ready),                               //          .ready
		.in_data              (cmd_mux_012_src_data),                                //          .data
		.out_endofpacket      (result_ready_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (result_ready_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (result_ready_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (result_ready_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (result_ready_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (result_ready_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) lcu_loaded_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                     //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_013_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_013_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_013_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_013_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_013_src_ready),                             //          .ready
		.in_data              (cmd_mux_013_src_data),                              //          .data
		.out_endofpacket      (lcu_loaded_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lcu_loaded_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (lcu_loaded_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (lcu_loaded_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (lcu_loaded_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lcu_loaded_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) lambda_loaded_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                        //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (cmd_mux_014_src_valid),                                //      sink.valid
		.in_channel           (cmd_mux_014_src_channel),                              //          .channel
		.in_startofpacket     (cmd_mux_014_src_startofpacket),                        //          .startofpacket
		.in_endofpacket       (cmd_mux_014_src_endofpacket),                          //          .endofpacket
		.in_ready             (cmd_mux_014_src_ready),                                //          .ready
		.in_data              (cmd_mux_014_src_data),                                 //          .data
		.out_endofpacket      (lambda_loaded_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lambda_loaded_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (lambda_loaded_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (lambda_loaded_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (lambda_loaded_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lambda_loaded_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (61),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (72),
		.OUT_PKT_BURST_SIZE_L          (70),
		.OUT_PKT_RESPONSE_STATUS_H     (107),
		.OUT_PKT_RESPONSE_STATUS_L     (106),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (74),
		.OUT_PKT_BURST_TYPE_L          (73),
		.OUT_PKT_ORI_BURST_SIZE_L      (108),
		.OUT_PKT_ORI_BURST_SIZE_H      (110),
		.OUT_ST_DATA_W                 (111),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) camera_control_oc_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                            //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_mux_015_src_valid),                                    //      sink.valid
		.in_channel           (cmd_mux_015_src_channel),                                  //          .channel
		.in_startofpacket     (cmd_mux_015_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (cmd_mux_015_src_endofpacket),                              //          .endofpacket
		.in_ready             (cmd_mux_015_src_ready),                                    //          .ready
		.in_data              (cmd_mux_015_src_data),                                     //          .data
		.out_endofpacket      (camera_control_oc_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (camera_control_oc_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (camera_control_oc_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (camera_control_oc_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (camera_control_oc_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (camera_control_oc_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) configure_camera_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                           //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (cmd_mux_016_src_valid),                                   //      sink.valid
		.in_channel           (cmd_mux_016_src_channel),                                 //          .channel
		.in_startofpacket     (cmd_mux_016_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (cmd_mux_016_src_endofpacket),                             //          .endofpacket
		.in_ready             (cmd_mux_016_src_ready),                                   //          .ready
		.in_data              (cmd_mux_016_src_data),                                    //          .data
		.out_endofpacket      (configure_camera_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (configure_camera_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (configure_camera_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (configure_camera_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (configure_camera_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (configure_camera_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) yuv_ctrl_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                     //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_017_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_017_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_017_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_017_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_017_src_ready),                             //          .ready
		.in_data              (cmd_mux_017_src_data),                              //          .data
		.out_endofpacket      (yuv_ctrl_s1_cmd_width_adapter_src_endofpacket),     //       src.endofpacket
		.out_data             (yuv_ctrl_s1_cmd_width_adapter_src_data),            //          .data
		.out_channel          (yuv_ctrl_s1_cmd_width_adapter_src_channel),         //          .channel
		.out_valid            (yuv_ctrl_s1_cmd_width_adapter_src_valid),           //          .valid
		.out_ready            (yuv_ctrl_s1_cmd_width_adapter_src_ready),           //          .ready
		.out_startofpacket    (yuv_ctrl_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (161),
		.IN_PKT_RESPONSE_STATUS_L      (160),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (162),
		.IN_PKT_ORI_BURST_SIZE_H       (164),
		.IN_ST_DATA_W                  (165),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) yuv_status_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                     //       clk.clk
		.reset                (acc_config_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_018_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_018_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_018_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_018_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_018_src_ready),                             //          .ready
		.in_data              (cmd_mux_018_src_data),                              //          .data
		.out_endofpacket      (yuv_status_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (yuv_status_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (yuv_status_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (yuv_status_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (yuv_status_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (yuv_status_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	Kvazaar_QSYS_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (acc_config_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sad_result_low_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (sad_result_low_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (sad_result_low_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                      //         .error
	);

	Kvazaar_QSYS_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (acc_config_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sad_result_high_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sad_result_high_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sad_result_high_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                  //         .error
	);

	Kvazaar_QSYS_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (acc_config_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (result_ready_s1_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (result_ready_s1_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (result_ready_s1_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                  //         .error
	);

	Kvazaar_QSYS_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (acc_config_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lcu_loaded_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (lcu_loaded_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (lcu_loaded_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                  //         .error
	);

	Kvazaar_QSYS_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (acc_config_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lambda_loaded_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (lambda_loaded_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (lambda_loaded_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                  //         .error
	);

	Kvazaar_QSYS_mm_interconnect_3_avalon_st_adapter_005 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (acc_config_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (camera_control_oc_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (camera_control_oc_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (camera_control_oc_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                  //         .error
	);

	Kvazaar_QSYS_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (acc_config_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (configure_camera_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (configure_camera_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (configure_camera_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                  //         .error
	);

	Kvazaar_QSYS_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (acc_config_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (yuv_ctrl_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (yuv_ctrl_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (yuv_ctrl_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                  //         .error
	);

	Kvazaar_QSYS_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (acc_config_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (yuv_status_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (yuv_status_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (yuv_status_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                  //         .error
	);

endmodule
